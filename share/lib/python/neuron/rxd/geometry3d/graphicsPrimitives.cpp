/* Generated by Cython 0.29.37 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_37"
#define CYTHON_HEX_VERSION 0x001D25F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__neuron__rxd__geometry3d__graphicsPrimitives
#define __PYX_HAVE_API__neuron__rxd__geometry3d__graphicsPrimitives
/* Early includes */
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "share/lib/python/neuron/rxd/geometry3d/graphicsPrimitives.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":28
 * #    return a if a < b else b
 * 
 * cdef class Complement:             # <<<<<<<<<<<<<<
 *     def __init__(self, obj):
 *         self.obj = obj
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement {
  PyObject_HEAD
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":41
 * 
 * 
 * cdef class Union:             # <<<<<<<<<<<<<<
 *     cdef list objects
 *     def __init__(self, list objects):
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_vtab;
  PyObject *objects;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":63
 * 
 * 
 * cdef class Intersection:             # <<<<<<<<<<<<<<
 *     cdef list objects
 *     def __init__(self, list objects):
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_vtab;
  PyObject *objects;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":86
 * 
 * 
 * cdef class Plane:             # <<<<<<<<<<<<<<
 *     cdef double d, mul, nx, ny, nz, px, py, pz
 *     def __init__(self, double px, double py, double pz, double nx, double ny, double nz):
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_vtab;
  double d;
  double mul;
  double nx;
  double ny;
  double nz;
  double px;
  double py;
  double pz;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":108
 * 
 * 
 * cdef class Sphere:             # <<<<<<<<<<<<<<
 *     cdef double _x, _y, _z, _r
 *     cdef _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_vtab;
  double _x;
  double _y;
  double _z;
  double _r;
  PyObject *_xlo;
  PyObject *_xhi;
  PyObject *_ylo;
  PyObject *_yhi;
  PyObject *_zlo;
  PyObject *_zhi;
  PyObject *clips;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":168
 * 
 * 
 * cdef class Cylinder:             # <<<<<<<<<<<<<<
 *     cdef double cx, cy, cz, r, rr, axisx, axisy, axisz, x0, y0, z0, x1, y1, z1, h
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_vtab;
  double cx;
  double cy;
  double cz;
  double r;
  double rr;
  double axisx;
  double axisy;
  double axisz;
  double x0;
  double y0;
  double z0;
  double x1;
  double y1;
  double z1;
  double h;
  double length;
  double _xlo;
  double _xhi;
  double _ylo;
  double _yhi;
  double _zlo;
  double _zhi;
  PyObject *neighbors;
  PyObject *clips;
  PyObject *neighbor_regions;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":314
 * 
 * 
 * cdef class SphereCone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, ha, hb, hra, hrb
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_vtab;
  double x0;
  double y0;
  double z0;
  double r0;
  double x1;
  double y1;
  double z1;
  double r1;
  double rra;
  double rrb;
  double axisx;
  double axisy;
  double axisz;
  double conelength;
  double side1;
  double side2;
  double length;
  double _xlo;
  double _xhi;
  double _ylo;
  double _yhi;
  double _zlo;
  double _zhi;
  double ha;
  double hb;
  double hra;
  double hrb;
  PyObject *clips;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":419
 * 
 * 
 * cdef class Cone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, cx, cy, cz, h
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_vtab;
  double x0;
  double y0;
  double z0;
  double r0;
  double x1;
  double y1;
  double z1;
  double r1;
  double rra;
  double rrb;
  double axisx;
  double axisy;
  double axisz;
  double conelength;
  double side1;
  double side2;
  double length;
  double _xlo;
  double _xhi;
  double _ylo;
  double _yhi;
  double _zlo;
  double _zhi;
  double cx;
  double cy;
  double cz;
  double h;
  PyObject *neighbors;
  PyObject *clips;
  PyObject *neighbor_regions;
  int reversed;
};


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":604
 * 
 * 
 * cdef class SkewCone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, sx, sy, sz, planed
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone {
  PyObject_HEAD
  struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_vtab;
  double x0;
  double y0;
  double z0;
  double r0;
  double x1;
  double y1;
  double z1;
  double r1;
  double rra;
  double rrb;
  double axisx;
  double axisy;
  double axisz;
  double conelength;
  double side1;
  double side2;
  double length;
  double _xlo;
  double _xhi;
  double _ylo;
  double _yhi;
  double _zlo;
  double _zhi;
  double sx;
  double sy;
  double sz;
  double planed;
};



/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":41
 * 
 * 
 * cdef class Union:             # <<<<<<<<<<<<<<
 *     cdef list objects
 *     def __init__(self, list objects):
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*starting_points)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":63
 * 
 * 
 * cdef class Intersection:             # <<<<<<<<<<<<<<
 *     cdef list objects
 *     def __init__(self, list objects):
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*starting_points)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":86
 * 
 * 
 * cdef class Plane:             # <<<<<<<<<<<<<<
 *     cdef double d, mul, nx, ny, nz, px, py, pz
 *     def __init__(self, double px, double py, double pz, double nx, double ny, double nz):
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *, double, double, double, int __pyx_skip_dispatch);
  PyObject *(*starting_points)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":108
 * 
 * 
 * cdef class Sphere:             # <<<<<<<<<<<<<<
 *     cdef double _x, _y, _z, _r
 *     cdef _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, double, int __pyx_skip_dispatch);
  int (*overlaps_x)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_y)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_z)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":168
 * 
 * 
 * cdef class Cylinder:             # <<<<<<<<<<<<<<
 *     cdef double cx, cy, cz, r, rr, axisx, axisy, axisz, x0, y0, z0, x1, y1, z1, h
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder {
  PyObject *(*within_core)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, double, int __pyx_skip_dispatch);
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, double, int __pyx_skip_dispatch);
  int (*overlaps_x)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_y)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_z)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":314
 * 
 * 
 * cdef class SphereCone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, ha, hb, hra, hrb
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, double, int __pyx_skip_dispatch);
  int (*overlaps_x)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_y)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_z)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":419
 * 
 * 
 * cdef class Cone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, cx, cy, cz, h
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone {
  PyObject *(*within_core)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, double, int __pyx_skip_dispatch);
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, double, int __pyx_skip_dispatch);
  int (*overlaps_x)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_y)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_z)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;


/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":604
 * 
 * 
 * cdef class SkewCone:             # <<<<<<<<<<<<<<
 *     cdef double x0, y0, z0, r0, x1, y1, z1, r1, rra, rrb, axisx, axisy, axisz, conelength, side1, side2
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, sx, sy, sz, planed
 */

struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone {
  double (*distance)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, double, int __pyx_skip_dispatch);
  int (*overlaps_x)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_y)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch);
  int (*overlaps_z)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch); /* proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'neuron.rxd.geometry3d.graphicsPrimitives' */
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone = 0;
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Union__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Intersection__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Plane__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Sphere__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cylinder__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SphereCone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SkewCone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "neuron.rxd.geometry3d.graphicsPrimitives"
extern int __pyx_module_is_main_neuron__rxd__geometry3d__graphicsPrimitives;
int __pyx_module_is_main_neuron__rxd__geometry3d__graphicsPrimitives = 0;

/* Implementation of 'neuron.rxd.geometry3d.graphicsPrimitives' */
static PyObject *__pyx_builtin_sum;
static const char __pyx_k_r[] = "r";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_hi[] = "hi";
static const char __pyx_k_lo[] = "lo";
static const char __pyx_k_nx[] = "nx";
static const char __pyx_k_ny[] = "ny";
static const char __pyx_k_nz[] = "nz";
static const char __pyx_k_px[] = "px";
static const char __pyx_k_py[] = "py";
static const char __pyx_k_pz[] = "pz";
static const char __pyx_k_r0[] = "r0";
static const char __pyx_k_r1[] = "r1";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_xs[] = "xs";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_ys[] = "ys";
static const char __pyx_k_z0[] = "z0";
static const char __pyx_k_z1[] = "z1";
static const char __pyx_k_z2[] = "z2";
static const char __pyx_k_zs[] = "zs";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_Cone[] = "Cone";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_Plane[] = "Plane";
static const char __pyx_k_Union[] = "Union";
static const char __pyx_k_Sphere[] = "Sphere";
static const char __pyx_k_bisect[] = "bisect";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Union_r[] = "Union(%r)";
static const char __pyx_k_objects[] = "objects";
static const char __pyx_k_Cylinder[] = "Cylinder";
static const char __pyx_k_SkewCone[] = "SkewCone";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_neighbors[] = "neighbors";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_Complement[] = "Complement";
static const char __pyx_k_SphereCone[] = "SphereCone";
static const char __pyx_k_overlaps_x[] = "overlaps_x";
static const char __pyx_k_overlaps_y[] = "overlaps_y";
static const char __pyx_k_overlaps_z[] = "overlaps_z";
static const char __pyx_k_primitives[] = "primitives";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_bisect_left[] = "bisect_left";
static const char __pyx_k_within_core[] = "within_core";
static const char __pyx_k_Complement_r[] = "Complement(%r)";
static const char __pyx_k_Intersection[] = "Intersection";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_Intersection_r[] = "Intersection(%r)";
static const char __pyx_k_Sphere_g_g_g_g[] = "Sphere(%g, %g, %g, %g)";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_starting_points[] = "starting_points";
static const char __pyx_k_neighbor_regions[] = "neighbor_regions";
static const char __pyx_k_Plane_g_g_g_g_g_g[] = "Plane(%g, %g, %g, %g, %g, %g)";
static const char __pyx_k_pyx_unpickle_Cone[] = "__pyx_unpickle_Cone";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_pyx_unpickle_Plane[] = "__pyx_unpickle_Plane";
static const char __pyx_k_pyx_unpickle_Union[] = "__pyx_unpickle_Union";
static const char __pyx_k_pyx_unpickle_Sphere[] = "__pyx_unpickle_Sphere";
static const char __pyx_k_Cone_g_g_g_g_g_g_g_g[] = "Cone(%g, %g, %g, %g, %g, %g, %g, %g)";
static const char __pyx_k_pyx_unpickle_Cylinder[] = "__pyx_unpickle_Cylinder";
static const char __pyx_k_pyx_unpickle_SkewCone[] = "__pyx_unpickle_SkewCone";
static const char __pyx_k_Cylinder_g_g_g_g_g_g_g[] = "Cylinder(%g, %g, %g, %g, %g, %g, %g)";
static const char __pyx_k_Sphere_g_g_g_g_clips_r[] = "Sphere(%g, %g, %g, %g; clips=%r)";
static const char __pyx_k_pyx_unpickle_Complement[] = "__pyx_unpickle_Complement";
static const char __pyx_k_pyx_unpickle_SphereCone[] = "__pyx_unpickle_SphereCone";
static const char __pyx_k_pyx_unpickle_Intersection[] = "__pyx_unpickle_Intersection";
static const char __pyx_k_SphereCone_g_g_g_g_g_g_g_g[] = "SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)";
static const char __pyx_k_Cone_g_g_g_g_g_g_g_g_clips_r[] = "Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)";
static const char __pyx_k_Cylinder_g_g_g_g_g_g_g_clips_r[] = "Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)";
static const char __pyx_k_At_least_one_Cone_radius_must_be[] = "At least one Cone radius must be positive";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())";
static const char __pyx_k_neuron_rxd_geometry3d_graphicsPr[] = "neuron.rxd.geometry3d.graphicsPrimitives";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_2[] = "Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_3[] = "Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_4[] = "Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_5[] = "Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_6[] = "Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_7[] = "Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0_8[] = "Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))";
static PyObject *__pyx_kp_s_At_least_one_Cone_radius_must_be;
static PyObject *__pyx_n_s_Complement;
static PyObject *__pyx_kp_s_Complement_r;
static PyObject *__pyx_n_s_Cone;
static PyObject *__pyx_kp_s_Cone_g_g_g_g_g_g_g_g;
static PyObject *__pyx_kp_s_Cone_g_g_g_g_g_g_g_g_clips_r;
static PyObject *__pyx_n_s_Cylinder;
static PyObject *__pyx_kp_s_Cylinder_g_g_g_g_g_g_g;
static PyObject *__pyx_kp_s_Cylinder_g_g_g_g_g_g_g_clips_r;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8;
static PyObject *__pyx_n_s_Intersection;
static PyObject *__pyx_kp_s_Intersection_r;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_Plane;
static PyObject *__pyx_kp_s_Plane_g_g_g_g_g_g;
static PyObject *__pyx_n_s_SkewCone;
static PyObject *__pyx_n_s_Sphere;
static PyObject *__pyx_n_s_SphereCone;
static PyObject *__pyx_kp_s_SphereCone_g_g_g_g_g_g_g_g;
static PyObject *__pyx_kp_s_Sphere_g_g_g_g;
static PyObject *__pyx_kp_s_Sphere_g_g_g_g_clips_r;
static PyObject *__pyx_n_s_Union;
static PyObject *__pyx_kp_s_Union_r;
static PyObject *__pyx_n_s_bisect;
static PyObject *__pyx_n_s_bisect_left;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hi;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_lo;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_neighbor_regions;
static PyObject *__pyx_n_s_neighbors;
static PyObject *__pyx_n_s_neuron_rxd_geometry3d_graphicsPr;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_nx;
static PyObject *__pyx_n_s_ny;
static PyObject *__pyx_n_s_nz;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_objects;
static PyObject *__pyx_n_s_overlaps_x;
static PyObject *__pyx_n_s_overlaps_y;
static PyObject *__pyx_n_s_overlaps_z;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_primitives;
static PyObject *__pyx_n_s_px;
static PyObject *__pyx_n_s_py;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Complement;
static PyObject *__pyx_n_s_pyx_unpickle_Cone;
static PyObject *__pyx_n_s_pyx_unpickle_Cylinder;
static PyObject *__pyx_n_s_pyx_unpickle_Intersection;
static PyObject *__pyx_n_s_pyx_unpickle_Plane;
static PyObject *__pyx_n_s_pyx_unpickle_SkewCone;
static PyObject *__pyx_n_s_pyx_unpickle_Sphere;
static PyObject *__pyx_n_s_pyx_unpickle_SphereCone;
static PyObject *__pyx_n_s_pyx_unpickle_Union;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pz;
static PyObject *__pyx_n_s_r;
static PyObject *__pyx_n_s_r0;
static PyObject *__pyx_n_s_r1;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_starting_points;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_within_core;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_xs;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_ys;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z0;
static PyObject *__pyx_n_s_z1;
static PyObject *__pyx_n_s_z2;
static PyObject *__pyx_n_s_zs;
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_objects); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_objects); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, double __pyx_v_nx, double __pyx_v_ny, double __pyx_v_nz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives___get__(CYTHON_UNUSED struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_8overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_12overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_14set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v_clips); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_16get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_18__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_20__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_4get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_6set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_clips); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_8axis(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10set_neighbors(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_neighbors, PyObject *__pyx_v_neighbor_regions); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_12within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_14starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_16distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_18overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_20overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_22overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_24__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_26__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_2set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v_clips); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_4get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_6__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_8starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_12overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_14overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_16overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_18__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_20__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_4set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v_clips); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_6get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_8within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axis(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_12starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_14distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_16overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_18overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_20overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_22__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_24__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_get_clip(CYTHON_UNUSED struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_4starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_6distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_8overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_12overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_14__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_16__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_2__pyx_unpickle_Union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4__pyx_unpickle_Intersection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6__pyx_unpickle_Plane(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8__pyx_unpickle_Sphere(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10__pyx_unpickle_Cylinder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12__pyx_unpickle_SphereCone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_14__pyx_unpickle_Cone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_16__pyx_unpickle_SkewCone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_691256;
static PyObject *__pyx_int_30581986;
static PyObject *__pyx_int_30850365;
static PyObject *__pyx_int_31625445;
static PyObject *__pyx_int_34679499;
static PyObject *__pyx_int_39271848;
static PyObject *__pyx_int_57420663;
static PyObject *__pyx_int_92872098;
static PyObject *__pyx_int_94399116;
static PyObject *__pyx_int_96385534;
static PyObject *__pyx_int_99548530;
static PyObject *__pyx_int_106819078;
static PyObject *__pyx_int_110911515;
static PyObject *__pyx_int_153540018;
static PyObject *__pyx_int_159808084;
static PyObject *__pyx_int_187000701;
static PyObject *__pyx_int_193865462;
static PyObject *__pyx_int_222419149;
static PyObject *__pyx_int_228825662;
static PyObject *__pyx_int_238750788;
static PyObject *__pyx_int_238900401;
static PyObject *__pyx_int_239915778;
static PyObject *__pyx_int_241535739;
static PyObject *__pyx_int_252673849;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_codeobj__11;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
/* Late includes */

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":29
 * 
 * cdef class Complement:
 *     def __init__(self, obj):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 29, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_obj = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 29, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement___init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self), __pyx_v_obj);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":30
 * cdef class Complement:
 *     def __init__(self, obj):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return 'Complement(%r)' % self.obj
 */
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_obj, __pyx_v_obj) < 0) __PYX_ERR(0, 30, __pyx_L1_error)

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":29
 * 
 * cdef class Complement:
 *     def __init__(self, obj):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":31
 *     def __init__(self, obj):
 *         self.obj = obj
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Complement(%r)' % self.obj
 *     def distance(self, px, py, pz):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_2__repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":32
 *         self.obj = obj
 *     def __repr__(self):
 *         return 'Complement(%r)' % self.obj             # <<<<<<<<<<<<<<
 *     def distance(self, px, py, pz):
 *         return -self.obj.distance(px, py, pz)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Complement_r, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":31
 *     def __init__(self, obj):
 *         self.obj = obj
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Complement(%r)' % self.obj
 *     def distance(self, px, py, pz):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":33
 *     def __repr__(self):
 *         return 'Complement(%r)' % self.obj
 *     def distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         return -self.obj.distance(px, py, pz)
 *     def starting_points(self, xs, ys, zs):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_px = 0;
  PyObject *__pyx_v_py = 0;
  PyObject *__pyx_v_pz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 33, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 33, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 33, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = values[0];
    __pyx_v_py = values[1];
    __pyx_v_pz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 33, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_4distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":34
 *         return 'Complement(%r)' % self.obj
 *     def distance(self, px, py, pz):
 *         return -self.obj.distance(px, py, pz)             # <<<<<<<<<<<<<<
 *     def starting_points(self, xs, ys, zs):
 *         return self.obj.starting_points(xs, ys, zs)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_distance); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_px);
    __Pyx_GIVEREF(__pyx_v_px);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_px);
    __Pyx_INCREF(__pyx_v_py);
    __Pyx_GIVEREF(__pyx_v_py);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_py);
    __Pyx_INCREF(__pyx_v_pz);
    __Pyx_GIVEREF(__pyx_v_pz);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_pz);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Negative(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":33
 *     def __repr__(self):
 *         return 'Complement(%r)' % self.obj
 *     def distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         return -self.obj.distance(px, py, pz)
 *     def starting_points(self, xs, ys, zs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":35
 *     def distance(self, px, py, pz):
 *         return -self.obj.distance(px, py, pz)
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return self.obj.starting_points(xs, ys, zs)
 *     property primitives:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 35, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 35, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 35, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 35, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_6starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":36
 *         return -self.obj.distance(px, py, pz)
 *     def starting_points(self, xs, ys, zs):
 *         return self.obj.starting_points(xs, ys, zs)             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return [self.obj]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_obj); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 3+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(3+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_xs);
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_ys);
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_4, __pyx_v_zs);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":35
 *     def distance(self, px, py, pz):
 *         return -self.obj.distance(px, py, pz)
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return self.obj.starting_points(xs, ys, zs)
 *     property primitives:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":38
 *         return self.obj.starting_points(xs, ys, zs)
 *     property primitives:
 *         def __get__(self): return [self.obj]             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_obj); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_8__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = ()             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __pyx_v_state = __pyx_empty_tuple;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = ()
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Complement); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, None), state
 *     else:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Complement__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Complement); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_222419149);
    __Pyx_GIVEREF(__pyx_int_222419149);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_222419149);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Complement__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Complement__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Complement, (type(self), 0xd41d8cd, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Complement__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Complement.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":43
 * cdef class Union:
 *     cdef list objects
 *     def __init__(self, list objects):             # <<<<<<<<<<<<<<
 *         self.objects = objects
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objects = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objects,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objects)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 43, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_objects = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 43, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objects), (&PyList_Type), 1, "objects", 1))) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union___init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self), __pyx_v_objects);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_objects) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":44
 *     cdef list objects
 *     def __init__(self, list objects):
 *         self.objects = objects             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return 'Union(%r)' % self.objects
 */
  __Pyx_INCREF(__pyx_v_objects);
  __Pyx_GIVEREF(__pyx_v_objects);
  __Pyx_GOTREF(__pyx_v_self->objects);
  __Pyx_DECREF(__pyx_v_self->objects);
  __pyx_v_self->objects = __pyx_v_objects;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":43
 * cdef class Union:
 *     cdef list objects
 *     def __init__(self, list objects):             # <<<<<<<<<<<<<<
 *         self.objects = objects
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":45
 *     def __init__(self, list objects):
 *         self.objects = objects
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Union(%r)' % self.objects
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_2__repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":46
 *         self.objects = objects
 *     def __repr__(self):
 *         return 'Union(%r)' % self.objects             # <<<<<<<<<<<<<<
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Union_r, __pyx_v_self->objects); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":45
 *     def __init__(self, list objects):
 *         self.objects = objects
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Union(%r)' % self.objects
 *     @cython.boundscheck(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":49
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef double distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         # CTNG:uniondist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_dists = NULL;
  double __pyx_v_d;
  double __pyx_v_d2;
  PyObject *__pyx_v_obj = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_5distance)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 49, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_px);
          __Pyx_GIVEREF(__pyx_v_px);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_px);
          __Pyx_INCREF(__pyx_v_py);
          __Pyx_GIVEREF(__pyx_v_py);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_py);
          __Pyx_INCREF(__pyx_v_pz);
          __Pyx_GIVEREF(__pyx_v_pz);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_pz);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 49, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":51
 *     cpdef double distance(self, px, py, pz):
 *         # CTNG:uniondist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]             # <<<<<<<<<<<<<<
 *         cdef double d, d2
 *         d = dists[0]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 51, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 51, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_px);
      __Pyx_GIVEREF(__pyx_v_px);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_5, __pyx_v_px);
      __Pyx_INCREF(__pyx_v_py);
      __Pyx_GIVEREF(__pyx_v_py);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_5, __pyx_v_py);
      __Pyx_INCREF(__pyx_v_pz);
      __Pyx_GIVEREF(__pyx_v_pz);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_5, __pyx_v_pz);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 51, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dists = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":53
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 *         cdef double d, d2
 *         d = dists[0]             # <<<<<<<<<<<<<<
 *         for d2 in dists:
 *             if d2 < d: d = d2
 */
  __pyx_t_7 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_dists, 0)); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_v_d = __pyx_t_7;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":54
 *         cdef double d, d2
 *         d = dists[0]
 *         for d2 in dists:             # <<<<<<<<<<<<<<
 *             if d2 < d: d = d2
 *         return d
 */
  __pyx_t_1 = __pyx_v_dists; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 54, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_d2 = __pyx_t_7;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":55
 *         d = dists[0]
 *         for d2 in dists:
 *             if d2 < d: d = d2             # <<<<<<<<<<<<<<
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):
 */
    __pyx_t_10 = ((__pyx_v_d2 < __pyx_v_d) != 0);
    if (__pyx_t_10) {
      __pyx_v_d = __pyx_v_d2;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":54
 *         cdef double d, d2
 *         d = dists[0]
 *         for d2 in dists:             # <<<<<<<<<<<<<<
 *             if d2 < d: d = d2
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":56
 *         for d2 in dists:
 *             if d2 < d: d = d2
 *         return d             # <<<<<<<<<<<<<<
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":49
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef double distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         # CTNG:uniondist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Union.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dists);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_px = 0;
  PyObject *__pyx_v_py = 0;
  PyObject *__pyx_v_pz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 49, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 49, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 49, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = values[0];
    __pyx_v_py = values[1];
    __pyx_v_pz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 49, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_4distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":57
 *             if d2 < d: d = d2
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_starting_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_7starting_points)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 57, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_xs);
          __Pyx_GIVEREF(__pyx_v_xs);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_xs);
          __Pyx_INCREF(__pyx_v_ys);
          __Pyx_GIVEREF(__pyx_v_ys);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_ys);
          __Pyx_INCREF(__pyx_v_zs);
          __Pyx_GIVEREF(__pyx_v_zs);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_zs);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 57, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":58
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return sum([obj.primitives for obj in self.objects], [])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 58, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 58, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_5, __pyx_v_zs);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 58, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":57
 *             if d2 < d: d = d2
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 57, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 57, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 57, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 57, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_6starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_starting_points(__pyx_v_self, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":60
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 *         def __get__(self): return sum([obj.primitives for obj in self.objects], [])             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self) {
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 60, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 60, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_primitives); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_8__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.objects,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->objects);
  __Pyx_GIVEREF(__pyx_v_self->objects);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->objects);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.objects is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.objects is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->objects != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.objects is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.objects is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Union); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_92872098);
    __Pyx_GIVEREF(__pyx_int_92872098);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_92872098);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.objects is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, None), state
 *     else:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Union__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Union); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_92872098);
    __Pyx_GIVEREF(__pyx_int_92872098);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_92872098);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Union__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Union__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Union__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Union, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Union__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Union.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":65
 * cdef class Intersection:
 *     cdef list objects
 *     def __init__(self, list objects):             # <<<<<<<<<<<<<<
 *         self.objects = objects
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_objects = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_objects,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_objects)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 65, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_objects = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_objects), (&PyList_Type), 1, "objects", 1))) __PYX_ERR(0, 65, __pyx_L1_error)
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection___init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self), __pyx_v_objects);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_objects) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":66
 *     cdef list objects
 *     def __init__(self, list objects):
 *         self.objects = objects             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return 'Intersection(%r)' % self.objects
 */
  __Pyx_INCREF(__pyx_v_objects);
  __Pyx_GIVEREF(__pyx_v_objects);
  __Pyx_GOTREF(__pyx_v_self->objects);
  __Pyx_DECREF(__pyx_v_self->objects);
  __pyx_v_self->objects = __pyx_v_objects;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":65
 * cdef class Intersection:
 *     cdef list objects
 *     def __init__(self, list objects):             # <<<<<<<<<<<<<<
 *         self.objects = objects
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":67
 *     def __init__(self, list objects):
 *         self.objects = objects
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Intersection(%r)' % self.objects
 *     @cython.boundscheck(False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_2__repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":68
 *         self.objects = objects
 *     def __repr__(self):
 *         return 'Intersection(%r)' % self.objects             # <<<<<<<<<<<<<<
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Intersection_r, __pyx_v_self->objects); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":67
 *     def __init__(self, list objects):
 *         self.objects = objects
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Intersection(%r)' % self.objects
 *     @cython.boundscheck(False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":71
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef double distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         # CTNG: intdist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_dists = NULL;
  double __pyx_v_d;
  double __pyx_v_d2;
  PyObject *__pyx_v_obj = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_5distance)) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_px);
          __Pyx_GIVEREF(__pyx_v_px);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_px);
          __Pyx_INCREF(__pyx_v_py);
          __Pyx_GIVEREF(__pyx_v_py);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_py);
          __Pyx_INCREF(__pyx_v_pz);
          __Pyx_GIVEREF(__pyx_v_pz);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_pz);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 71, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_7;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":73
 *     cpdef double distance(self, px, py, pz):
 *         # CTNG: intdist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]             # <<<<<<<<<<<<<<
 *         cdef double d, d2
 *         d = dists[0]
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 73, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_px, __pyx_v_py, __pyx_v_pz};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_9 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_px);
      __Pyx_GIVEREF(__pyx_v_px);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_5, __pyx_v_px);
      __Pyx_INCREF(__pyx_v_py);
      __Pyx_GIVEREF(__pyx_v_py);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_5, __pyx_v_py);
      __Pyx_INCREF(__pyx_v_pz);
      __Pyx_GIVEREF(__pyx_v_pz);
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_5, __pyx_v_pz);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dists = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":75
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 *         cdef double d, d2
 *         d = dists[0]             # <<<<<<<<<<<<<<
 *         for d2 in dists:
 *             if d2 > d: d = d2
 */
  __pyx_t_7 = __pyx_PyFloat_AsDouble(PyList_GET_ITEM(__pyx_v_dists, 0)); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_v_d = __pyx_t_7;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":76
 *         cdef double d, d2
 *         d = dists[0]
 *         for d2 in dists:             # <<<<<<<<<<<<<<
 *             if d2 > d: d = d2
 *         return d
 */
  __pyx_t_1 = __pyx_v_dists; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
  for (;;) {
    if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_d2 = __pyx_t_7;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":77
 *         d = dists[0]
 *         for d2 in dists:
 *             if d2 > d: d = d2             # <<<<<<<<<<<<<<
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):
 */
    __pyx_t_10 = ((__pyx_v_d2 > __pyx_v_d) != 0);
    if (__pyx_t_10) {
      __pyx_v_d = __pyx_v_d2;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":76
 *         cdef double d, d2
 *         d = dists[0]
 *         for d2 in dists:             # <<<<<<<<<<<<<<
 *             if d2 > d: d = d2
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":78
 *         for d2 in dists:
 *             if d2 > d: d = d2
 *         return d             # <<<<<<<<<<<<<<
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":71
 *     @cython.boundscheck(False)
 *     @cython.wraparound(False)
 *     cpdef double distance(self, px, py, pz):             # <<<<<<<<<<<<<<
 *         # CTNG: intdist
 *         dists = [obj.distance(px, py, pz) for obj in self.objects]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dists);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_px = 0;
  PyObject *__pyx_v_py = 0;
  PyObject *__pyx_v_pz = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 71, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 71, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = values[0];
    __pyx_v_py = values[1];
    __pyx_v_pz = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_4distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_px, PyObject *__pyx_v_py, PyObject *__pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":79
 *             if d2 > d: d = d2
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_starting_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_7starting_points)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_xs);
          __Pyx_GIVEREF(__pyx_v_xs);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_xs);
          __Pyx_INCREF(__pyx_v_ys);
          __Pyx_GIVEREF(__pyx_v_ys);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_ys);
          __Pyx_INCREF(__pyx_v_zs);
          __Pyx_GIVEREF(__pyx_v_zs);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_zs);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 79, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":80
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return sum([obj.primitives for obj in self.objects], [])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_7 = 0;
  for (;;) {
    if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_5, __pyx_v_zs);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":79
 *             if d2 > d: d = d2
 *         return d
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 79, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 79, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 79, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_6starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_starting_points(__pyx_v_self, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":82
 *         return sum([c.starting_points(xs, ys, zs) for c in self.objects], [])
 *     property primitives:
 *         def __get__(self): return sum([obj.primitives for obj in self.objects], [])             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self) {
  PyObject *__pyx_v_obj = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->objects == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 82, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->objects; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 82, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_obj, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_obj, __pyx_n_s_primitives); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_8__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.objects,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->objects);
  __Pyx_GIVEREF(__pyx_v_self->objects);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->objects);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.objects is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.objects,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.objects is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->objects != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.objects is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.objects is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Intersection); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_92872098);
    __Pyx_GIVEREF(__pyx_int_92872098);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_92872098);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.objects is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, None), state
 *     else:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Intersection__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Intersection); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_92872098);
    __Pyx_GIVEREF(__pyx_int_92872098);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_92872098);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Intersection__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Intersection__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Intersection__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Intersection, (type(self), 0x5891da2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Intersection__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Intersection.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":88
 * cdef class Plane:
 *     cdef double d, mul, nx, ny, nz, px, py, pz
 *     def __init__(self, double px, double py, double pz, double nx, double ny, double nz):             # <<<<<<<<<<<<<<
 *         """(px, py, pz) -- a point; (nx, ny, nz) -- the normal vector"""
 *         self.d = - (nx * px + ny * py + nz * pz)
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__[] = "(px, py, pz) -- a point; (nx, ny, nz) -- the normal vector";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__;
#endif
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,&__pyx_n_s_nx,&__pyx_n_s_ny,&__pyx_n_s_nz,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 1); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 2); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 3); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ny)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 4); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, 5); __PYX_ERR(0, 88, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_nx = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_nx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_ny = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_ny == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_nz = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_nz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz, __pyx_v_nx, __pyx_v_ny, __pyx_v_nz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, double __pyx_v_nx, double __pyx_v_ny, double __pyx_v_nz) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":90
 *     def __init__(self, double px, double py, double pz, double nx, double ny, double nz):
 *         """(px, py, pz) -- a point; (nx, ny, nz) -- the normal vector"""
 *         self.d = - (nx * px + ny * py + nz * pz)             # <<<<<<<<<<<<<<
 *         self.mul = 1. / sqrt(nx ** 2 + ny ** 2 + nz ** 2)
 *         self.nx = nx
 */
  __pyx_v_self->d = (-(((__pyx_v_nx * __pyx_v_px) + (__pyx_v_ny * __pyx_v_py)) + (__pyx_v_nz * __pyx_v_pz)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":91
 *         """(px, py, pz) -- a point; (nx, ny, nz) -- the normal vector"""
 *         self.d = - (nx * px + ny * py + nz * pz)
 *         self.mul = 1. / sqrt(nx ** 2 + ny ** 2 + nz ** 2)             # <<<<<<<<<<<<<<
 *         self.nx = nx
 *         self.ny = ny
 */
  __pyx_t_1 = sqrt(((pow(__pyx_v_nx, 2.0) + pow(__pyx_v_ny, 2.0)) + pow(__pyx_v_nz, 2.0)));
  if (unlikely(__pyx_t_1 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 91, __pyx_L1_error)
  }
  __pyx_v_self->mul = (1. / __pyx_t_1);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":92
 *         self.d = - (nx * px + ny * py + nz * pz)
 *         self.mul = 1. / sqrt(nx ** 2 + ny ** 2 + nz ** 2)
 *         self.nx = nx             # <<<<<<<<<<<<<<
 *         self.ny = ny
 *         self.nz = nz
 */
  __pyx_v_self->nx = __pyx_v_nx;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":93
 *         self.mul = 1. / sqrt(nx ** 2 + ny ** 2 + nz ** 2)
 *         self.nx = nx
 *         self.ny = ny             # <<<<<<<<<<<<<<
 *         self.nz = nz
 *         self.px = px
 */
  __pyx_v_self->ny = __pyx_v_ny;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":94
 *         self.nx = nx
 *         self.ny = ny
 *         self.nz = nz             # <<<<<<<<<<<<<<
 *         self.px = px
 *         self.py = py
 */
  __pyx_v_self->nz = __pyx_v_nz;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":95
 *         self.ny = ny
 *         self.nz = nz
 *         self.px = px             # <<<<<<<<<<<<<<
 *         self.py = py
 *         self.pz = pz
 */
  __pyx_v_self->px = __pyx_v_px;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":96
 *         self.nz = nz
 *         self.px = px
 *         self.py = py             # <<<<<<<<<<<<<<
 *         self.pz = pz
 *     property primitives:
 */
  __pyx_v_self->py = __pyx_v_py;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":97
 *         self.px = px
 *         self.py = py
 *         self.pz = pz             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return []
 */
  __pyx_v_self->pz = __pyx_v_pz;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":88
 * cdef class Plane:
 *     cdef double d, mul, nx, ny, nz, px, py, pz
 *     def __init__(self, double px, double py, double pz, double nx, double ny, double nz):             # <<<<<<<<<<<<<<
 *         """(px, py, pz) -- a point; (nx, ny, nz) -- the normal vector"""
 *         self.d = - (nx * px + ny * py + nz * pz)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":99
 *         self.pz = pz
 *     property primitives:
 *         def __get__(self): return []             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives___get__(CYTHON_UNUSED struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":100
 *     property primitives:
 *         def __get__(self): return []
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 *     cpdef double distance(self, double x, double y, double z):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_2__repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":101
 *         def __get__(self): return []
 *     def __repr__(self):
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)             # <<<<<<<<<<<<<<
 *     cpdef double distance(self, double x, double y, double z):
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->px); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->py); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->pz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->nx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->ny); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->nz); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Plane_g_g_g_g_g_g, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":100
 *     property primitives:
 *         def __get__(self): return []
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 *     cpdef double distance(self, double x, double y, double z):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":102
 *     def __repr__(self):
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 *     cpdef double distance(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 *     cpdef list starting_points(self, xs, ys, zs):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, int __pyx_skip_dispatch) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_5distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":103
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 *     cpdef double distance(self, double x, double y, double z):
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul             # <<<<<<<<<<<<<<
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return [(bisect.bisect_left(xs, self.px), bisect.bisect_left(ys, self.py), bisect.bisect_left(zs, self.pz))]
 */
  __pyx_r = (((((__pyx_v_self->nx * __pyx_v_x) + (__pyx_v_self->ny * __pyx_v_y)) + (__pyx_v_self->nz * __pyx_v_z)) + __pyx_v_self->d) * __pyx_v_self->mul);
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":102
 *     def __repr__(self):
 *         return 'Plane(%g, %g, %g, %g, %g, %g)' % (self.px, self.py, self.pz, self.nx, self.ny, self.nz)
 *     cpdef double distance(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 *     cpdef list starting_points(self, xs, ys, zs):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Plane.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 102, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 102, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 102, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 102, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_4distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_distance(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_z, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":104
 *     cpdef double distance(self, double x, double y, double z):
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return [(bisect.bisect_left(xs, self.px), bisect.bisect_left(ys, self.py), bisect.bisect_left(zs, self.pz))]
 * 
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_starting_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_7starting_points)) {
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = __pyx_t_1; __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_5 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
          PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_2);
        } else
        #endif
        {
          __pyx_t_6 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          if (__pyx_t_4) {
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
          }
          __Pyx_INCREF(__pyx_v_xs);
          __Pyx_GIVEREF(__pyx_v_xs);
          PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_xs);
          __Pyx_INCREF(__pyx_v_ys);
          __Pyx_GIVEREF(__pyx_v_ys);
          PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_ys);
          __Pyx_INCREF(__pyx_v_zs);
          __Pyx_GIVEREF(__pyx_v_zs);
          PyTuple_SET_ITEM(__pyx_t_6, 2+__pyx_t_5, __pyx_v_zs);
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(0, 104, __pyx_L1_error)
        __pyx_r = ((PyObject*)__pyx_t_2);
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":105
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 *     cpdef list starting_points(self, xs, ys, zs):
 *         return [(bisect.bisect_left(xs, self.px), bisect.bisect_left(ys, self.py), bisect.bisect_left(zs, self.pz))]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_bisect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->px); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_xs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_xs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_5, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_ys, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_ys, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_5, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_bisect); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->pz); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_zs, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_v_zs, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":104
 *     cpdef double distance(self, double x, double y, double z):
 *         return (self.nx * x + self.ny * y + self.nz * z + self.d) * self.mul
 *     cpdef list starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         return [(bisect.bisect_left(xs, self.px), bisect.bisect_left(ys, self.py), bisect.bisect_left(zs, self.pz))]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 104, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 104, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 104, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 104, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_6starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_starting_points(__pyx_v_self, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_8__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_8__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.d, self.mul, self.nx, self.ny, self.nz, self.px, self.py, self.pz)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->d); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->mul); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->nx); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->ny); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->nz); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->px); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->py); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->pz); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.d, self.mul, self.nx, self.ny, self.nz, self.px, self.py, self.pz)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_9 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_v__dict = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "(tree fragment)":7
 *     state = (self.d, self.mul, self.nx, self.ny, self.nz, self.px, self.py, self.pz)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_10 = (__pyx_v__dict != Py_None);
  __pyx_t_11 = (__pyx_t_10 != 0);
  if (__pyx_t_11) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v__dict);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.d, self.mul, self.nx, self.ny, self.nz, self.px, self.py, self.pz)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, None), state
 *     else:
 */
  __pyx_t_11 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_11) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_pyx_unpickle_Plane); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_159808084);
    __Pyx_GIVEREF(__pyx_int_159808084);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_159808084);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_9, 2, Py_None);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_state);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, None), state
 *     else:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Plane__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pyx_unpickle_Plane); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_159808084);
    __Pyx_GIVEREF(__pyx_int_159808084);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_int_159808084);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_state);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
    __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Plane__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Plane__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Plane__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Plane, (type(self), 0x9867a54, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Plane__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Plane.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":113
 *     cdef list clips
 *     property primitives:
 *         def __get__(self): return [self]             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x, double y, double z, double r):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":115
 *         def __get__(self): return [self]
 * 
 *     def __init__(self, double x, double y, double z, double r):             # <<<<<<<<<<<<<<
 *         self._x, self._y, self._z, self._r = x, y, z, r
 *         self._xlo, self._xhi = x - r, x + r
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,&__pyx_n_s_r,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 1); __PYX_ERR(0, 115, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 2); __PYX_ERR(0, 115, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, 3); __PYX_ERR(0, 115, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 115, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 115, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere___init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere___init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, double __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":116
 * 
 *     def __init__(self, double x, double y, double z, double r):
 *         self._x, self._y, self._z, self._r = x, y, z, r             # <<<<<<<<<<<<<<
 *         self._xlo, self._xhi = x - r, x + r
 *         self._ylo, self._yhi = y - r, y + r
 */
  __pyx_t_1 = __pyx_v_x;
  __pyx_t_2 = __pyx_v_y;
  __pyx_t_3 = __pyx_v_z;
  __pyx_t_4 = __pyx_v_r;
  __pyx_v_self->_x = __pyx_t_1;
  __pyx_v_self->_y = __pyx_t_2;
  __pyx_v_self->_z = __pyx_t_3;
  __pyx_v_self->_r = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":117
 *     def __init__(self, double x, double y, double z, double r):
 *         self._x, self._y, self._z, self._r = x, y, z, r
 *         self._xlo, self._xhi = x - r, x + r             # <<<<<<<<<<<<<<
 *         self._ylo, self._yhi = y - r, y + r
 *         self._zlo, self._zhi = z - r, z + r
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_x - __pyx_v_r)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_x + __pyx_v_r)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_xlo);
  __Pyx_DECREF(__pyx_v_self->_xlo);
  __pyx_v_self->_xlo = __pyx_t_5;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_xhi);
  __Pyx_DECREF(__pyx_v_self->_xhi);
  __pyx_v_self->_xhi = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":118
 *         self._x, self._y, self._z, self._r = x, y, z, r
 *         self._xlo, self._xhi = x - r, x + r
 *         self._ylo, self._yhi = y - r, y + r             # <<<<<<<<<<<<<<
 *         self._zlo, self._zhi = z - r, z + r
 *         self.clips = []
 */
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_y - __pyx_v_r)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_y + __pyx_v_r)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_ylo);
  __Pyx_DECREF(__pyx_v_self->_ylo);
  __pyx_v_self->_ylo = __pyx_t_6;
  __pyx_t_6 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_yhi);
  __Pyx_DECREF(__pyx_v_self->_yhi);
  __pyx_v_self->_yhi = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":119
 *         self._xlo, self._xhi = x - r, x + r
 *         self._ylo, self._yhi = y - r, y + r
 *         self._zlo, self._zhi = z - r, z + r             # <<<<<<<<<<<<<<
 *         self.clips = []
 *     def __repr__(self):
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_z - __pyx_v_r)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_z + __pyx_v_r)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_zlo);
  __Pyx_DECREF(__pyx_v_self->_zlo);
  __pyx_v_self->_zlo = __pyx_t_5;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_zhi);
  __Pyx_DECREF(__pyx_v_self->_zhi);
  __pyx_v_self->_zhi = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":120
 *         self._ylo, self._yhi = y - r, y + r
 *         self._zlo, self._zhi = z - r, z + r
 *         self.clips = []             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         if self.clips:
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":115
 *         def __get__(self): return [self]
 * 
 *     def __init__(self, double x, double y, double z, double r):             # <<<<<<<<<<<<<<
 *         self._x, self._y, self._z, self._r = x, y, z, r
 *         self._xlo, self._xhi = x - r, x + r
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":121
 *         self._zlo, self._zhi = z - r, z + r
 *         self.clips = []
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.clips:
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_2__repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_2__repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":122
 *         self.clips = []
 *     def __repr__(self):
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->clips != Py_None)&&(PyList_GET_SIZE(__pyx_v_self->clips) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":123
 *     def __repr__(self):
 *         if self.clips:
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)             # <<<<<<<<<<<<<<
 *         else:
 *             return 'Sphere(%g, %g, %g, %g)' % (self._x, self._y, self._z, self._r)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_r); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_self->clips);
    __Pyx_GIVEREF(__pyx_v_self->clips);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_self->clips);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Sphere_g_g_g_g_clips_r, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":122
 *         self.clips = []
 *     def __repr__(self):
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)
 *         else:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":125
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)
 *         else:
 *             return 'Sphere(%g, %g, %g, %g)' % (self._x, self._y, self._z, self._r)             # <<<<<<<<<<<<<<
 *     property x:
 *         def __get__(self): return self._x
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_r); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Sphere_g_g_g_g, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":121
 *         self._zlo, self._zhi = z - r, z + r
 *         self.clips = []
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.clips:
 *             return 'Sphere(%g, %g, %g, %g; clips=%r)' % (self._x, self._y, self._z, self._r, self.clips)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":127
 *             return 'Sphere(%g, %g, %g, %g)' % (self._x, self._y, self._z, self._r)
 *     property x:
 *         def __get__(self): return self._x             # <<<<<<<<<<<<<<
 *     property y:
 *         def __get__(self): return self._y
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.x.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":129
 *         def __get__(self): return self._x
 *     property y:
 *         def __get__(self): return self._y             # <<<<<<<<<<<<<<
 *     property z:
 *         def __get__(self): return self._z
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.y.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":131
 *         def __get__(self): return self._y
 *     property z:
 *         def __get__(self): return self._z             # <<<<<<<<<<<<<<
 *     property r:
 *         def __get__(self): return self._r
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.z.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":133
 *         def __get__(self): return self._z
 *     property r:
 *         def __get__(self): return self._r             # <<<<<<<<<<<<<<
 *     property xlo:
 *         def __get__(self): return self._xlo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.r.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":135
 *         def __get__(self): return self._r
 *     property xlo:
 *         def __get__(self): return self._xlo             # <<<<<<<<<<<<<<
 *     property xhi:
 *         def __get__(self): return self._xhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_xlo);
  __pyx_r = __pyx_v_self->_xlo;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":137
 *         def __get__(self): return self._xlo
 *     property xhi:
 *         def __get__(self): return self._xhi             # <<<<<<<<<<<<<<
 *     property ylo:
 *         def __get__(self): return self._ylo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_xhi);
  __pyx_r = __pyx_v_self->_xhi;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":139
 *         def __get__(self): return self._xhi
 *     property ylo:
 *         def __get__(self): return self._ylo             # <<<<<<<<<<<<<<
 *     property yhi:
 *         def __get__(self): return self._yhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_ylo);
  __pyx_r = __pyx_v_self->_ylo;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":141
 *         def __get__(self): return self._ylo
 *     property yhi:
 *         def __get__(self): return self._yhi             # <<<<<<<<<<<<<<
 *     property zlo:
 *         def __get__(self): return self._zlo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_yhi);
  __pyx_r = __pyx_v_self->_yhi;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":143
 *         def __get__(self): return self._yhi
 *     property zlo:
 *         def __get__(self): return self._zlo             # <<<<<<<<<<<<<<
 *     property zhi:
 *         def __get__(self): return self._zhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_zlo);
  __pyx_r = __pyx_v_self->_zlo;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":145
 *         def __get__(self): return self._zlo
 *     property zhi:
 *         def __get__(self): return self._zhi             # <<<<<<<<<<<<<<
 *     cpdef double distance(self, double x, double y, double z):
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_zhi);
  __pyx_r = __pyx_v_self->_zhi;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":146
 *     property zhi:
 *         def __get__(self): return self._zhi
 *     cpdef double distance(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 *         for clip in self.clips:
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_clip = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_5distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 146, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":147
 *         def __get__(self): return self._zhi
 *     cpdef double distance(self, double x, double y, double z):
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r             # <<<<<<<<<<<<<<
 *         for clip in self.clips:
 *             d = max(d, clip.distance(x, y, z))
 */
  __pyx_t_1 = PyFloat_FromDouble((sqrt(((pow((__pyx_v_x - __pyx_v_self->_x), 2.0) + pow((__pyx_v_y - __pyx_v_self->_y), 2.0)) + pow((__pyx_v_z - __pyx_v_self->_z), 2.0))) - __pyx_v_self->_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_d = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":148
 *     cpdef double distance(self, double x, double y, double z):
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(x, y, z))
 *         return d
 */
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 148, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_1); __pyx_t_11 = 0;
  for (;;) {
    if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_11); __Pyx_INCREF(__pyx_t_2); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 148, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_clip, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":149
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 *         for clip in self.clips:
 *             d = max(d, clip.distance(x, y, z))             # <<<<<<<<<<<<<<
 *         return d
 *     def starting_points(self, xs, ys, zs):
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_clip, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_4);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_v_d);
    __pyx_t_6 = __pyx_v_d;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_12) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_7 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_d, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":148
 *     cpdef double distance(self, double x, double y, double z):
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(x, y, z))
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":150
 *         for clip in self.clips:
 *             d = max(d, clip.distance(x, y, z))
 *         return d             # <<<<<<<<<<<<<<
 *     def starting_points(self, xs, ys, zs):
 *         #for theta in numpy.arange(0, 2 * numpy.pi, 10):
 */
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_v_d); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_r = __pyx_t_10;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":146
 *     property zhi:
 *         def __get__(self): return self._zhi
 *     cpdef double distance(self, double x, double y, double z):             # <<<<<<<<<<<<<<
 *         d = sqrt((x - self._x) ** 2 + (y - self._y) ** 2 + (z - self._z) ** 2) - self._r
 *         for clip in self.clips:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_clip);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_5distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 146, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 146, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 146, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_x = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_y = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
    __pyx_v_z = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 146, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_4distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_4distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_x, double __pyx_v_y, double __pyx_v_z) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_distance(__pyx_v_self, __pyx_v_x, __pyx_v_y, __pyx_v_z, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":151
 *             d = max(d, clip.distance(x, y, z))
 *         return d
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         #for theta in numpy.arange(0, 2 * numpy.pi, 10):
 *         # TODO: this only works right if the entire object is inside the domain
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_7starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 151, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 151, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 151, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 151, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_6starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_6starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":154
 *         #for theta in numpy.arange(0, 2 * numpy.pi, 10):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self._x - self._r), bisect.bisect_left(ys, self._y), bisect.bisect_left(zs, self._z))])             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 154, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 154, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_zs);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->_x - __pyx_v_self->_r)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bisect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":151
 *             d = max(d, clip.distance(x, y, z))
 *         return d
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         #for theta in numpy.arange(0, 2 * numpy.pi, 10):
 *         # TODO: this only works right if the entire object is inside the domain
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":155
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self._x - self._r), bisect.bisect_left(ys, self._y), bisect.bisect_left(zs, self._z))])
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_9overlaps_x)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":156
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self._x - self._r), bisect.bisect_left(ys, self._y), bisect.bisect_left(zs, self._z))])
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_xhi, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_self->_xlo, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":155
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self._x - self._r), bisect.bisect_left(ys, self._y), bisect.bisect_left(zs, self._z))])
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, 1); __PYX_ERR(0, 155, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_x") < 0)) __PYX_ERR(0, 155, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 155, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 155, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_8overlaps_x(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_8overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_x(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":157
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_11overlaps_y)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 157, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 157, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":158
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_yhi, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_self->_ylo, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":157
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, 1); __PYX_ERR(0, 157, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_y") < 0)) __PYX_ERR(0, 157, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 157, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 157, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10overlaps_y(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_y(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":159
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 *     def set_clip(self, clips):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_13overlaps_z)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":160
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo             # <<<<<<<<<<<<<<
 *     def set_clip(self, clips):
 *         self.clips = clips
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_zhi, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_v_self->_zlo, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":159
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 *     def set_clip(self, clips):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_z (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, 1); __PYX_ERR(0, 159, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_z") < 0)) __PYX_ERR(0, 159, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 159, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_12overlaps_z(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_12overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_z(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":161
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_15set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_15set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_14set_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), ((PyObject *)__pyx_v_clips));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_14set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":162
 *         return lo <= self._zhi and hi >= self._zlo
 *     def set_clip(self, clips):
 *         self.clips = clips             # <<<<<<<<<<<<<<
 *     def get_clip(self):
 *         return self.clips
 */
  if (!(likely(PyList_CheckExact(__pyx_v_clips))||((__pyx_v_clips) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_clips)->tp_name), 0))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_clips;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":161
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.set_clip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":163
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_17get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_17get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_16get_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_16get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":164
 *         self.clips = clips
 *     def get_clip(self):
 *         return self.clips             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->clips);
  __pyx_r = __pyx_v_self->clips;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":163
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_18__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_18__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._r, self._x, self._xhi, self._xlo, self._y, self._yhi, self._ylo, self._z, self._zhi, self._zlo, self.clips)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_r); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_x); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_self->_xhi);
  __Pyx_GIVEREF(__pyx_v_self->_xhi);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_self->_xhi);
  __Pyx_INCREF(__pyx_v_self->_xlo);
  __Pyx_GIVEREF(__pyx_v_self->_xlo);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_self->_xlo);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->_yhi);
  __Pyx_GIVEREF(__pyx_v_self->_yhi);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_v_self->_yhi);
  __Pyx_INCREF(__pyx_v_self->_ylo);
  __Pyx_GIVEREF(__pyx_v_self->_ylo);
  PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_v_self->_ylo);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 7, __pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_zhi);
  __Pyx_GIVEREF(__pyx_v_self->_zhi);
  PyTuple_SET_ITEM(__pyx_t_5, 8, __pyx_v_self->_zhi);
  __Pyx_INCREF(__pyx_v_self->_zlo);
  __Pyx_GIVEREF(__pyx_v_self->_zlo);
  PyTuple_SET_ITEM(__pyx_t_5, 9, __pyx_v_self->_zlo);
  __Pyx_INCREF(__pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_v_self->clips);
  PyTuple_SET_ITEM(__pyx_t_5, 10, __pyx_v_self->clips);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._r, self._x, self._xhi, self._xlo, self._y, self._yhi, self._ylo, self._z, self._zhi, self._zlo, self.clips)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_5 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v__dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "(tree fragment)":7
 *     state = (self._r, self._x, self._xhi, self._xlo, self._y, self._yhi, self._ylo, self._z, self._zhi, self._zlo, self.clips)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_6 = (__pyx_v__dict != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._xhi is not None or self._xlo is not None or self._yhi is not None or self._ylo is not None or self._zhi is not None or self._zlo is not None or self.clips is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._r, self._x, self._xhi, self._xlo, self._y, self._yhi, self._ylo, self._z, self._zhi, self._zlo, self.clips)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._xhi is not None or self._xlo is not None or self._yhi is not None or self._ylo is not None or self._zhi is not None or self._zlo is not None or self.clips is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, None), state
 */
  /*else*/ {
    __pyx_t_6 = (__pyx_v_self->_xhi != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_xlo != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->_yhi != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_ylo != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->_zhi != Py_None);
    __pyx_t_8 = (__pyx_t_6 != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_self->_zlo != Py_None);
    __pyx_t_6 = (__pyx_t_8 != 0);
    if (!__pyx_t_6) {
    } else {
      __pyx_t_7 = __pyx_t_6;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_6 = (__pyx_v_self->clips != ((PyObject*)Py_None));
    __pyx_t_8 = (__pyx_t_6 != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_7;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._xhi is not None or self._xlo is not None or self._yhi is not None or self._ylo is not None or self._zhi is not None or self._zlo is not None or self.clips is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, None), state
 *     else:
 */
  __pyx_t_7 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_7) {

    /* "(tree fragment)":13
 *         use_setstate = self._xhi is not None or self._xlo is not None or self._yhi is not None or self._ylo is not None or self._zhi is not None or self._zlo is not None or self.clips is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Sphere); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_39271848);
    __Pyx_GIVEREF(__pyx_int_39271848);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_39271848);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_5, 2, Py_None);
    __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._xhi is not None or self._xlo is not None or self._yhi is not None or self._ylo is not None or self._zhi is not None or self._zlo is not None or self.clips is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, None), state
 *     else:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Sphere__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Sphere); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_39271848);
    __Pyx_GIVEREF(__pyx_int_39271848);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_39271848);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Sphere__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_20__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_20__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Sphere__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Sphere__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Sphere, (type(self), 0x2573da8, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Sphere__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Sphere.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":172
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 *     cdef list neighbors, clips, neighbor_regions
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.clips:
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder___repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":173
 *     cdef list neighbors, clips, neighbor_regions
 *     def __repr__(self):
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->clips != Py_None)&&(PyList_GET_SIZE(__pyx_v_self->clips) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":174
 *     def __repr__(self):
 *         if self.clips:
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)             # <<<<<<<<<<<<<<
 *         else:
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_8);
    __Pyx_INCREF(__pyx_v_self->clips);
    __Pyx_GIVEREF(__pyx_v_self->clips);
    PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_v_self->clips);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_Cylinder_g_g_g_g_g_g_g_clips_r, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":173
 *     cdef list neighbors, clips, neighbor_regions
 *     def __repr__(self):
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)
 *         else:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":176
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)
 *         else:
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r)             # <<<<<<<<<<<<<<
 *     property xlo:
 *         def __get__(self): return self._xlo
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_t_3);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Cylinder_g_g_g_g_g_g_g, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":172
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi
 *     cdef list neighbors, clips, neighbor_regions
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.clips:
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g; clips=%r)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r, self.clips)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":178
 *             return 'Cylinder(%g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.x1, self.y1, self.z1, self.r)
 *     property xlo:
 *         def __get__(self): return self._xlo             # <<<<<<<<<<<<<<
 *     property xhi:
 *         def __get__(self): return self._xhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.xlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":180
 *         def __get__(self): return self._xlo
 *     property xhi:
 *         def __get__(self): return self._xhi             # <<<<<<<<<<<<<<
 *     property ylo:
 *         def __get__(self): return self._ylo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.xhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":182
 *         def __get__(self): return self._xhi
 *     property ylo:
 *         def __get__(self): return self._ylo             # <<<<<<<<<<<<<<
 *     property yhi:
 *         def __get__(self): return self._yhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.ylo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":184
 *         def __get__(self): return self._ylo
 *     property yhi:
 *         def __get__(self): return self._yhi             # <<<<<<<<<<<<<<
 *     property zlo:
 *         def __get__(self): return self._zlo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.yhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":186
 *         def __get__(self): return self._yhi
 *     property zlo:
 *         def __get__(self): return self._zlo             # <<<<<<<<<<<<<<
 *     property zhi:
 *         def __get__(self): return self._zhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.zlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":188
 *         def __get__(self): return self._zlo
 *     property zhi:
 *         def __get__(self): return self._zhi             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double x0, double y0, double z0, double x1, double y1, double z1, double r):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.zhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":190
 *         def __get__(self): return self._zhi
 * 
 *     def __init__(self, double x0, double y0, double z0, double x1, double y1, double z1, double r):             # <<<<<<<<<<<<<<
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_z1,&__pyx_n_s_r,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 1); __PYX_ERR(0, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 2); __PYX_ERR(0, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 3); __PYX_ERR(0, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 4); __PYX_ERR(0, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 5); __PYX_ERR(0, 190, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, 6); __PYX_ERR(0, 190, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_z1 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_z1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 190, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 190, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_2__init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":191
 * 
 *     def __init__(self, double x0, double y0, double z0, double x1, double y1, double z1, double r):
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5             # <<<<<<<<<<<<<<
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1
 *         self.rr = r * r
 */
  __pyx_t_1 = ((__pyx_v_x0 + __pyx_v_x1) * 0.5);
  __pyx_t_2 = ((__pyx_v_y0 + __pyx_v_y1) * 0.5);
  __pyx_t_3 = ((__pyx_v_z0 + __pyx_v_z1) * 0.5);
  __pyx_v_self->cx = __pyx_t_1;
  __pyx_v_self->cy = __pyx_t_2;
  __pyx_v_self->cz = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":192
 *     def __init__(self, double x0, double y0, double z0, double x1, double y1, double z1, double r):
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1             # <<<<<<<<<<<<<<
 *         self.rr = r * r
 *         self.r = r
 */
  __pyx_t_3 = __pyx_v_x0;
  __pyx_t_2 = __pyx_v_y0;
  __pyx_t_1 = __pyx_v_z0;
  __pyx_t_4 = __pyx_v_x1;
  __pyx_t_5 = __pyx_v_y1;
  __pyx_t_6 = __pyx_v_z1;
  __pyx_v_self->x0 = __pyx_t_3;
  __pyx_v_self->y0 = __pyx_t_2;
  __pyx_v_self->z0 = __pyx_t_1;
  __pyx_v_self->x1 = __pyx_t_4;
  __pyx_v_self->y1 = __pyx_t_5;
  __pyx_v_self->z1 = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":193
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1
 *         self.rr = r * r             # <<<<<<<<<<<<<<
 *         self.r = r
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 */
  __pyx_v_self->rr = (__pyx_v_r * __pyx_v_r);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":194
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1
 *         self.rr = r * r
 *         self.r = r             # <<<<<<<<<<<<<<
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 */
  __pyx_v_self->r = __pyx_v_r;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":195
 *         self.rr = r * r
 *         self.r = r
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)             # <<<<<<<<<<<<<<
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 */
  __pyx_t_6 = (__pyx_v_x1 - __pyx_v_x0);
  __pyx_t_5 = (__pyx_v_y1 - __pyx_v_y0);
  __pyx_t_4 = (__pyx_v_z1 - __pyx_v_z0);
  __pyx_v_self->axisx = __pyx_t_6;
  __pyx_v_self->axisy = __pyx_t_5;
  __pyx_v_self->axisz = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":196
 *         self.r = r
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)             # <<<<<<<<<<<<<<
 *         # normalize the axis
 *         self.axisx /= self.length
 */
  __pyx_v_self->length = sqrt(((pow(__pyx_v_self->axisx, 2.0) + pow(__pyx_v_self->axisy, 2.0)) + pow(__pyx_v_self->axisz, 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":198
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 *         self.axisx /= self.length             # <<<<<<<<<<<<<<
 *         self.axisy /= self.length
 *         self.axisz /= self.length
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 198, __pyx_L1_error)
  }
  __pyx_v_self->axisx = (__pyx_v_self->axisx / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":199
 *         # normalize the axis
 *         self.axisx /= self.length
 *         self.axisy /= self.length             # <<<<<<<<<<<<<<
 *         self.axisz /= self.length
 * 
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 199, __pyx_L1_error)
  }
  __pyx_v_self->axisy = (__pyx_v_self->axisy / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":200
 *         self.axisx /= self.length
 *         self.axisy /= self.length
 *         self.axisz /= self.length             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 200, __pyx_L1_error)
  }
  __pyx_v_self->axisz = (__pyx_v_self->axisz / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":203
 * 
 * 
 *         self.h = self.length * 0.5             # <<<<<<<<<<<<<<
 * 
 *         self._xlo = min(x0 - r, x1 - r)
 */
  __pyx_v_self->h = (__pyx_v_self->length * 0.5);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":205
 *         self.h = self.length * 0.5
 * 
 *         self._xlo = min(x0 - r, x1 - r)             # <<<<<<<<<<<<<<
 *         self._xhi = max(x0 + r, x1 + r)
 *         self._ylo = min(y0 - r, y1 - r)
 */
  __pyx_t_4 = (__pyx_v_x1 - __pyx_v_r);
  __pyx_t_5 = (__pyx_v_x0 - __pyx_v_r);
  if (((__pyx_t_4 < __pyx_t_5) != 0)) {
    __pyx_t_6 = __pyx_t_4;
  } else {
    __pyx_t_6 = __pyx_t_5;
  }
  __pyx_v_self->_xlo = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":206
 * 
 *         self._xlo = min(x0 - r, x1 - r)
 *         self._xhi = max(x0 + r, x1 + r)             # <<<<<<<<<<<<<<
 *         self._ylo = min(y0 - r, y1 - r)
 *         self._yhi = max(y0 + r, y1 + r)
 */
  __pyx_t_6 = (__pyx_v_x1 + __pyx_v_r);
  __pyx_t_4 = (__pyx_v_x0 + __pyx_v_r);
  if (((__pyx_t_6 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_self->_xhi = __pyx_t_5;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":207
 *         self._xlo = min(x0 - r, x1 - r)
 *         self._xhi = max(x0 + r, x1 + r)
 *         self._ylo = min(y0 - r, y1 - r)             # <<<<<<<<<<<<<<
 *         self._yhi = max(y0 + r, y1 + r)
 *         self._zlo = min(z0 - r, z1 - r)
 */
  __pyx_t_5 = (__pyx_v_y1 - __pyx_v_r);
  __pyx_t_6 = (__pyx_v_y0 - __pyx_v_r);
  if (((__pyx_t_5 < __pyx_t_6) != 0)) {
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_6;
  }
  __pyx_v_self->_ylo = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":208
 *         self._xhi = max(x0 + r, x1 + r)
 *         self._ylo = min(y0 - r, y1 - r)
 *         self._yhi = max(y0 + r, y1 + r)             # <<<<<<<<<<<<<<
 *         self._zlo = min(z0 - r, z1 - r)
 *         self._zhi = max(z0 + r, z1 + r)
 */
  __pyx_t_4 = (__pyx_v_y1 + __pyx_v_r);
  __pyx_t_5 = (__pyx_v_y0 + __pyx_v_r);
  if (((__pyx_t_4 > __pyx_t_5) != 0)) {
    __pyx_t_6 = __pyx_t_4;
  } else {
    __pyx_t_6 = __pyx_t_5;
  }
  __pyx_v_self->_yhi = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":209
 *         self._ylo = min(y0 - r, y1 - r)
 *         self._yhi = max(y0 + r, y1 + r)
 *         self._zlo = min(z0 - r, z1 - r)             # <<<<<<<<<<<<<<
 *         self._zhi = max(z0 + r, z1 + r)
 *         self.neighbors = []
 */
  __pyx_t_6 = (__pyx_v_z1 - __pyx_v_r);
  __pyx_t_4 = (__pyx_v_z0 - __pyx_v_r);
  if (((__pyx_t_6 < __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_self->_zlo = __pyx_t_5;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":210
 *         self._yhi = max(y0 + r, y1 + r)
 *         self._zlo = min(z0 - r, z1 - r)
 *         self._zhi = max(z0 + r, z1 + r)             # <<<<<<<<<<<<<<
 *         self.neighbors = []
 *         self.clips = []
 */
  __pyx_t_5 = (__pyx_v_z1 + __pyx_v_r);
  __pyx_t_6 = (__pyx_v_z0 + __pyx_v_r);
  if (((__pyx_t_5 > __pyx_t_6) != 0)) {
    __pyx_t_4 = __pyx_t_5;
  } else {
    __pyx_t_4 = __pyx_t_6;
  }
  __pyx_v_self->_zhi = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":211
 *         self._zlo = min(z0 - r, z1 - r)
 *         self._zhi = max(z0 + r, z1 + r)
 *         self.neighbors = []             # <<<<<<<<<<<<<<
 *         self.clips = []
 *         self.neighbor_regions = []
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->neighbors);
  __Pyx_DECREF(__pyx_v_self->neighbors);
  __pyx_v_self->neighbors = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":212
 *         self._zhi = max(z0 + r, z1 + r)
 *         self.neighbors = []
 *         self.clips = []             # <<<<<<<<<<<<<<
 *         self.neighbor_regions = []
 * 
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":213
 *         self.neighbors = []
 *         self.clips = []
 *         self.neighbor_regions = []             # <<<<<<<<<<<<<<
 * 
 *     property axislength:
 */
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __Pyx_GOTREF(__pyx_v_self->neighbor_regions);
  __Pyx_DECREF(__pyx_v_self->neighbor_regions);
  __pyx_v_self->neighbor_regions = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":190
 *         def __get__(self): return self._zhi
 * 
 *     def __init__(self, double x0, double y0, double z0, double x1, double y1, double z1, double r):             # <<<<<<<<<<<<<<
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.x0, self.y0, self.z0, self.x1, self.y1, self.z1 = x0, y0, z0, x1, y1, z1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":216
 * 
 *     property axislength:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.length
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":217
 *     property axislength:
 *         def __get__(self):
 *             return self.length             # <<<<<<<<<<<<<<
 * 
 *     property _x0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":216
 * 
 *     property axislength:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.length
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.axislength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":220
 * 
 *     property _x0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":221
 *     property _x0:
 *         def __get__(self):
 *             return self.x0             # <<<<<<<<<<<<<<
 * 
 *     property _y0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":220
 * 
 *     property _x0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._x0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":224
 * 
 *     property _y0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y0
 *     property _z0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":225
 *     property _y0:
 *         def __get__(self):
 *             return self.y0             # <<<<<<<<<<<<<<
 *     property _z0:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":224
 * 
 *     property _y0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y0
 *     property _z0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._y0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":227
 *             return self.y0
 *     property _z0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z0
 *     property _r0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":228
 *     property _z0:
 *         def __get__(self):
 *             return self.z0             # <<<<<<<<<<<<<<
 *     property _r0:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":227
 *             return self.y0
 *     property _z0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z0
 *     property _r0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._z0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":230
 *             return self.z0
 *     property _r0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":231
 *     property _r0:
 *         def __get__(self):
 *             return self.r             # <<<<<<<<<<<<<<
 * 
 *     property _x1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":230
 *             return self.z0
 *     property _r0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._r0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":234
 * 
 *     property _x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":235
 *     property _x1:
 *         def __get__(self):
 *             return self.x1             # <<<<<<<<<<<<<<
 * 
 *     property _y1:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":234
 * 
 *     property _x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._x1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":238
 * 
 *     property _y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1
 *     property _z1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":239
 *     property _y1:
 *         def __get__(self):
 *             return self.y1             # <<<<<<<<<<<<<<
 *     property _z1:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":238
 * 
 *     property _y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1
 *     property _z1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._y1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":241
 *             return self.y1
 *     property _z1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z1
 *     property _r1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":242
 *     property _z1:
 *         def __get__(self):
 *             return self.z1             # <<<<<<<<<<<<<<
 *     property _r1:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":241
 *             return self.y1
 *     property _z1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z1
 *     property _r1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._z1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":244
 *             return self.z1
 *     property _r1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r
 *     property primitives:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":245
 *     property _r1:
 *         def __get__(self):
 *             return self.r             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return [self]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":244
 *             return self.z1
 *     property _r1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r
 *     property primitives:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder._r1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":247
 *             return self.r
 *     property primitives:
 *         def __get__(self): return [self]             # <<<<<<<<<<<<<<
 * 
 *     def get_clip(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":249
 *         def __get__(self): return [self]
 * 
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_5get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_5get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_4get_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_4get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":250
 * 
 *     def get_clip(self):
 *         return self.clips             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->clips);
  __pyx_r = __pyx_v_self->clips;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":249
 *         def __get__(self): return [self]
 * 
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":253
 * 
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_7set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_7set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_6set_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), ((PyObject *)__pyx_v_clips));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_6set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":254
 * 
 *     def set_clip(self, clips):
 *         self.clips = clips             # <<<<<<<<<<<<<<
 * 
 *     def axis(self):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_clips))||((__pyx_v_clips) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_clips)->tp_name), 0))) __PYX_ERR(0, 254, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_clips;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":253
 * 
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.set_clip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":256
 *         self.clips = clips
 * 
 *     def axis(self):             # <<<<<<<<<<<<<<
 *         return (self.axisx, self.axisy, self.axisz)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_9axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_9axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("axis (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_8axis(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_8axis(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("axis", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":257
 * 
 *     def axis(self):
 *         return (self.axisx, self.axisy, self.axisz)             # <<<<<<<<<<<<<<
 * 
 *     def set_neighbors(self, neighbors, neighbor_regions):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":256
 *         self.clips = clips
 * 
 *     def axis(self):             # <<<<<<<<<<<<<<
 *         return (self.axisx, self.axisy, self.axisz)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.axis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":259
 *         return (self.axisx, self.axisy, self.axisz)
 * 
 *     def set_neighbors(self, neighbors, neighbor_regions):             # <<<<<<<<<<<<<<
 *         self.neighbors = neighbors
 *         self.neighbor_regions = neighbor_regions
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_11set_neighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_11set_neighbors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_neighbors = 0;
  PyObject *__pyx_v_neighbor_regions = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_neighbors (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_neighbors,&__pyx_n_s_neighbor_regions,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neighbors)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_neighbor_regions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_neighbors", 1, 2, 2, 1); __PYX_ERR(0, 259, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_neighbors") < 0)) __PYX_ERR(0, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_neighbors = values[0];
    __pyx_v_neighbor_regions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_neighbors", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.set_neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10set_neighbors(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_neighbors, __pyx_v_neighbor_regions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10set_neighbors(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_neighbors, PyObject *__pyx_v_neighbor_regions) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_neighbors", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":260
 * 
 *     def set_neighbors(self, neighbors, neighbor_regions):
 *         self.neighbors = neighbors             # <<<<<<<<<<<<<<
 *         self.neighbor_regions = neighbor_regions
 * 
 */
  if (!(likely(PyList_CheckExact(__pyx_v_neighbors))||((__pyx_v_neighbors) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_neighbors)->tp_name), 0))) __PYX_ERR(0, 260, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_neighbors;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->neighbors);
  __Pyx_DECREF(__pyx_v_self->neighbors);
  __pyx_v_self->neighbors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":261
 *     def set_neighbors(self, neighbors, neighbor_regions):
 *         self.neighbors = neighbors
 *         self.neighbor_regions = neighbor_regions             # <<<<<<<<<<<<<<
 * 
 *     cpdef within_core(self, double px, double py, double pz):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_neighbor_regions))||((__pyx_v_neighbor_regions) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_neighbor_regions)->tp_name), 0))) __PYX_ERR(0, 261, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_neighbor_regions;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->neighbor_regions);
  __Pyx_DECREF(__pyx_v_self->neighbor_regions);
  __pyx_v_self->neighbor_regions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":259
 *         return (self.axisx, self.axisy, self.axisz)
 * 
 *     def set_neighbors(self, neighbors, neighbor_regions):             # <<<<<<<<<<<<<<
 *         self.neighbors = neighbors
 *         self.neighbor_regions = neighbor_regions
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.set_neighbors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":263
 *         self.neighbor_regions = neighbor_regions
 * 
 *     cpdef within_core(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y, yy, xx
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_13within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("within_core", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_within_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_13within_core)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":265
 *     cpdef within_core(self, double px, double py, double pz):
 *         cdef double nx, ny, nz, y, yy, xx
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz             # <<<<<<<<<<<<<<
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         return y < self.h
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->cx);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->cy);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->cz);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":266
 *         cdef double nx, ny, nz, y, yy, xx
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)             # <<<<<<<<<<<<<<
 *         return y < self.h
 * 
 */
  __pyx_v_y = fabs((((__pyx_v_self->axisx * __pyx_v_nx) + (__pyx_v_self->axisy * __pyx_v_ny)) + (__pyx_v_self->axisz * __pyx_v_nz)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":267
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         return y < self.h             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_y < __pyx_v_self->h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":263
 *         self.neighbor_regions = neighbor_regions
 * 
 *     cpdef within_core(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y, yy, xx
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_13within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_13within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("within_core (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, 1); __PYX_ERR(0, 263, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, 2); __PYX_ERR(0, 263, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "within_core") < 0)) __PYX_ERR(0, 263, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_12within_core(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_12within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("within_core", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_within_core(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":270
 * 
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_15starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_15starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 270, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 270, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 270, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 270, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_14starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_14starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":272
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],             # <<<<<<<<<<<<<<
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 272, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_zs);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 272, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":273
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),             # <<<<<<<<<<<<<<
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bisect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":274
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_bisect); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_xs, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_xs, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_ys, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_ys, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_bisect); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_zs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_zs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_7, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":273
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),             # <<<<<<<<<<<<<<
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
  __pyx_t_6 = 0;
  __pyx_t_9 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":272
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],             # <<<<<<<<<<<<<<
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":270
 * 
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":277
 * 
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:cyldist
 *         cdef double nx, ny, nz, y, yy, xx, d
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_17distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  double __pyx_v_yy;
  double __pyx_v_xx;
  double __pyx_v_d;
  double __pyx_v_x;
  PyObject *__pyx_v_clip = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_17distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 277, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 277, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":280
 *         # CTNG:cyldist
 *         cdef double nx, ny, nz, y, yy, xx, d
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz             # <<<<<<<<<<<<<<
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         yy = y * y
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->cx);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->cy);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->cz);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":281
 *         cdef double nx, ny, nz, y, yy, xx, d
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)             # <<<<<<<<<<<<<<
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy
 */
  __pyx_v_y = fabs((((__pyx_v_self->axisx * __pyx_v_nx) + (__pyx_v_self->axisy * __pyx_v_ny)) + (__pyx_v_self->axisz * __pyx_v_nz)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":282
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         yy = y * y             # <<<<<<<<<<<<<<
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         if y < self.h:
 */
  __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":283
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy             # <<<<<<<<<<<<<<
 *         if y < self.h:
 *             # this was wrong in my version from 2012-06-28, since did not
 */
  __pyx_v_xx = ((((__pyx_v_nx * __pyx_v_nx) + (__pyx_v_ny * __pyx_v_ny)) + (__pyx_v_nz * __pyx_v_nz)) - __pyx_v_yy);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":284
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         if y < self.h:             # <<<<<<<<<<<<<<
 *             # this was wrong in my version from 2012-06-28, since did not
 *             # handle end-caps being closest
 */
  __pyx_t_13 = ((__pyx_v_y < __pyx_v_self->h) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":287
 *             # this was wrong in my version from 2012-06-28, since did not
 *             # handle end-caps being closest
 *             d = max(y - self.h, sqrt(xx) - self.r)             # <<<<<<<<<<<<<<
 *         else:
 *             y -= self.h
 */
    __pyx_t_12 = (sqrt(__pyx_v_xx) - __pyx_v_self->r);
    __pyx_t_11 = (__pyx_v_y - __pyx_v_self->h);
    if (((__pyx_t_12 > __pyx_t_11) != 0)) {
      __pyx_t_10 = __pyx_t_12;
    } else {
      __pyx_t_10 = __pyx_t_11;
    }
    __pyx_v_d = __pyx_t_10;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":284
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         if y < self.h:             # <<<<<<<<<<<<<<
 *             # this was wrong in my version from 2012-06-28, since did not
 *             # handle end-caps being closest
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":289
 *             d = max(y - self.h, sqrt(xx) - self.r)
 *         else:
 *             y -= self.h             # <<<<<<<<<<<<<<
 *             if xx < self.rr:
 *                 d = y
 */
  /*else*/ {
    __pyx_v_y = (__pyx_v_y - __pyx_v_self->h);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":290
 *         else:
 *             y -= self.h
 *             if xx < self.rr:             # <<<<<<<<<<<<<<
 *                 d = y
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_xx < __pyx_v_self->rr) != 0);
    if (__pyx_t_13) {

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":291
 *             y -= self.h
 *             if xx < self.rr:
 *                 d = y             # <<<<<<<<<<<<<<
 *             else:
 *                 yy = y * y
 */
      __pyx_v_d = __pyx_v_y;

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":290
 *         else:
 *             y -= self.h
 *             if xx < self.rr:             # <<<<<<<<<<<<<<
 *                 d = y
 *             else:
 */
      goto __pyx_L4;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":293
 *                 d = y
 *             else:
 *                 yy = y * y             # <<<<<<<<<<<<<<
 *                 x = sqrt(xx) - self.r
 *                 d = sqrt(yy + x * x)
 */
    /*else*/ {
      __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":294
 *             else:
 *                 yy = y * y
 *                 x = sqrt(xx) - self.r             # <<<<<<<<<<<<<<
 *                 d = sqrt(yy + x * x)
 * 
 */
      __pyx_v_x = (sqrt(__pyx_v_xx) - __pyx_v_self->r);

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":295
 *                 yy = y * y
 *                 x = sqrt(xx) - self.r
 *                 d = sqrt(yy + x * x)             # <<<<<<<<<<<<<<
 * 
 *         for clip in self.clips:
 */
      __pyx_v_d = sqrt((__pyx_v_yy + (__pyx_v_x * __pyx_v_x)));
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":297
 *                 d = sqrt(yy + x * x)
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 297, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_1); __pyx_t_14 = 0;
  for (;;) {
    if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 297, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_clip, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":298
 * 
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_clip, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_4);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __pyx_v_d;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_13) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    } else {
      __pyx_t_4 = PyFloat_FromDouble(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_d = __pyx_t_10;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":297
 *                 d = sqrt(yy + x * x)
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":299
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))
 *         return d             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":277
 * 
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:cyldist
 *         cdef double nx, ny, nz, y, yy, xx, d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_clip);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_17distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_17distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 277, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 277, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 277, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_16distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_16distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":305
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_19overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_19overlaps_x)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 305, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":306
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_xhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_xlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":305
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_19overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_19overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, 1); __PYX_ERR(0, 305, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_x") < 0)) __PYX_ERR(0, 305, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 305, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_18overlaps_x(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_18overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_x(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":307
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_21overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_21overlaps_y)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":308
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_yhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_ylo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":307
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_21overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_21overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, 1); __PYX_ERR(0, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_y") < 0)) __PYX_ERR(0, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 307, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_20overlaps_y(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_20overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_y(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":309
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_23overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_23overlaps_z)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":310
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_zhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_zlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":309
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_23overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_23overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_z (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, 1); __PYX_ERR(0, 309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_z") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_22overlaps_z(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_22overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_z(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_24__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_24__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_t_24;
  int __pyx_t_25;
  int __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r, self.rr, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->cx); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->cy); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->cz); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->h); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_self->r); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->rr); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = PyTuple_New(25); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_23, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_23, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_23, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_23, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_23, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_23, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_23, 8, __pyx_t_9);
  __Pyx_INCREF(__pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_v_self->clips);
  PyTuple_SET_ITEM(__pyx_t_23, 9, __pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_23, 10, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_23, 11, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_23, 12, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_23, 13, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_23, 14, __pyx_t_14);
  __Pyx_INCREF(__pyx_v_self->neighbor_regions);
  __Pyx_GIVEREF(__pyx_v_self->neighbor_regions);
  PyTuple_SET_ITEM(__pyx_t_23, 15, __pyx_v_self->neighbor_regions);
  __Pyx_INCREF(__pyx_v_self->neighbors);
  __Pyx_GIVEREF(__pyx_v_self->neighbors);
  PyTuple_SET_ITEM(__pyx_t_23, 16, __pyx_v_self->neighbors);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_23, 17, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_23, 18, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_23, 19, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_23, 20, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_23, 21, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_23, 22, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_23, 23, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_23, 24, __pyx_t_22);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_23);
  __pyx_t_23 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r, self.rr, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_23 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_v__dict = __pyx_t_23;
  __pyx_t_23 = 0;

  /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r, self.rr, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_24 = (__pyx_v__dict != Py_None);
  __pyx_t_25 = (__pyx_t_24 != 0);
  if (__pyx_t_25) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_23 = PyTuple_New(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_v__dict);
    __pyx_t_22 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_23); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_22));
    __pyx_t_22 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r, self.rr, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, None), state
 */
  /*else*/ {
    __pyx_t_24 = (__pyx_v_self->clips != ((PyObject*)Py_None));
    __pyx_t_26 = (__pyx_t_24 != 0);
    if (!__pyx_t_26) {
    } else {
      __pyx_t_25 = __pyx_t_26;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_26 = (__pyx_v_self->neighbor_regions != ((PyObject*)Py_None));
    __pyx_t_24 = (__pyx_t_26 != 0);
    if (!__pyx_t_24) {
    } else {
      __pyx_t_25 = __pyx_t_24;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_24 = (__pyx_v_self->neighbors != ((PyObject*)Py_None));
    __pyx_t_26 = (__pyx_t_24 != 0);
    __pyx_t_25 = __pyx_t_26;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_25;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, None), state
 *     else:
 */
  __pyx_t_25 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_25) {

    /* "(tree fragment)":13
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_pyx_unpickle_Cylinder); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_23 = PyTuple_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_23, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_691256);
    __Pyx_GIVEREF(__pyx_int_691256);
    PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_int_691256);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_23, 2, Py_None);
    __pyx_t_21 = PyTuple_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_22);
    PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_23);
    PyTuple_SET_ITEM(__pyx_t_21, 1, __pyx_t_23);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_21, 2, __pyx_v_state);
    __pyx_t_22 = 0;
    __pyx_t_23 = 0;
    __pyx_r = __pyx_t_21;
    __pyx_t_21 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, None), state
 *     else:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Cylinder__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_pyx_unpickle_Cylinder); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_23 = PyTuple_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_23, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_691256);
    __Pyx_GIVEREF(__pyx_int_691256);
    PyTuple_SET_ITEM(__pyx_t_23, 1, __pyx_int_691256);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_23, 2, __pyx_v_state);
    __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_21);
    PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21);
    __Pyx_GIVEREF(__pyx_t_23);
    PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_23);
    __pyx_t_21 = 0;
    __pyx_t_23 = 0;
    __pyx_r = __pyx_t_22;
    __pyx_t_22 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Cylinder__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_26__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_26__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Cylinder__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cylinder__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Cylinder, (type(self), 0x00a8c38, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Cylinder__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cylinder.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":319
 *     cdef list clips
 *     property primitives:
 *         def __get__(self): return [self]             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":321
 *         def __get__(self): return [self]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone___repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":322
 * 
 *     def __repr__(self):
 *         return 'SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1)             # <<<<<<<<<<<<<<
 * 
 *     def set_clip(self, clips):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 7, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_SphereCone_g_g_g_g_g_g_g_g, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":321
 *         def __get__(self): return [self]
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return 'SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":324
 *         return 'SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1)
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_3set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_3set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_2set_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), ((PyObject *)__pyx_v_clips));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_2set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":325
 * 
 *     def set_clip(self, clips):
 *         self.clips = clips             # <<<<<<<<<<<<<<
 *     def get_clip(self):
 *         return self.clips
 */
  if (!(likely(PyList_CheckExact(__pyx_v_clips))||((__pyx_v_clips) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_clips)->tp_name), 0))) __PYX_ERR(0, 325, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_clips;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":324
 *         return 'SphereCone(%g, %g, %g, %g, %g, %g, %g, %g)' % (self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1)
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.set_clip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":326
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_5get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_5get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_4get_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_4get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":327
 *         self.clips = clips
 *     def get_clip(self):
 *         return self.clips             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->clips);
  __pyx_r = __pyx_v_self->clips;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":326
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":330
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):             # <<<<<<<<<<<<<<
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_7__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_r0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_r1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_r0,&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_z1,&__pyx_n_s_r1,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 1); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 2); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 3); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 4); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 5); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 6); __PYX_ERR(0, 330, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 7); __PYX_ERR(0, 330, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 330, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_r0 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_r0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_z1 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_z1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
    __pyx_v_r1 = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 330, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 330, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_6__init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_6__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1) {
  double __pyx_v_r0b;
  double __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":331
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 * 
 */
  __pyx_t_1 = ((__pyx_v_r1 > __pyx_v_r0) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":332
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0             # <<<<<<<<<<<<<<
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 */
    __pyx_t_2 = __pyx_v_x1;
    __pyx_t_3 = __pyx_v_y1;
    __pyx_t_4 = __pyx_v_z1;
    __pyx_t_5 = __pyx_v_r1;
    __pyx_t_6 = __pyx_v_x0;
    __pyx_t_7 = __pyx_v_y0;
    __pyx_t_8 = __pyx_v_z0;
    __pyx_t_9 = __pyx_v_r0;
    __pyx_v_x0 = __pyx_t_2;
    __pyx_v_y0 = __pyx_t_3;
    __pyx_v_z0 = __pyx_t_4;
    __pyx_v_r0 = __pyx_t_5;
    __pyx_v_x1 = __pyx_t_6;
    __pyx_v_y1 = __pyx_t_7;
    __pyx_v_z1 = __pyx_t_8;
    __pyx_v_r1 = __pyx_t_9;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":331
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 * 
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":334
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1             # <<<<<<<<<<<<<<
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 */
  __pyx_t_9 = __pyx_v_x0;
  __pyx_t_8 = __pyx_v_y0;
  __pyx_t_7 = __pyx_v_z0;
  __pyx_t_6 = __pyx_v_r0;
  __pyx_t_5 = __pyx_v_x1;
  __pyx_t_4 = __pyx_v_y1;
  __pyx_t_3 = __pyx_v_z1;
  __pyx_t_2 = __pyx_v_r1;
  __pyx_v_self->x0 = __pyx_t_9;
  __pyx_v_self->y0 = __pyx_t_8;
  __pyx_v_self->z0 = __pyx_t_7;
  __pyx_v_self->r0 = __pyx_t_6;
  __pyx_v_self->x1 = __pyx_t_5;
  __pyx_v_self->y1 = __pyx_t_4;
  __pyx_v_self->z1 = __pyx_t_3;
  __pyx_v_self->r1 = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":336
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1             # <<<<<<<<<<<<<<
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 */
  __pyx_t_2 = (__pyx_v_r0 * __pyx_v_r0);
  __pyx_t_3 = (__pyx_v_r1 * __pyx_v_r1);
  __pyx_v_self->rra = __pyx_t_2;
  __pyx_v_self->rrb = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":337
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)             # <<<<<<<<<<<<<<
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 */
  __pyx_t_3 = (__pyx_v_x1 - __pyx_v_x0);
  __pyx_t_2 = (__pyx_v_y1 - __pyx_v_y0);
  __pyx_t_4 = (__pyx_v_z1 - __pyx_v_z0);
  __pyx_v_self->axisx = __pyx_t_3;
  __pyx_v_self->axisy = __pyx_t_2;
  __pyx_v_self->axisz = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":338
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)             # <<<<<<<<<<<<<<
 *         # normalize the axis
 *         self.axisx /= self.length
 */
  __pyx_v_self->length = sqrt(((pow(__pyx_v_self->axisx, 2.0) + pow(__pyx_v_self->axisy, 2.0)) + pow(__pyx_v_self->axisz, 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":340
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 *         self.axisx /= self.length             # <<<<<<<<<<<<<<
 *         self.axisy /= self.length
 *         self.axisz /= self.length
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 340, __pyx_L1_error)
  }
  __pyx_v_self->axisx = (__pyx_v_self->axisx / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":341
 *         # normalize the axis
 *         self.axisx /= self.length
 *         self.axisy /= self.length             # <<<<<<<<<<<<<<
 *         self.axisz /= self.length
 *         """
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __pyx_v_self->axisy = (__pyx_v_self->axisy / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":342
 *         self.axisx /= self.length
 *         self.axisy /= self.length
 *         self.axisz /= self.length             # <<<<<<<<<<<<<<
 *         """
 *         rab = r0 - r1
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 342, __pyx_L1_error)
  }
  __pyx_v_self->axisz = (__pyx_v_self->axisz / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":354
 *         self.conelength = self.length * self.hra / self.r0
 *         """
 *         self.r0 = r0             # <<<<<<<<<<<<<<
 *         self.r1 = r1
 *         self.rrb = r1 * r1
 */
  __pyx_v_self->r0 = __pyx_v_r0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":355
 *         """
 *         self.r0 = r0
 *         self.r1 = r1             # <<<<<<<<<<<<<<
 *         self.rrb = r1 * r1
 *         self.rra = r0 * r0
 */
  __pyx_v_self->r1 = __pyx_v_r1;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":356
 *         self.r0 = r0
 *         self.r1 = r1
 *         self.rrb = r1 * r1             # <<<<<<<<<<<<<<
 *         self.rra = r0 * r0
 *         r0b = r0 - r1
 */
  __pyx_v_self->rrb = (__pyx_v_r1 * __pyx_v_r1);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":357
 *         self.r1 = r1
 *         self.rrb = r1 * r1
 *         self.rra = r0 * r0             # <<<<<<<<<<<<<<
 *         r0b = r0 - r1
 *         s = sqrt(self.length * self.length - r0b * r0b)
 */
  __pyx_v_self->rra = (__pyx_v_r0 * __pyx_v_r0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":358
 *         self.rrb = r1 * r1
 *         self.rra = r0 * r0
 *         r0b = r0 - r1             # <<<<<<<<<<<<<<
 *         s = sqrt(self.length * self.length - r0b * r0b)
 *         self.ha = self.r0 * r0b / self.length
 */
  __pyx_v_r0b = (__pyx_v_r0 - __pyx_v_r1);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":359
 *         self.rra = r0 * r0
 *         r0b = r0 - r1
 *         s = sqrt(self.length * self.length - r0b * r0b)             # <<<<<<<<<<<<<<
 *         self.ha = self.r0 * r0b / self.length
 *         self.hb = self.r1 * r0b / self.length
 */
  __pyx_v_s = sqrt(((__pyx_v_self->length * __pyx_v_self->length) - (__pyx_v_r0b * __pyx_v_r0b)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":360
 *         r0b = r0 - r1
 *         s = sqrt(self.length * self.length - r0b * r0b)
 *         self.ha = self.r0 * r0b / self.length             # <<<<<<<<<<<<<<
 *         self.hb = self.r1 * r0b / self.length
 *         self.hra = self.r0 * s / self.length
 */
  __pyx_t_4 = (__pyx_v_self->r0 * __pyx_v_r0b);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 360, __pyx_L1_error)
  }
  __pyx_v_self->ha = (__pyx_t_4 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":361
 *         s = sqrt(self.length * self.length - r0b * r0b)
 *         self.ha = self.r0 * r0b / self.length
 *         self.hb = self.r1 * r0b / self.length             # <<<<<<<<<<<<<<
 *         self.hra = self.r0 * s / self.length
 *         self.hrb = self.r1 * s / self.length
 */
  __pyx_t_4 = (__pyx_v_self->r1 * __pyx_v_r0b);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 361, __pyx_L1_error)
  }
  __pyx_v_self->hb = (__pyx_t_4 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":362
 *         self.ha = self.r0 * r0b / self.length
 *         self.hb = self.r1 * r0b / self.length
 *         self.hra = self.r0 * s / self.length             # <<<<<<<<<<<<<<
 *         self.hrb = self.r1 * s / self.length
 *         self.side1 = -self.ha / self.r0
 */
  __pyx_t_4 = (__pyx_v_self->r0 * __pyx_v_s);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 362, __pyx_L1_error)
  }
  __pyx_v_self->hra = (__pyx_t_4 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":363
 *         self.hb = self.r1 * r0b / self.length
 *         self.hra = self.r0 * s / self.length
 *         self.hrb = self.r1 * s / self.length             # <<<<<<<<<<<<<<
 *         self.side1 = -self.ha / self.r0
 *         self.side2 = self.hra / self.r0
 */
  __pyx_t_4 = (__pyx_v_self->r1 * __pyx_v_s);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 363, __pyx_L1_error)
  }
  __pyx_v_self->hrb = (__pyx_t_4 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":364
 *         self.hra = self.r0 * s / self.length
 *         self.hrb = self.r1 * s / self.length
 *         self.side1 = -self.ha / self.r0             # <<<<<<<<<<<<<<
 *         self.side2 = self.hra / self.r0
 *         self.conelength = self.length * self.hra / self.r0
 */
  __pyx_t_4 = (-__pyx_v_self->ha);
  if (unlikely(__pyx_v_self->r0 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 364, __pyx_L1_error)
  }
  __pyx_v_self->side1 = (__pyx_t_4 / __pyx_v_self->r0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":365
 *         self.hrb = self.r1 * s / self.length
 *         self.side1 = -self.ha / self.r0
 *         self.side2 = self.hra / self.r0             # <<<<<<<<<<<<<<
 *         self.conelength = self.length * self.hra / self.r0
 * 
 */
  if (unlikely(__pyx_v_self->r0 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 365, __pyx_L1_error)
  }
  __pyx_v_self->side2 = (__pyx_v_self->hra / __pyx_v_self->r0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":366
 *         self.side1 = -self.ha / self.r0
 *         self.side2 = self.hra / self.r0
 *         self.conelength = self.length * self.hra / self.r0             # <<<<<<<<<<<<<<
 * 
 *         self._xlo = min(x0 - r0, x1 - r1)
 */
  __pyx_t_4 = (__pyx_v_self->length * __pyx_v_self->hra);
  if (unlikely(__pyx_v_self->r0 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 366, __pyx_L1_error)
  }
  __pyx_v_self->conelength = (__pyx_t_4 / __pyx_v_self->r0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":368
 *         self.conelength = self.length * self.hra / self.r0
 * 
 *         self._xlo = min(x0 - r0, x1 - r1)             # <<<<<<<<<<<<<<
 *         self._xhi = max(x0 + r0, x1 + r1)
 *         self._ylo = min(y0 - r0, y1 - r1)
 */
  __pyx_t_4 = (__pyx_v_x1 - __pyx_v_r1);
  __pyx_t_2 = (__pyx_v_x0 - __pyx_v_r0);
  if (((__pyx_t_4 < __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_4;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_self->_xlo = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":369
 * 
 *         self._xlo = min(x0 - r0, x1 - r1)
 *         self._xhi = max(x0 + r0, x1 + r1)             # <<<<<<<<<<<<<<
 *         self._ylo = min(y0 - r0, y1 - r1)
 *         self._yhi = max(y0 + r0, y1 + r1)
 */
  __pyx_t_3 = (__pyx_v_x1 + __pyx_v_r1);
  __pyx_t_4 = (__pyx_v_x0 + __pyx_v_r0);
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_2 = __pyx_t_3;
  } else {
    __pyx_t_2 = __pyx_t_4;
  }
  __pyx_v_self->_xhi = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":370
 *         self._xlo = min(x0 - r0, x1 - r1)
 *         self._xhi = max(x0 + r0, x1 + r1)
 *         self._ylo = min(y0 - r0, y1 - r1)             # <<<<<<<<<<<<<<
 *         self._yhi = max(y0 + r0, y1 + r1)
 *         self._zlo = min(z0 - r0, z1 - r1)
 */
  __pyx_t_2 = (__pyx_v_y1 - __pyx_v_r1);
  __pyx_t_3 = (__pyx_v_y0 - __pyx_v_r0);
  if (((__pyx_t_2 < __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_v_self->_ylo = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":371
 *         self._xhi = max(x0 + r0, x1 + r1)
 *         self._ylo = min(y0 - r0, y1 - r1)
 *         self._yhi = max(y0 + r0, y1 + r1)             # <<<<<<<<<<<<<<
 *         self._zlo = min(z0 - r0, z1 - r1)
 *         self._zhi = max(z0 + r0, z1 + r1)
 */
  __pyx_t_4 = (__pyx_v_y1 + __pyx_v_r1);
  __pyx_t_2 = (__pyx_v_y0 + __pyx_v_r0);
  if (((__pyx_t_4 > __pyx_t_2) != 0)) {
    __pyx_t_3 = __pyx_t_4;
  } else {
    __pyx_t_3 = __pyx_t_2;
  }
  __pyx_v_self->_yhi = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":372
 *         self._ylo = min(y0 - r0, y1 - r1)
 *         self._yhi = max(y0 + r0, y1 + r1)
 *         self._zlo = min(z0 - r0, z1 - r1)             # <<<<<<<<<<<<<<
 *         self._zhi = max(z0 + r0, z1 + r1)
 *         self.clips = []
 */
  __pyx_t_3 = (__pyx_v_z1 - __pyx_v_r1);
  __pyx_t_4 = (__pyx_v_z0 - __pyx_v_r0);
  if (((__pyx_t_3 < __pyx_t_4) != 0)) {
    __pyx_t_2 = __pyx_t_3;
  } else {
    __pyx_t_2 = __pyx_t_4;
  }
  __pyx_v_self->_zlo = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":373
 *         self._yhi = max(y0 + r0, y1 + r1)
 *         self._zlo = min(z0 - r0, z1 - r1)
 *         self._zhi = max(z0 + r0, z1 + r1)             # <<<<<<<<<<<<<<
 *         self.clips = []
 * 
 */
  __pyx_t_2 = (__pyx_v_z1 + __pyx_v_r1);
  __pyx_t_3 = (__pyx_v_z0 + __pyx_v_r0);
  if (((__pyx_t_2 > __pyx_t_3) != 0)) {
    __pyx_t_4 = __pyx_t_2;
  } else {
    __pyx_t_4 = __pyx_t_3;
  }
  __pyx_v_self->_zhi = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":374
 *         self._zlo = min(z0 - r0, z1 - r1)
 *         self._zhi = max(z0 + r0, z1 + r1)
 *         self.clips = []             # <<<<<<<<<<<<<<
 * 
 *     def starting_points(self, xs, ys, zs):
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":330
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):             # <<<<<<<<<<<<<<
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":376
 *         self.clips = []
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self.x0 - self.axisx * self.r0), bisect.bisect_left(ys, self.y0 - self.axisy * self.r0), bisect.bisect_left(zs, self.z0 - self.axisz * self.r0))])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_9starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_9starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 376, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 376, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_8starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_8starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":378
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self.x0 - self.axisx * self.r0), bisect.bisect_left(ys, self.y0 - self.axisy * self.r0), bisect.bisect_left(zs, self.z0 - self.axisz * self.r0))])             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 378, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 378, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_zs);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->x0 - (__pyx_v_self->axisx * __pyx_v_self->r0))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bisect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->y0 - (__pyx_v_self->axisy * __pyx_v_self->r0))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble((__pyx_v_self->z0 - (__pyx_v_self->axisz * __pyx_v_self->r0))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":376
 *         self.clips = []
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self.x0 - self.axisx * self.r0), bisect.bisect_left(ys, self.y0 - self.axisy * self.r0), bisect.bisect_left(zs, self.z0 - self.axisz * self.r0))])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":381
 * 
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, nn, x, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_11distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  double __pyx_v_yy;
  double __pyx_v_xx;
  double __pyx_v_ry;
  double __pyx_v_rx;
  double __pyx_v_nn;
  double __pyx_v_x;
  double __pyx_v_d;
  PyObject *__pyx_v_clip = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_11distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":383
 *     cpdef double distance(self, double px, double py, double pz):
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, nn, x, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0             # <<<<<<<<<<<<<<
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         nn = nx * nx + ny * ny + nz * nz
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->x0);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->y0);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->z0);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":384
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, nn, x, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz             # <<<<<<<<<<<<<<
 *         nn = nx * nx + ny * ny + nz * nz
 * 
 */
  __pyx_v_y = (((__pyx_v_nx * __pyx_v_self->axisx) + (__pyx_v_ny * __pyx_v_self->axisy)) + (__pyx_v_nz * __pyx_v_self->axisz));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":385
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         nn = nx * nx + ny * ny + nz * nz             # <<<<<<<<<<<<<<
 * 
 *         yy = y * y
 */
  __pyx_v_nn = (((__pyx_v_nx * __pyx_v_nx) + (__pyx_v_ny * __pyx_v_ny)) + (__pyx_v_nz * __pyx_v_nz));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":387
 *         nn = nx * nx + ny * ny + nz * nz
 * 
 *         yy = y * y             # <<<<<<<<<<<<<<
 *         xx = nn - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 */
  __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":388
 * 
 *         yy = y * y
 *         xx = nn - yy             # <<<<<<<<<<<<<<
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0
 */
  __pyx_v_xx = (__pyx_v_nn - __pyx_v_yy);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":390
 *         xx = nn - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0             # <<<<<<<<<<<<<<
 *         x = sqrt(xx)
 *         ry = x * self.side1 + y * self.side2
 */
  __pyx_t_13 = ((__pyx_v_xx < 0.0) != 0);
  if (__pyx_t_13) {
    __pyx_v_xx = 0.0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":391
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0
 *         x = sqrt(xx)             # <<<<<<<<<<<<<<
 *         ry = x * self.side1 + y * self.side2
 *         if ry < 0:
 */
  __pyx_v_x = sqrt(__pyx_v_xx);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":392
 *         if xx < 0: xx = 0
 *         x = sqrt(xx)
 *         ry = x * self.side1 + y * self.side2             # <<<<<<<<<<<<<<
 *         if ry < 0:
 *             d = sqrt(nn) - self.r0
 */
  __pyx_v_ry = ((__pyx_v_x * __pyx_v_self->side1) + (__pyx_v_y * __pyx_v_self->side2));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":393
 *         x = sqrt(xx)
 *         ry = x * self.side1 + y * self.side2
 *         if ry < 0:             # <<<<<<<<<<<<<<
 *             d = sqrt(nn) - self.r0
 *         elif ry > self.conelength:
 */
  __pyx_t_13 = ((__pyx_v_ry < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":394
 *         ry = x * self.side1 + y * self.side2
 *         if ry < 0:
 *             d = sqrt(nn) - self.r0             # <<<<<<<<<<<<<<
 *         elif ry > self.conelength:
 *             y = y - self.length
 */
    __pyx_v_d = (sqrt(__pyx_v_nn) - __pyx_v_self->r0);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":393
 *         x = sqrt(xx)
 *         ry = x * self.side1 + y * self.side2
 *         if ry < 0:             # <<<<<<<<<<<<<<
 *             d = sqrt(nn) - self.r0
 *         elif ry > self.conelength:
 */
    goto __pyx_L4;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":395
 *         if ry < 0:
 *             d = sqrt(nn) - self.r0
 *         elif ry > self.conelength:             # <<<<<<<<<<<<<<
 *             y = y - self.length
 *             yy = y * y
 */
  __pyx_t_13 = ((__pyx_v_ry > __pyx_v_self->conelength) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":396
 *             d = sqrt(nn) - self.r0
 *         elif ry > self.conelength:
 *             y = y - self.length             # <<<<<<<<<<<<<<
 *             yy = y * y
 *             nn = xx + yy
 */
    __pyx_v_y = (__pyx_v_y - __pyx_v_self->length);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":397
 *         elif ry > self.conelength:
 *             y = y - self.length
 *             yy = y * y             # <<<<<<<<<<<<<<
 *             nn = xx + yy
 *             d = sqrt(nn) - self.r1
 */
    __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":398
 *             y = y - self.length
 *             yy = y * y
 *             nn = xx + yy             # <<<<<<<<<<<<<<
 *             d = sqrt(nn) - self.r1
 *         else:
 */
    __pyx_v_nn = (__pyx_v_xx + __pyx_v_yy);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":399
 *             yy = y * y
 *             nn = xx + yy
 *             d = sqrt(nn) - self.r1             # <<<<<<<<<<<<<<
 *         else:
 *             rx = x * self.side2 - y * self.side1
 */
    __pyx_v_d = (sqrt(__pyx_v_nn) - __pyx_v_self->r1);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":395
 *         if ry < 0:
 *             d = sqrt(nn) - self.r0
 *         elif ry > self.conelength:             # <<<<<<<<<<<<<<
 *             y = y - self.length
 *             yy = y * y
 */
    goto __pyx_L4;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":401
 *             d = sqrt(nn) - self.r1
 *         else:
 *             rx = x * self.side2 - y * self.side1             # <<<<<<<<<<<<<<
 *             d = rx - self.r0
 * 
 */
  /*else*/ {
    __pyx_v_rx = ((__pyx_v_x * __pyx_v_self->side2) - (__pyx_v_y * __pyx_v_self->side1));

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":402
 *         else:
 *             rx = x * self.side2 - y * self.side1
 *             d = rx - self.r0             # <<<<<<<<<<<<<<
 * 
 *         for clip in self.clips:
 */
    __pyx_v_d = (__pyx_v_rx - __pyx_v_self->r0);
  }
  __pyx_L4:;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":404
 *             d = rx - self.r0
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 404, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_1); __pyx_t_14 = 0;
  for (;;) {
    if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_14); __Pyx_INCREF(__pyx_t_2); __pyx_t_14++; if (unlikely(0 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_clip, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":405
 * 
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_clip, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_4);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_12 = __pyx_v_d;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_13) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    } else {
      __pyx_t_4 = PyFloat_FromDouble(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_d = __pyx_t_12;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":404
 *             d = rx - self.r0
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":406
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))
 *         return d             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":381
 * 
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, nn, x, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_clip);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_11distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_11distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 381, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 381, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 381, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 381, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 381, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":410
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_13overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_13overlaps_x)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 410, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 410, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":411
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_xhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_xlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":410
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_13overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_13overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, 1); __PYX_ERR(0, 410, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_x") < 0)) __PYX_ERR(0, 410, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 410, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_12overlaps_x(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_12overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_x(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":412
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_15overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_15overlaps_y)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":413
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_yhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_ylo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":412
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_15overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_15overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, 1); __PYX_ERR(0, 412, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_y") < 0)) __PYX_ERR(0, 412, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 412, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_14overlaps_y(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_14overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_y(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":414
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_17overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_17overlaps_z)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":415
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_zhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_zlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":414
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_17overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_17overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_z (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, 1); __PYX_ERR(0, 414, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_z") < 0)) __PYX_ERR(0, 414, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 414, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 414, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_16overlaps_z(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_16overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_z(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_18__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_18__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.ha, self.hb, self.hra, self.hrb, self.length, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->conelength); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->ha); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->hb); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->hra); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->hrb); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->rra); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyFloat_FromDouble(__pyx_v_self->rrb); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble(__pyx_v_self->side1); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble(__pyx_v_self->side2); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_26 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __pyx_t_28 = PyTuple_New(28); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_28, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_28, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_28, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_28, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_28, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_28, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_28, 8, __pyx_t_9);
  __Pyx_INCREF(__pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_v_self->clips);
  PyTuple_SET_ITEM(__pyx_t_28, 9, __pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_28, 10, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_28, 11, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_28, 12, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_28, 13, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_28, 14, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_28, 15, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_28, 16, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_28, 17, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_28, 18, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_28, 19, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_28, 20, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_28, 21, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_28, 22, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_28, 23, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_28, 24, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_28, 25, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_26);
  PyTuple_SET_ITEM(__pyx_t_28, 26, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_28, 27, __pyx_t_27);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_28);
  __pyx_t_28 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.ha, self.hb, self.hra, self.hrb, self.length, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_28 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_v__dict = __pyx_t_28;
  __pyx_t_28 = 0;

  /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.ha, self.hb, self.hra, self.hrb, self.length, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_29 = (__pyx_v__dict != Py_None);
  __pyx_t_30 = (__pyx_t_29 != 0);
  if (__pyx_t_30) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_28 = PyTuple_New(1); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_v__dict);
    __pyx_t_27 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_28); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_27));
    __pyx_t_27 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.clips is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.ha, self.hb, self.hra, self.hrb, self.length, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.clips is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, None), state
 */
  /*else*/ {
    __pyx_t_30 = (__pyx_v_self->clips != ((PyObject*)Py_None));
    __pyx_v_use_setstate = __pyx_t_30;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, None), state
 *     else:
 */
  __pyx_t_30 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_30) {

    /* "(tree fragment)":13
 *         use_setstate = self.clips is not None
 *     if use_setstate:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_27, __pyx_n_s_pyx_unpickle_SphereCone); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_28 = PyTuple_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_28, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_99548530);
    __Pyx_GIVEREF(__pyx_int_99548530);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_int_99548530);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_28, 2, Py_None);
    __pyx_t_26 = PyTuple_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __Pyx_GIVEREF(__pyx_t_27);
    PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_28);
    PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_28);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_26, 2, __pyx_v_state);
    __pyx_t_27 = 0;
    __pyx_t_28 = 0;
    __pyx_r = __pyx_t_26;
    __pyx_t_26 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, None), state
 *     else:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SphereCone__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_pyx_unpickle_SphereCone); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __pyx_t_28 = PyTuple_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_28, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_99548530);
    __Pyx_GIVEREF(__pyx_int_99548530);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_int_99548530);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_28, 2, __pyx_v_state);
    __pyx_t_27 = PyTuple_New(2); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_26);
    PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_26);
    __Pyx_GIVEREF(__pyx_t_28);
    PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_28);
    __pyx_t_26 = 0;
    __pyx_t_28 = 0;
    __pyx_r = __pyx_t_27;
    __pyx_t_27 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SphereCone__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_20__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_20__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SphereCone__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SphereCone__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SphereCone, (type(self), 0x5eefd72, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SphereCone__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SphereCone.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":425
 *     cdef bint reversed
 *     property xlo:
 *         def __get__(self): return self._xlo             # <<<<<<<<<<<<<<
 *     property xhi:
 *         def __get__(self): return self._xhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.xlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":427
 *         def __get__(self): return self._xlo
 *     property xhi:
 *         def __get__(self): return self._xhi             # <<<<<<<<<<<<<<
 *     property ylo:
 *         def __get__(self): return self._ylo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.xhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":429
 *         def __get__(self): return self._xhi
 *     property ylo:
 *         def __get__(self): return self._ylo             # <<<<<<<<<<<<<<
 *     property yhi:
 *         def __get__(self): return self._yhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.ylo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":431
 *         def __get__(self): return self._ylo
 *     property yhi:
 *         def __get__(self): return self._yhi             # <<<<<<<<<<<<<<
 *     property zlo:
 *         def __get__(self): return self._zlo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.yhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":433
 *         def __get__(self): return self._yhi
 *     property zlo:
 *         def __get__(self): return self._zlo             # <<<<<<<<<<<<<<
 *     property zhi:
 *         def __get__(self): return self._zhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.zlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":435
 *         def __get__(self): return self._zlo
 *     property zhi:
 *         def __get__(self): return self._zhi             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.zhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":437
 *         def __get__(self): return self._zhi
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef list order
 *         if self.reversed:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone___repr__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone___repr__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":439
 *     def __repr__(self):
 *         cdef list order
 *         if self.reversed:             # <<<<<<<<<<<<<<
 *             order = [self.x1, self.y1, self.z1, self.r1, self.x0, self.y0, self.z0, self.r0]
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->reversed != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":440
 *         cdef list order
 *         if self.reversed:
 *             order = [self.x1, self.y1, self.z1, self.r1, self.x0, self.y0, self.z0, self.r0]             # <<<<<<<<<<<<<<
 *         else:
 *             order = [self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1]
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyList_New(8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_10, 4, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_10, 5, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_10, 6, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_10, 7, __pyx_t_9);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_v_order = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":439
 *     def __repr__(self):
 *         cdef list order
 *         if self.reversed:             # <<<<<<<<<<<<<<
 *             order = [self.x1, self.y1, self.z1, self.r1, self.x0, self.y0, self.z0, self.r0]
 *         else:
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":442
 *             order = [self.x1, self.y1, self.z1, self.r1, self.x0, self.y0, self.z0, self.r0]
 *         else:
 *             order = [self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1]             # <<<<<<<<<<<<<<
 *         if self.clips:
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)' % tuple(order + [self.clips])
 */
  /*else*/ {
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_2, 4, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_2, 5, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_2, 6, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_2, 7, __pyx_t_3);
    __pyx_t_10 = 0;
    __pyx_t_9 = 0;
    __pyx_t_8 = 0;
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_v_order = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":443
 *         else:
 *             order = [self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1]
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)' % tuple(order + [self.clips])
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->clips != Py_None)&&(PyList_GET_SIZE(__pyx_v_self->clips) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":444
 *             order = [self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1]
 *         if self.clips:
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)' % tuple(order + [self.clips])             # <<<<<<<<<<<<<<
 *         else:
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g)' % tuple(order)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_self->clips);
    __Pyx_GIVEREF(__pyx_v_self->clips);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_v_self->clips);
    __pyx_t_3 = PyNumber_Add(__pyx_v_order, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Cone_g_g_g_g_g_g_g_g_clips_r, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":443
 *         else:
 *             order = [self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1]
 *         if self.clips:             # <<<<<<<<<<<<<<
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)' % tuple(order + [self.clips])
 *         else:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":446
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g; clips=%r)' % tuple(order + [self.clips])
 *         else:
 *             return 'Cone(%g, %g, %g, %g, %g, %g, %g, %g)' % tuple(order)             # <<<<<<<<<<<<<<
 * 
 *     property _x0:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_AsTuple(__pyx_v_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Cone_g_g_g_g_g_g_g_g, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":437
 *         def __get__(self): return self._zhi
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         cdef list order
 *         if self.reversed:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":449
 * 
 *     property _x0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1 if self.reversed else self.x0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":450
 *     property _x0:
 *         def __get__(self):
 *             return self.x1 if self.reversed else self.x0             # <<<<<<<<<<<<<<
 * 
 *     property _y0:
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":449
 * 
 *     property _x0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x1 if self.reversed else self.x0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._x0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":453
 * 
 *     property _y0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1 if self.reversed else self.y0
 *     property _z0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":454
 *     property _y0:
 *         def __get__(self):
 *             return self.y1 if self.reversed else self.y0             # <<<<<<<<<<<<<<
 *     property _z0:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":453
 * 
 *     property _y0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y1 if self.reversed else self.y0
 *     property _z0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._y0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":456
 *             return self.y1 if self.reversed else self.y0
 *     property _z0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z1 if self.reversed else self.z0
 *     property _r0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":457
 *     property _z0:
 *         def __get__(self):
 *             return self.z1 if self.reversed else self.z0             # <<<<<<<<<<<<<<
 *     property _r0:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":456
 *             return self.y1 if self.reversed else self.y0
 *     property _z0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z1 if self.reversed else self.z0
 *     property _r0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._z0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":459
 *             return self.z1 if self.reversed else self.z0
 *     property _r0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1 if self.reversed else self.r0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":460
 *     property _r0:
 *         def __get__(self):
 *             return self.r1 if self.reversed else self.r0             # <<<<<<<<<<<<<<
 * 
 *     property _x1:
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":459
 *             return self.z1 if self.reversed else self.z0
 *     property _r0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r1 if self.reversed else self.r0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._r0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":463
 * 
 *     property _x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x0 if self.reversed else self.x1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":464
 *     property _x1:
 *         def __get__(self):
 *             return self.x0 if self.reversed else self.x1             # <<<<<<<<<<<<<<
 * 
 *     property _y1:
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":463
 * 
 *     property _x1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.x0 if self.reversed else self.x1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._x1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":467
 * 
 *     property _y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y0 if self.reversed else self.y1
 *     property _z1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":468
 *     property _y1:
 *         def __get__(self):
 *             return self.y0 if self.reversed else self.y1             # <<<<<<<<<<<<<<
 *     property _z1:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":467
 * 
 *     property _y1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.y0 if self.reversed else self.y1
 *     property _z1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._y1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":470
 *             return self.y0 if self.reversed else self.y1
 *     property _z1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z0 if self.reversed else self.z1
 *     property _r1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":471
 *     property _z1:
 *         def __get__(self):
 *             return self.z0 if self.reversed else self.z1             # <<<<<<<<<<<<<<
 *     property _r1:
 *         def __get__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":470
 *             return self.y0 if self.reversed else self.y1
 *     property _z1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.z0 if self.reversed else self.z1
 *     property _r1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._z1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":473
 *             return self.z0 if self.reversed else self.z1
 *     property _r1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r0 if self.reversed else self.r1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":474
 *     property _r1:
 *         def __get__(self):
 *             return self.r0 if self.reversed else self.r1             # <<<<<<<<<<<<<<
 * 
 *     property axislength:
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_self->reversed != 0)) {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":473
 *             return self.z0 if self.reversed else self.z1
 *     property _r1:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.r0 if self.reversed else self.r1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone._r1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":477
 * 
 *     property axislength:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.length
 *     property primitives:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":478
 *     property axislength:
 *         def __get__(self):
 *             return self.length             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return [self]
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":477
 * 
 *     property axislength:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.length
 *     property primitives:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.axislength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":480
 *             return self.length
 *     property primitives:
 *         def __get__(self): return [self]             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":483
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):             # <<<<<<<<<<<<<<
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_r0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_r1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_r0,&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_z1,&__pyx_n_s_r1,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 1); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 2); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 3); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 4); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 5); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 6); __PYX_ERR(0, 483, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, 7); __PYX_ERR(0, 483, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 483, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_r0 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_r0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_z1 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_z1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
    __pyx_v_r1 = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 483, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 483, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_2__init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1) {
  double __pyx_v_axisx;
  double __pyx_v_axisy;
  double __pyx_v_axisz;
  double __pyx_v_length;
  double __pyx_v_f;
  double __pyx_v_rmax;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":484
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 *             self.reversed = True
 */
  __pyx_t_1 = ((__pyx_v_r1 > __pyx_v_r0) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":485
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0             # <<<<<<<<<<<<<<
 *             self.reversed = True
 *         else:
 */
    __pyx_t_2 = __pyx_v_x1;
    __pyx_t_3 = __pyx_v_y1;
    __pyx_t_4 = __pyx_v_z1;
    __pyx_t_5 = __pyx_v_r1;
    __pyx_t_6 = __pyx_v_x0;
    __pyx_t_7 = __pyx_v_y0;
    __pyx_t_8 = __pyx_v_z0;
    __pyx_t_9 = __pyx_v_r0;
    __pyx_v_x0 = __pyx_t_2;
    __pyx_v_y0 = __pyx_t_3;
    __pyx_v_z0 = __pyx_t_4;
    __pyx_v_r0 = __pyx_t_5;
    __pyx_v_x1 = __pyx_t_6;
    __pyx_v_y1 = __pyx_t_7;
    __pyx_v_z1 = __pyx_t_8;
    __pyx_v_r1 = __pyx_t_9;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":486
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 *             self.reversed = True             # <<<<<<<<<<<<<<
 *         else:
 *             self.reversed = False
 */
    __pyx_v_self->reversed = 1;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":484
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 *             self.reversed = True
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":488
 *             self.reversed = True
 *         else:
 *             self.reversed = False             # <<<<<<<<<<<<<<
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 */
  /*else*/ {
    __pyx_v_self->reversed = 0;
  }
  __pyx_L3:;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":490
 *             self.reversed = False
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1             # <<<<<<<<<<<<<<
 * 
 *         if r0 < 0:
 */
  __pyx_t_9 = __pyx_v_x0;
  __pyx_t_8 = __pyx_v_y0;
  __pyx_t_7 = __pyx_v_z0;
  __pyx_t_6 = __pyx_v_r0;
  __pyx_t_5 = __pyx_v_x1;
  __pyx_t_4 = __pyx_v_y1;
  __pyx_t_3 = __pyx_v_z1;
  __pyx_t_2 = __pyx_v_r1;
  __pyx_v_self->x0 = __pyx_t_9;
  __pyx_v_self->y0 = __pyx_t_8;
  __pyx_v_self->z0 = __pyx_t_7;
  __pyx_v_self->r0 = __pyx_t_6;
  __pyx_v_self->x1 = __pyx_t_5;
  __pyx_v_self->y1 = __pyx_t_4;
  __pyx_v_self->z1 = __pyx_t_3;
  __pyx_v_self->r1 = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":492
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 * 
 *         if r0 < 0:             # <<<<<<<<<<<<<<
 *             raise Exception('At least one Cone radius must be positive')
 *         if r1 < 0:
 */
  __pyx_t_1 = ((__pyx_v_r0 < 0.0) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":493
 * 
 *         if r0 < 0:
 *             raise Exception('At least one Cone radius must be positive')             # <<<<<<<<<<<<<<
 *         if r1 < 0:
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 */
    __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple_, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(0, 493, __pyx_L1_error)

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":492
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 * 
 *         if r0 < 0:             # <<<<<<<<<<<<<<
 *             raise Exception('At least one Cone radius must be positive')
 *         if r1 < 0:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":494
 *         if r0 < 0:
 *             raise Exception('At least one Cone radius must be positive')
 *         if r1 < 0:             # <<<<<<<<<<<<<<
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)
 */
  __pyx_t_1 = ((__pyx_v_r1 < 0.0) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":495
 *             raise Exception('At least one Cone radius must be positive')
 *         if r1 < 0:
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)             # <<<<<<<<<<<<<<
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)
 *             axisx /= length; axisy /= length; axisz /= length
 */
    __pyx_t_2 = (__pyx_v_x1 - __pyx_v_x0);
    __pyx_t_3 = (__pyx_v_y1 - __pyx_v_y0);
    __pyx_t_4 = (__pyx_v_z1 - __pyx_v_z0);
    __pyx_v_axisx = __pyx_t_2;
    __pyx_v_axisy = __pyx_t_3;
    __pyx_v_axisz = __pyx_t_4;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":496
 *         if r1 < 0:
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)             # <<<<<<<<<<<<<<
 *             axisx /= length; axisy /= length; axisz /= length
 *             f = r1 / (r1 - r0)
 */
    __pyx_v_length = sqrt(((pow(__pyx_v_axisx, 2.0) + pow(__pyx_v_axisy, 2.0)) + pow(__pyx_v_axisz, 2.0)));

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":497
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)
 *             axisx /= length; axisy /= length; axisz /= length             # <<<<<<<<<<<<<<
 *             f = r1 / (r1 - r0)
 *             x1 -= f * axisx; y1 -= f * axisy; z1 -= f * axisz; r1 = 0
 */
    if (unlikely(__pyx_v_length == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_v_axisx = (__pyx_v_axisx / __pyx_v_length);
    if (unlikely(__pyx_v_length == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_v_axisy = (__pyx_v_axisy / __pyx_v_length);
    if (unlikely(__pyx_v_length == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 497, __pyx_L1_error)
    }
    __pyx_v_axisz = (__pyx_v_axisz / __pyx_v_length);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":498
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)
 *             axisx /= length; axisy /= length; axisz /= length
 *             f = r1 / (r1 - r0)             # <<<<<<<<<<<<<<
 *             x1 -= f * axisx; y1 -= f * axisy; z1 -= f * axisz; r1 = 0
 * 
 */
    __pyx_t_4 = (__pyx_v_r1 - __pyx_v_r0);
    if (unlikely(__pyx_t_4 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 498, __pyx_L1_error)
    }
    __pyx_v_f = (__pyx_v_r1 / __pyx_t_4);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":499
 *             axisx /= length; axisy /= length; axisz /= length
 *             f = r1 / (r1 - r0)
 *             x1 -= f * axisx; y1 -= f * axisy; z1 -= f * axisz; r1 = 0             # <<<<<<<<<<<<<<
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 */
    __pyx_v_x1 = (__pyx_v_x1 - (__pyx_v_f * __pyx_v_axisx));
    __pyx_v_y1 = (__pyx_v_y1 - (__pyx_v_f * __pyx_v_axisy));
    __pyx_v_z1 = (__pyx_v_z1 - (__pyx_v_f * __pyx_v_axisz));
    __pyx_v_r1 = 0.0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":494
 *         if r0 < 0:
 *             raise Exception('At least one Cone radius must be positive')
 *         if r1 < 0:             # <<<<<<<<<<<<<<
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 *             length = sqrt(axisx ** 2 + axisy ** 2 + axisz ** 2)
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":501
 *             x1 -= f * axisx; y1 -= f * axisy; z1 -= f * axisz; r1 = 0
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1             # <<<<<<<<<<<<<<
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 */
  __pyx_t_4 = (__pyx_v_r0 * __pyx_v_r0);
  __pyx_t_3 = (__pyx_v_r1 * __pyx_v_r1);
  __pyx_v_self->rra = __pyx_t_4;
  __pyx_v_self->rrb = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":502
 * 
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)             # <<<<<<<<<<<<<<
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 */
  __pyx_t_3 = (__pyx_v_x1 - __pyx_v_x0);
  __pyx_t_4 = (__pyx_v_y1 - __pyx_v_y0);
  __pyx_t_2 = (__pyx_v_z1 - __pyx_v_z0);
  __pyx_v_self->axisx = __pyx_t_3;
  __pyx_v_self->axisy = __pyx_t_4;
  __pyx_v_self->axisz = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":503
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)             # <<<<<<<<<<<<<<
 *         # normalize the axis
 *         self.axisx /= self.length
 */
  __pyx_v_self->length = sqrt(((pow(__pyx_v_self->axisx, 2.0) + pow(__pyx_v_self->axisy, 2.0)) + pow(__pyx_v_self->axisz, 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":505
 *         self.length = sqrt(self.axisx ** 2 + self.axisy ** 2 + self.axisz ** 2)
 *         # normalize the axis
 *         self.axisx /= self.length             # <<<<<<<<<<<<<<
 *         self.axisy /= self.length
 *         self.axisz /= self.length
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 505, __pyx_L1_error)
  }
  __pyx_v_self->axisx = (__pyx_v_self->axisx / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":506
 *         # normalize the axis
 *         self.axisx /= self.length
 *         self.axisy /= self.length             # <<<<<<<<<<<<<<
 *         self.axisz /= self.length
 * 
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 506, __pyx_L1_error)
  }
  __pyx_v_self->axisy = (__pyx_v_self->axisy / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":507
 *         self.axisx /= self.length
 *         self.axisy /= self.length
 *         self.axisz /= self.length             # <<<<<<<<<<<<<<
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 507, __pyx_L1_error)
  }
  __pyx_v_self->axisz = (__pyx_v_self->axisz / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":509
 *         self.axisz /= self.length
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)             # <<<<<<<<<<<<<<
 *         self.side1 = (r1 - r0) / self.conelength
 *         self.side2 = self.length / self.conelength
 */
  __pyx_v_self->conelength = sqrt((pow((__pyx_v_r1 - __pyx_v_r0), 2.0) + pow(__pyx_v_self->length, 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":510
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 *         self.side1 = (r1 - r0) / self.conelength             # <<<<<<<<<<<<<<
 *         self.side2 = self.length / self.conelength
 * 
 */
  __pyx_t_2 = (__pyx_v_r1 - __pyx_v_r0);
  if (unlikely(__pyx_v_self->conelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 510, __pyx_L1_error)
  }
  __pyx_v_self->side1 = (__pyx_t_2 / __pyx_v_self->conelength);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":511
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 *         self.side1 = (r1 - r0) / self.conelength
 *         self.side2 = self.length / self.conelength             # <<<<<<<<<<<<<<
 * 
 *         cdef double rmax = max(r0, r1)
 */
  if (unlikely(__pyx_v_self->conelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 511, __pyx_L1_error)
  }
  __pyx_v_self->side2 = (__pyx_v_self->length / __pyx_v_self->conelength);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":513
 *         self.side2 = self.length / self.conelength
 * 
 *         cdef double rmax = max(r0, r1)             # <<<<<<<<<<<<<<
 * 
 *         self._xlo = min(x0 - rmax, x1 - rmax)
 */
  __pyx_t_2 = __pyx_v_r1;
  __pyx_t_4 = __pyx_v_r0;
  if (((__pyx_t_2 > __pyx_t_4) != 0)) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_4;
  }
  __pyx_v_rmax = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":515
 *         cdef double rmax = max(r0, r1)
 * 
 *         self._xlo = min(x0 - rmax, x1 - rmax)             # <<<<<<<<<<<<<<
 *         self._xhi = max(x0 + rmax, x1 + rmax)
 *         self._ylo = min(y0 - rmax, y1 - rmax)
 */
  __pyx_t_3 = (__pyx_v_x1 - __pyx_v_rmax);
  __pyx_t_2 = (__pyx_v_x0 - __pyx_v_rmax);
  if (((__pyx_t_3 < __pyx_t_2) != 0)) {
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __pyx_v_self->_xlo = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":516
 * 
 *         self._xlo = min(x0 - rmax, x1 - rmax)
 *         self._xhi = max(x0 + rmax, x1 + rmax)             # <<<<<<<<<<<<<<
 *         self._ylo = min(y0 - rmax, y1 - rmax)
 *         self._yhi = max(y0 + rmax, y1 + rmax)
 */
  __pyx_t_4 = (__pyx_v_x1 + __pyx_v_rmax);
  __pyx_t_3 = (__pyx_v_x0 + __pyx_v_rmax);
  if (((__pyx_t_4 > __pyx_t_3) != 0)) {
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  __pyx_v_self->_xhi = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":517
 *         self._xlo = min(x0 - rmax, x1 - rmax)
 *         self._xhi = max(x0 + rmax, x1 + rmax)
 *         self._ylo = min(y0 - rmax, y1 - rmax)             # <<<<<<<<<<<<<<
 *         self._yhi = max(y0 + rmax, y1 + rmax)
 *         self._zlo = min(z0 - rmax, z1 - rmax)
 */
  __pyx_t_2 = (__pyx_v_y1 - __pyx_v_rmax);
  __pyx_t_4 = (__pyx_v_y0 - __pyx_v_rmax);
  if (((__pyx_t_2 < __pyx_t_4) != 0)) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_4;
  }
  __pyx_v_self->_ylo = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":518
 *         self._xhi = max(x0 + rmax, x1 + rmax)
 *         self._ylo = min(y0 - rmax, y1 - rmax)
 *         self._yhi = max(y0 + rmax, y1 + rmax)             # <<<<<<<<<<<<<<
 *         self._zlo = min(z0 - rmax, z1 - rmax)
 *         self._zhi = max(z0 + rmax, z1 + rmax)
 */
  __pyx_t_3 = (__pyx_v_y1 + __pyx_v_rmax);
  __pyx_t_2 = (__pyx_v_y0 + __pyx_v_rmax);
  if (((__pyx_t_3 > __pyx_t_2) != 0)) {
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __pyx_v_self->_yhi = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":519
 *         self._ylo = min(y0 - rmax, y1 - rmax)
 *         self._yhi = max(y0 + rmax, y1 + rmax)
 *         self._zlo = min(z0 - rmax, z1 - rmax)             # <<<<<<<<<<<<<<
 *         self._zhi = max(z0 + rmax, z1 + rmax)
 *         self.neighbors = []
 */
  __pyx_t_4 = (__pyx_v_z1 - __pyx_v_rmax);
  __pyx_t_3 = (__pyx_v_z0 - __pyx_v_rmax);
  if (((__pyx_t_4 < __pyx_t_3) != 0)) {
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  __pyx_v_self->_zlo = __pyx_t_2;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":520
 *         self._yhi = max(y0 + rmax, y1 + rmax)
 *         self._zlo = min(z0 - rmax, z1 - rmax)
 *         self._zhi = max(z0 + rmax, z1 + rmax)             # <<<<<<<<<<<<<<
 *         self.neighbors = []
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 */
  __pyx_t_2 = (__pyx_v_z1 + __pyx_v_rmax);
  __pyx_t_4 = (__pyx_v_z0 + __pyx_v_rmax);
  if (((__pyx_t_2 > __pyx_t_4) != 0)) {
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_4;
  }
  __pyx_v_self->_zhi = __pyx_t_3;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":521
 *         self._zlo = min(z0 - rmax, z1 - rmax)
 *         self._zhi = max(z0 + rmax, z1 + rmax)
 *         self.neighbors = []             # <<<<<<<<<<<<<<
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.h = self.length * .5
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->neighbors);
  __Pyx_DECREF(__pyx_v_self->neighbors);
  __pyx_v_self->neighbors = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":522
 *         self._zhi = max(z0 + rmax, z1 + rmax)
 *         self.neighbors = []
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5             # <<<<<<<<<<<<<<
 *         self.h = self.length * .5
 *         self.clips = []
 */
  __pyx_t_3 = ((__pyx_v_x0 + __pyx_v_x1) * 0.5);
  __pyx_t_2 = ((__pyx_v_y0 + __pyx_v_y1) * 0.5);
  __pyx_t_4 = ((__pyx_v_z0 + __pyx_v_z1) * 0.5);
  __pyx_v_self->cx = __pyx_t_3;
  __pyx_v_self->cy = __pyx_t_2;
  __pyx_v_self->cz = __pyx_t_4;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":523
 *         self.neighbors = []
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.h = self.length * .5             # <<<<<<<<<<<<<<
 *         self.clips = []
 *         self.neighbor_regions = []
 */
  __pyx_v_self->h = (__pyx_v_self->length * .5);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":524
 *         self.cx, self.cy, self.cz = (x0 + x1) * 0.5, (y0 + y1) * 0.5, (z0 + z1) * 0.5
 *         self.h = self.length * .5
 *         self.clips = []             # <<<<<<<<<<<<<<
 *         self.neighbor_regions = []
 * 
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":525
 *         self.h = self.length * .5
 *         self.clips = []
 *         self.neighbor_regions = []             # <<<<<<<<<<<<<<
 * 
 *     def set_clip(self, clips):
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __Pyx_GOTREF(__pyx_v_self->neighbor_regions);
  __Pyx_DECREF(__pyx_v_self->neighbor_regions);
  __pyx_v_self->neighbor_regions = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":483
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1):             # <<<<<<<<<<<<<<
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1 = x1, y1, z1, r1, x0, y0, z0, r0
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":527
 *         self.neighbor_regions = []
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_5set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_5set_clip(PyObject *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_4set_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), ((PyObject *)__pyx_v_clips));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_4set_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v_clips) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":528
 * 
 *     def set_clip(self, clips):
 *         self.clips = clips             # <<<<<<<<<<<<<<
 *     def get_clip(self):
 *         return self.clips
 */
  if (!(likely(PyList_CheckExact(__pyx_v_clips))||((__pyx_v_clips) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_v_clips)->tp_name), 0))) __PYX_ERR(0, 528, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_clips;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->clips);
  __Pyx_DECREF(__pyx_v_self->clips);
  __pyx_v_self->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":527
 *         self.neighbor_regions = []
 * 
 *     def set_clip(self, clips):             # <<<<<<<<<<<<<<
 *         self.clips = clips
 *     def get_clip(self):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.set_clip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":529
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_7get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_7get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_6get_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_6get_clip(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":530
 *         self.clips = clips
 *     def get_clip(self):
 *         return self.clips             # <<<<<<<<<<<<<<
 * 
 *     cpdef within_core(self, double px, double py, double pz):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->clips);
  __pyx_r = __pyx_v_self->clips;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":529
 *     def set_clip(self, clips):
 *         self.clips = clips
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         return self.clips
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":532
 *         return self.clips
 * 
 *     cpdef within_core(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_9within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("within_core", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_within_core); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_9within_core)) {
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":534
 *     cpdef within_core(self, double px, double py, double pz):
 *         cdef double nx, ny, nz, y
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz             # <<<<<<<<<<<<<<
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         return y < self.h
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->cx);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->cy);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->cz);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":535
 *         cdef double nx, ny, nz, y
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)             # <<<<<<<<<<<<<<
 *         return y < self.h
 * 
 */
  __pyx_v_y = fabs((((__pyx_v_self->axisx * __pyx_v_nx) + (__pyx_v_self->axisy * __pyx_v_ny)) + (__pyx_v_self->axisz * __pyx_v_nz)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":536
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 *         y = abs(self.axisx * nx + self.axisy * ny + self.axisz * nz)
 *         return y < self.h             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_y < __pyx_v_self->h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":532
 *         return self.clips
 * 
 *     cpdef within_core(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         cdef double nx, ny, nz, y
 *         nx, ny, nz = px - self.cx, py - self.cy, pz - self.cz
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_9within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_9within_core(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("within_core (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, 1); __PYX_ERR(0, 532, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, 2); __PYX_ERR(0, 532, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "within_core") < 0)) __PYX_ERR(0, 532, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("within_core", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 532, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_8within_core(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_8within_core(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("within_core", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_within_core(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.within_core", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":539
 * 
 * 
 *     def axis(self):             # <<<<<<<<<<<<<<
 *         if self.reversed:
 *             return -self.axisx, -self.axisy, -self.axisz
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_11axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_11axis(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("axis (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axis(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axis(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("axis", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":540
 * 
 *     def axis(self):
 *         if self.reversed:             # <<<<<<<<<<<<<<
 *             return -self.axisx, -self.axisy, -self.axisz
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->reversed != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":541
 *     def axis(self):
 *         if self.reversed:
 *             return -self.axisx, -self.axisy, -self.axisz             # <<<<<<<<<<<<<<
 *         else:
 *             return (self.axisx, self.axisy, self.axisz)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble((-__pyx_v_self->axisx)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble((-__pyx_v_self->axisy)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble((-__pyx_v_self->axisz)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":540
 * 
 *     def axis(self):
 *         if self.reversed:             # <<<<<<<<<<<<<<
 *             return -self.axisx, -self.axisy, -self.axisz
 *         else:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":543
 *             return -self.axisx, -self.axisy, -self.axisz
 *         else:
 *             return (self.axisx, self.axisy, self.axisz)             # <<<<<<<<<<<<<<
 * 
 *     def starting_points(self, xs, ys, zs):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":539
 * 
 * 
 *     def axis(self):             # <<<<<<<<<<<<<<
 *         if self.reversed:
 *             return -self.axisx, -self.axisy, -self.axisz
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.axis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":545
 *             return (self.axisx, self.axisy, self.axisz)
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_13starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_13starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 545, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 545, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 545, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 545, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_12starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_12starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_v_c = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":547
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],             # <<<<<<<<<<<<<<
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 547, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_4); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 547, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_c, __pyx_n_s_starting_points); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[4] = {__pyx_t_6, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 3+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_4);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_INCREF(__pyx_v_xs);
      __Pyx_GIVEREF(__pyx_v_xs);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_xs);
      __Pyx_INCREF(__pyx_v_ys);
      __Pyx_GIVEREF(__pyx_v_ys);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_ys);
      __Pyx_INCREF(__pyx_v_zs);
      __Pyx_GIVEREF(__pyx_v_zs);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_7, __pyx_v_zs);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":548
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),             # <<<<<<<<<<<<<<
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_bisect); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_xs, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bisect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_ys, __pyx_t_6};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_8 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_zs, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_10 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":549
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])             # <<<<<<<<<<<<<<
 * 
 *     cpdef double distance(self, double px, double py, double pz):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_bisect); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_xs, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_xs, __pyx_t_5};
    __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_7, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_7, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_bisect); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_ys, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_ys, __pyx_t_9};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_bisect); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_zs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
    PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_zs, __pyx_t_8};
    __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_11 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__pyx_t_10) {
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_7, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_7, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":548
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),             # <<<<<<<<<<<<<<
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
  __pyx_t_6 = 0;
  __pyx_t_9 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":547
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],             # <<<<<<<<<<<<<<
 *                     [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0)),
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 */
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":545
 *             return (self.axisx, self.axisy, self.axisz)
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return sum([c.starting_points(xs, ys, zs) for c in self.clips],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":551
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:frustumdist
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, d
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_15distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  double __pyx_v_yy;
  double __pyx_v_xx;
  double __pyx_v_ry;
  double __pyx_v_rx;
  double __pyx_v_d;
  double __pyx_v_x;
  PyObject *__pyx_v_clip = NULL;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_15distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":554
 *         # CTNG:frustumdist
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0             # <<<<<<<<<<<<<<
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->x0);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->y0);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->z0);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":555
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, d
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz             # <<<<<<<<<<<<<<
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy
 */
  __pyx_v_y = (((__pyx_v_nx * __pyx_v_self->axisx) + (__pyx_v_ny * __pyx_v_self->axisy)) + (__pyx_v_nz * __pyx_v_self->axisz));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":556
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y             # <<<<<<<<<<<<<<
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 */
  __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":557
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy             # <<<<<<<<<<<<<<
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0
 */
  __pyx_v_xx = ((((__pyx_v_nx * __pyx_v_nx) + (__pyx_v_ny * __pyx_v_ny)) + (__pyx_v_nz * __pyx_v_nz)) - __pyx_v_yy);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":559
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0             # <<<<<<<<<<<<<<
 * 
 *         if y < 0:
 */
  __pyx_t_13 = ((__pyx_v_xx < 0.0) != 0);
  if (__pyx_t_13) {
    __pyx_v_xx = 0.0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":561
 *         if xx < 0: xx = 0
 * 
 *         if y < 0:             # <<<<<<<<<<<<<<
 *             # always nonnegative distance in this case
 *             if xx < self.rra:
 */
  __pyx_t_13 = ((__pyx_v_y < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":563
 *         if y < 0:
 *             # always nonnegative distance in this case
 *             if xx < self.rra:             # <<<<<<<<<<<<<<
 *                 d = -y
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_xx < __pyx_v_self->rra) != 0);
    if (__pyx_t_13) {

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":564
 *             # always nonnegative distance in this case
 *             if xx < self.rra:
 *                 d = -y             # <<<<<<<<<<<<<<
 *             else:
 *                 x = sqrt(xx) - self.r0
 */
      __pyx_v_d = (-__pyx_v_y);

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":563
 *         if y < 0:
 *             # always nonnegative distance in this case
 *             if xx < self.rra:             # <<<<<<<<<<<<<<
 *                 d = -y
 *             else:
 */
      goto __pyx_L5;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":566
 *                 d = -y
 *             else:
 *                 x = sqrt(xx) - self.r0             # <<<<<<<<<<<<<<
 *                 d = sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:
 */
    /*else*/ {
      __pyx_v_x = (sqrt(__pyx_v_xx) - __pyx_v_self->r0);

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":567
 *             else:
 *                 x = sqrt(xx) - self.r0
 *                 d = sqrt(x * x + yy)             # <<<<<<<<<<<<<<
 *         elif xx < self.rrb and y > self.length:
 *             d = y - self.length
 */
      __pyx_v_d = sqrt(((__pyx_v_x * __pyx_v_x) + __pyx_v_yy));
    }
    __pyx_L5:;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":561
 *         if xx < 0: xx = 0
 * 
 *         if y < 0:             # <<<<<<<<<<<<<<
 *             # always nonnegative distance in this case
 *             if xx < self.rra:
 */
    goto __pyx_L4;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":568
 *                 x = sqrt(xx) - self.r0
 *                 d = sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:             # <<<<<<<<<<<<<<
 *             d = y - self.length
 *         else:
 */
  __pyx_t_14 = ((__pyx_v_xx < __pyx_v_self->rrb) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_13 = __pyx_t_14;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_y > __pyx_v_self->length) != 0);
  __pyx_t_13 = __pyx_t_14;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":569
 *                 d = sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:
 *             d = y - self.length             # <<<<<<<<<<<<<<
 *         else:
 *             x = sqrt(xx) - self.r0
 */
    __pyx_v_d = (__pyx_v_y - __pyx_v_self->length);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":568
 *                 x = sqrt(xx) - self.r0
 *                 d = sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:             # <<<<<<<<<<<<<<
 *             d = y - self.length
 *         else:
 */
    goto __pyx_L4;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":571
 *             d = y - self.length
 *         else:
 *             x = sqrt(xx) - self.r0             # <<<<<<<<<<<<<<
 *             # y >= 0 always at this point (and if outside, not in the cylinder extending through the small end face)
 *             ry = x * self.side1 + y * self.side2
 */
  /*else*/ {
    __pyx_v_x = (sqrt(__pyx_v_xx) - __pyx_v_self->r0);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":573
 *             x = sqrt(xx) - self.r0
 *             # y >= 0 always at this point (and if outside, not in the cylinder extending through the small end face)
 *             ry = x * self.side1 + y * self.side2             # <<<<<<<<<<<<<<
 *             if ry < 0:
 *                 # if ry < 0 (and y > 0 from above), then outside the cone
 */
    __pyx_v_ry = ((__pyx_v_x * __pyx_v_self->side1) + (__pyx_v_y * __pyx_v_self->side2));

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":574
 *             # y >= 0 always at this point (and if outside, not in the cylinder extending through the small end face)
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:             # <<<<<<<<<<<<<<
 *                 # if ry < 0 (and y > 0 from above), then outside the cone
 *                 d = sqrt(x * x + yy)
 */
    __pyx_t_13 = ((__pyx_v_ry < 0.0) != 0);
    if (__pyx_t_13) {

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":576
 *             if ry < 0:
 *                 # if ry < 0 (and y > 0 from above), then outside the cone
 *                 d = sqrt(x * x + yy)             # <<<<<<<<<<<<<<
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 */
      __pyx_v_d = sqrt(((__pyx_v_x * __pyx_v_x) + __pyx_v_yy));

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":574
 *             # y >= 0 always at this point (and if outside, not in the cylinder extending through the small end face)
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:             # <<<<<<<<<<<<<<
 *                 # if ry < 0 (and y > 0 from above), then outside the cone
 *                 d = sqrt(x * x + yy)
 */
      goto __pyx_L8;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":578
 *                 d = sqrt(x * x + yy)
 *             else:
 *                 rx = x * self.side2 - y * self.side1             # <<<<<<<<<<<<<<
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength
 */
    /*else*/ {
      __pyx_v_rx = ((__pyx_v_x * __pyx_v_self->side2) - (__pyx_v_y * __pyx_v_self->side1));

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":579
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:             # <<<<<<<<<<<<<<
 *                     ry -= self.conelength
 *                     d = sqrt(rx * rx + ry * ry)
 */
      __pyx_t_14 = ((__pyx_v_ry > __pyx_v_self->conelength) != 0);
      if (__pyx_t_14) {
      } else {
        __pyx_t_13 = __pyx_t_14;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_y > __pyx_v_self->length) != 0);
      __pyx_t_13 = __pyx_t_14;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_13) {

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":580
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength             # <<<<<<<<<<<<<<
 *                     d = sqrt(rx * rx + ry * ry)
 *                 else:
 */
        __pyx_v_ry = (__pyx_v_ry - __pyx_v_self->conelength);

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":581
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength
 *                     d = sqrt(rx * rx + ry * ry)             # <<<<<<<<<<<<<<
 *                 else:
 *                     d = rx
 */
        __pyx_v_d = sqrt(((__pyx_v_rx * __pyx_v_rx) + (__pyx_v_ry * __pyx_v_ry)));

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":579
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:             # <<<<<<<<<<<<<<
 *                     ry -= self.conelength
 *                     d = sqrt(rx * rx + ry * ry)
 */
        goto __pyx_L9;
      }

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":583
 *                     d = sqrt(rx * rx + ry * ry)
 *                 else:
 *                     d = rx             # <<<<<<<<<<<<<<
 *                     if d < 0:
 *                         # end faces could be closer than the cone itself
 */
      /*else*/ {
        __pyx_v_d = __pyx_v_rx;

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":584
 *                 else:
 *                     d = rx
 *                     if d < 0:             # <<<<<<<<<<<<<<
 *                         # end faces could be closer than the cone itself
 *                         d = max(rx, y - self.length)
 */
        __pyx_t_13 = ((__pyx_v_d < 0.0) != 0);
        if (__pyx_t_13) {

          /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":586
 *                     if d < 0:
 *                         # end faces could be closer than the cone itself
 *                         d = max(rx, y - self.length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_12 = (__pyx_v_y - __pyx_v_self->length);
          __pyx_t_11 = __pyx_v_rx;
          if (((__pyx_t_12 > __pyx_t_11) != 0)) {
            __pyx_t_10 = __pyx_t_12;
          } else {
            __pyx_t_10 = __pyx_t_11;
          }
          __pyx_v_d = __pyx_t_10;

          /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":584
 *                 else:
 *                     d = rx
 *                     if d < 0:             # <<<<<<<<<<<<<<
 *                         # end faces could be closer than the cone itself
 *                         d = max(rx, y - self.length)
 */
        }
      }
      __pyx_L9:;
    }
    __pyx_L8:;
  }
  __pyx_L4:;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":590
 * 
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  if (unlikely(__pyx_v_self->clips == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 590, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->clips; __Pyx_INCREF(__pyx_t_1); __pyx_t_15 = 0;
  for (;;) {
    if (__pyx_t_15 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_15); __Pyx_INCREF(__pyx_t_2); __pyx_t_15++; if (unlikely(0 < 0)) __PYX_ERR(0, 590, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_15); __pyx_t_15++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_clip, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":591
 * 
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))             # <<<<<<<<<<<<<<
 *         return d
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_clip, __pyx_n_s_distance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_t_9, __pyx_t_5, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_7 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_8, __pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_8, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_7, 2+__pyx_t_8, __pyx_t_4);
      __pyx_t_9 = 0;
      __pyx_t_5 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_10 = __pyx_v_d;
    __pyx_t_7 = PyFloat_FromDouble(__pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_13 < 0)) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_13) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    } else {
      __pyx_t_4 = PyFloat_FromDouble(__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 591, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __pyx_t_4;
      __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 591, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_d = __pyx_t_10;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":590
 * 
 * 
 *         for clip in self.clips:             # <<<<<<<<<<<<<<
 *             d = max(d, clip.distance(px, py, pz))
 *         return d
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":592
 *         for clip in self.clips:
 *             d = max(d, clip.distance(px, py, pz))
 *         return d             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_d;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":551
 *                      (bisect.bisect_left(xs, self.x1), bisect.bisect_left(ys, self.y1), bisect.bisect_left(zs, self.z1))])
 * 
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:frustumdist
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_clip);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_15distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_15distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 551, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 551, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 551, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_14distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_14distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":596
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_17overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_17overlaps_x)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 596, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":597
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_xhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_xlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":596
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_17overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_17overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, 1); __PYX_ERR(0, 596, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_x") < 0)) __PYX_ERR(0, 596, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 596, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_16overlaps_x(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_16overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_x(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":598
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_19overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_19overlaps_y)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 598, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 598, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":599
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_yhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_ylo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":598
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_19overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_19overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, 1); __PYX_ERR(0, 598, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_y") < 0)) __PYX_ERR(0, 598, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 598, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 598, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_18overlaps_y(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_18overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_y(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":600
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_21overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_21overlaps_z)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":601
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_zhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_zlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":600
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_21overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_21overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_z (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, 1); __PYX_ERR(0, 600, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_z") < 0)) __PYX_ERR(0, 600, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 600, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 600, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_20overlaps_z(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_20overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_z(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_22__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_22__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  int __pyx_t_30;
  int __pyx_t_31;
  int __pyx_t_32;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r0, self.r1, self.reversed, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->conelength); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->cx); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->cy); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->cz); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->h); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = __Pyx_PyBool_FromLong(__pyx_v_self->reversed); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyFloat_FromDouble(__pyx_v_self->rra); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble(__pyx_v_self->rrb); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble(__pyx_v_self->side1); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = PyFloat_FromDouble(__pyx_v_self->side2); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_26 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __pyx_t_28 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_t_29 = PyTuple_New(31); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_29, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_29, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_29, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_29, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_29, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_29, 8, __pyx_t_9);
  __Pyx_INCREF(__pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_v_self->clips);
  PyTuple_SET_ITEM(__pyx_t_29, 9, __pyx_v_self->clips);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_29, 10, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_29, 11, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_29, 12, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_29, 13, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_29, 14, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_29, 15, __pyx_t_15);
  __Pyx_INCREF(__pyx_v_self->neighbor_regions);
  __Pyx_GIVEREF(__pyx_v_self->neighbor_regions);
  PyTuple_SET_ITEM(__pyx_t_29, 16, __pyx_v_self->neighbor_regions);
  __Pyx_INCREF(__pyx_v_self->neighbors);
  __Pyx_GIVEREF(__pyx_v_self->neighbors);
  PyTuple_SET_ITEM(__pyx_t_29, 17, __pyx_v_self->neighbors);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_29, 18, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_29, 19, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_29, 20, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_29, 21, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_29, 22, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_29, 23, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_29, 24, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_29, 25, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_29, 26, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_29, 27, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_26);
  PyTuple_SET_ITEM(__pyx_t_29, 28, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_29, 29, __pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_28);
  PyTuple_SET_ITEM(__pyx_t_29, 30, __pyx_t_28);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_29);
  __pyx_t_29 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r0, self.r1, self.reversed, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_29 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __pyx_v__dict = __pyx_t_29;
  __pyx_t_29 = 0;

  /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r0, self.r1, self.reversed, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_30 = (__pyx_v__dict != Py_None);
  __pyx_t_31 = (__pyx_t_30 != 0);
  if (__pyx_t_31) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_29 = PyTuple_New(1); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_v__dict);
    __pyx_t_28 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_29); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_28));
    __pyx_t_28 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.clips, self.conelength, self.cx, self.cy, self.cz, self.h, self.length, self.neighbor_regions, self.neighbors, self.r0, self.r1, self.reversed, self.rra, self.rrb, self.side1, self.side2, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, None), state
 */
  /*else*/ {
    __pyx_t_30 = (__pyx_v_self->clips != ((PyObject*)Py_None));
    __pyx_t_32 = (__pyx_t_30 != 0);
    if (!__pyx_t_32) {
    } else {
      __pyx_t_31 = __pyx_t_32;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_32 = (__pyx_v_self->neighbor_regions != ((PyObject*)Py_None));
    __pyx_t_30 = (__pyx_t_32 != 0);
    if (!__pyx_t_30) {
    } else {
      __pyx_t_31 = __pyx_t_30;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_30 = (__pyx_v_self->neighbors != ((PyObject*)Py_None));
    __pyx_t_32 = (__pyx_t_30 != 0);
    __pyx_t_31 = __pyx_t_32;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_31;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, None), state
 *     else:
 */
  __pyx_t_31 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_31) {

    /* "(tree fragment)":13
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_28, __pyx_n_s_pyx_unpickle_Cone); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __pyx_t_29 = PyTuple_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_29, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_153540018);
    __Pyx_GIVEREF(__pyx_int_153540018);
    PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_int_153540018);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_29, 2, Py_None);
    __pyx_t_27 = PyTuple_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_28);
    PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_28);
    __Pyx_GIVEREF(__pyx_t_29);
    PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_29);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_27, 2, __pyx_v_state);
    __pyx_t_28 = 0;
    __pyx_t_29 = 0;
    __pyx_r = __pyx_t_27;
    __pyx_t_27 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.clips is not None or self.neighbor_regions is not None or self.neighbors is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, None), state
 *     else:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Cone__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_27, __pyx_n_s_pyx_unpickle_Cone); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_29 = PyTuple_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_29, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_153540018);
    __Pyx_GIVEREF(__pyx_int_153540018);
    PyTuple_SET_ITEM(__pyx_t_29, 1, __pyx_int_153540018);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_29, 2, __pyx_v_state);
    __pyx_t_28 = PyTuple_New(2); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_GIVEREF(__pyx_t_27);
    PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_29);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_t_29);
    __pyx_t_27 = 0;
    __pyx_t_29 = 0;
    __pyx_r = __pyx_t_28;
    __pyx_t_28 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Cone__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_24__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_24__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Cone__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cone__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Cone, (type(self), 0x926d5b2, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Cone__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.Cone.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":608
 *     cdef double length, _xlo, _xhi, _ylo, _yhi, _zlo, _zhi, sx, sy, sz, planed
 *     property _x0:
 *         def __get__(self): return self.x0             # <<<<<<<<<<<<<<
 *     property _y0:
 *         def __get__(self): return self.y0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone._x0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":610
 *         def __get__(self): return self.x0
 *     property _y0:
 *         def __get__(self): return self.y0             # <<<<<<<<<<<<<<
 *     property _z0:
 *         def __get__(self): return self.z0
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone._y0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":612
 *         def __get__(self): return self.y0
 *     property _z0:
 *         def __get__(self): return self.z0             # <<<<<<<<<<<<<<
 * 
 *     property xlo:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone._z0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":615
 * 
 *     property xlo:
 *         def __get__(self): return self._xlo             # <<<<<<<<<<<<<<
 *     property xhi:
 *         def __get__(self): return self._xhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.xlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":617
 *         def __get__(self): return self._xlo
 *     property xhi:
 *         def __get__(self): return self._xhi             # <<<<<<<<<<<<<<
 *     property ylo:
 *         def __get__(self): return self._ylo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.xhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":619
 *         def __get__(self): return self._xhi
 *     property ylo:
 *         def __get__(self): return self._ylo             # <<<<<<<<<<<<<<
 *     property yhi:
 *         def __get__(self): return self._yhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.ylo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":621
 *         def __get__(self): return self._ylo
 *     property yhi:
 *         def __get__(self): return self._yhi             # <<<<<<<<<<<<<<
 *     property zlo:
 *         def __get__(self): return self._zlo
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.yhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":623
 *         def __get__(self): return self._yhi
 *     property zlo:
 *         def __get__(self): return self._zlo             # <<<<<<<<<<<<<<
 *     property zhi:
 *         def __get__(self): return self._zhi
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.zlo.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":625
 *         def __get__(self): return self._zlo
 *     property zhi:
 *         def __get__(self): return self._zhi             # <<<<<<<<<<<<<<
 *     property primitives:
 *         def __get__(self): return [self]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.zhi.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":627
 *         def __get__(self): return self._zhi
 *     property primitives:
 *         def __get__(self): return [self]             # <<<<<<<<<<<<<<
 * 
 *     def get_clip(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives___get__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives___get__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.primitives.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":629
 *         def __get__(self): return [self]
 * 
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         # TODO: change this if ever expand to allow clipping
 *         return []
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_1get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_1get_clip(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_clip (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_get_clip(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_get_clip(CYTHON_UNUSED struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_clip", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":631
 *     def get_clip(self):
 *         # TODO: change this if ever expand to allow clipping
 *         return []             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":629
 *         def __get__(self): return [self]
 * 
 *     def get_clip(self):             # <<<<<<<<<<<<<<
 *         # TODO: change this if ever expand to allow clipping
 *         return []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.get_clip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":634
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2):             # <<<<<<<<<<<<<<
 *         """(x2, y2, z2) denotes point to skew (x1, y1, z1) to"""
 * 
 */

/* Python wrapper */
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__[] = "(x2, y2, z2) denotes point to skew (x1, y1, z1) to";
#if CYTHON_UPDATE_DESCRIPTOR_DOC
struct wrapperbase __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__;
#endif
static int __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_r0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_r1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  double __pyx_v_z2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_r0,&__pyx_n_s_x1,&__pyx_n_s_y1,&__pyx_n_s_z1,&__pyx_n_s_r1,&__pyx_n_s_x2,&__pyx_n_s_y2,&__pyx_n_s_z2,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 1); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 2); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 3); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 4); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 5); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 6); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_r1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 7); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 8); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 9); __PYX_ERR(0, 634, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, 10); __PYX_ERR(0, 634, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 634, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_r0 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_r0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_x1 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_x1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_y1 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_y1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_z1 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_z1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_r1 = __pyx_PyFloat_AsDouble(values[7]); if (unlikely((__pyx_v_r1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_x2 = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_x2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_y2 = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_y2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
    __pyx_v_z2 = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_z2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 634, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 634, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2) {
  double __pyx_v_rmax;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":638
 * 
 * 
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2 = x2, y2, z2, r1, x2 - (x1 - x0), y2 - (y1 - y0), z2 - (z1 - z0), r0, x0, y0, z0
 * 
 */
  __pyx_t_1 = ((__pyx_v_r1 > __pyx_v_r0) != 0);
  if (__pyx_t_1) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":639
 * 
 *         if r1 > r0:
 *             x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2 = x2, y2, z2, r1, x2 - (x1 - x0), y2 - (y1 - y0), z2 - (z1 - z0), r0, x0, y0, z0             # <<<<<<<<<<<<<<
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 */
    __pyx_t_2 = __pyx_v_x2;
    __pyx_t_3 = __pyx_v_y2;
    __pyx_t_4 = __pyx_v_z2;
    __pyx_t_5 = __pyx_v_r1;
    __pyx_t_6 = (__pyx_v_x2 - (__pyx_v_x1 - __pyx_v_x0));
    __pyx_t_7 = (__pyx_v_y2 - (__pyx_v_y1 - __pyx_v_y0));
    __pyx_t_8 = (__pyx_v_z2 - (__pyx_v_z1 - __pyx_v_z0));
    __pyx_t_9 = __pyx_v_r0;
    __pyx_t_10 = __pyx_v_x0;
    __pyx_t_11 = __pyx_v_y0;
    __pyx_t_12 = __pyx_v_z0;
    __pyx_v_x0 = __pyx_t_2;
    __pyx_v_y0 = __pyx_t_3;
    __pyx_v_z0 = __pyx_t_4;
    __pyx_v_r0 = __pyx_t_5;
    __pyx_v_x1 = __pyx_t_6;
    __pyx_v_y1 = __pyx_t_7;
    __pyx_v_z1 = __pyx_t_8;
    __pyx_v_r1 = __pyx_t_9;
    __pyx_v_x2 = __pyx_t_10;
    __pyx_v_y2 = __pyx_t_11;
    __pyx_v_z2 = __pyx_t_12;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":638
 * 
 * 
 *         if r1 > r0:             # <<<<<<<<<<<<<<
 *             x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2 = x2, y2, z2, r1, x2 - (x1 - x0), y2 - (y1 - y0), z2 - (z1 - z0), r0, x0, y0, z0
 * 
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":641
 *             x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2 = x2, y2, z2, r1, x2 - (x1 - x0), y2 - (y1 - y0), z2 - (z1 - z0), r0, x0, y0, z0
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1             # <<<<<<<<<<<<<<
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 */
  __pyx_t_12 = __pyx_v_x0;
  __pyx_t_11 = __pyx_v_y0;
  __pyx_t_10 = __pyx_v_z0;
  __pyx_t_9 = __pyx_v_r0;
  __pyx_t_8 = __pyx_v_x1;
  __pyx_t_7 = __pyx_v_y1;
  __pyx_t_6 = __pyx_v_z1;
  __pyx_t_5 = __pyx_v_r1;
  __pyx_v_self->x0 = __pyx_t_12;
  __pyx_v_self->y0 = __pyx_t_11;
  __pyx_v_self->z0 = __pyx_t_10;
  __pyx_v_self->r0 = __pyx_t_9;
  __pyx_v_self->x1 = __pyx_t_8;
  __pyx_v_self->y1 = __pyx_t_7;
  __pyx_v_self->z1 = __pyx_t_6;
  __pyx_v_self->r1 = __pyx_t_5;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":642
 * 
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 *         self.rra, self.rrb = r0 * r0, r1 * r1             # <<<<<<<<<<<<<<
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 * 
 */
  __pyx_t_5 = (__pyx_v_r0 * __pyx_v_r0);
  __pyx_t_6 = (__pyx_v_r1 * __pyx_v_r1);
  __pyx_v_self->rra = __pyx_t_5;
  __pyx_v_self->rrb = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":643
 *         self.x0, self.y0, self.z0, self.r0, self.x1, self.y1, self.z1, self.r1 = x0, y0, z0, r0, x1, y1, z1, r1
 *         self.rra, self.rrb = r0 * r0, r1 * r1
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)             # <<<<<<<<<<<<<<
 * 
 *         self.length = sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2 + (z1 - z0) ** 2)
 */
  __pyx_t_6 = (__pyx_v_x1 - __pyx_v_x0);
  __pyx_t_5 = (__pyx_v_y1 - __pyx_v_y0);
  __pyx_t_7 = (__pyx_v_z1 - __pyx_v_z0);
  __pyx_v_self->axisx = __pyx_t_6;
  __pyx_v_self->axisy = __pyx_t_5;
  __pyx_v_self->axisz = __pyx_t_7;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":645
 *         self.axisx, self.axisy, self.axisz = (x1 - x0, y1 - y0, z1 - z0)
 * 
 *         self.length = sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2 + (z1 - z0) ** 2)             # <<<<<<<<<<<<<<
 *         # skew data
 *         self.sx = (x2 - x1) / self.length
 */
  __pyx_v_self->length = sqrt(((pow((__pyx_v_x1 - __pyx_v_x0), 2.0) + pow((__pyx_v_y1 - __pyx_v_y0), 2.0)) + pow((__pyx_v_z1 - __pyx_v_z0), 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":647
 *         self.length = sqrt((x1 - x0) ** 2 + (y1 - y0) ** 2 + (z1 - z0) ** 2)
 *         # skew data
 *         self.sx = (x2 - x1) / self.length             # <<<<<<<<<<<<<<
 *         self.sy = (y2 - y1) / self.length
 *         self.sz = (z2 - z1) / self.length
 */
  __pyx_t_7 = (__pyx_v_x2 - __pyx_v_x1);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 647, __pyx_L1_error)
  }
  __pyx_v_self->sx = (__pyx_t_7 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":648
 *         # skew data
 *         self.sx = (x2 - x1) / self.length
 *         self.sy = (y2 - y1) / self.length             # <<<<<<<<<<<<<<
 *         self.sz = (z2 - z1) / self.length
 * 
 */
  __pyx_t_7 = (__pyx_v_y2 - __pyx_v_y1);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 648, __pyx_L1_error)
  }
  __pyx_v_self->sy = (__pyx_t_7 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":649
 *         self.sx = (x2 - x1) / self.length
 *         self.sy = (y2 - y1) / self.length
 *         self.sz = (z2 - z1) / self.length             # <<<<<<<<<<<<<<
 * 
 *         # normalize the axis
 */
  __pyx_t_7 = (__pyx_v_z2 - __pyx_v_z1);
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 649, __pyx_L1_error)
  }
  __pyx_v_self->sz = (__pyx_t_7 / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":652
 * 
 *         # normalize the axis
 *         self.axisx /= self.length             # <<<<<<<<<<<<<<
 *         self.axisy /= self.length
 *         self.axisz /= self.length
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __pyx_v_self->axisx = (__pyx_v_self->axisx / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":653
 *         # normalize the axis
 *         self.axisx /= self.length
 *         self.axisy /= self.length             # <<<<<<<<<<<<<<
 *         self.axisz /= self.length
 * 
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 653, __pyx_L1_error)
  }
  __pyx_v_self->axisy = (__pyx_v_self->axisy / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":654
 *         self.axisx /= self.length
 *         self.axisy /= self.length
 *         self.axisz /= self.length             # <<<<<<<<<<<<<<
 * 
 *         self.planed = - (self.axisx * x0 + self.axisy * y0 + self.axisz * z0)
 */
  if (unlikely(__pyx_v_self->length == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 654, __pyx_L1_error)
  }
  __pyx_v_self->axisz = (__pyx_v_self->axisz / __pyx_v_self->length);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":656
 *         self.axisz /= self.length
 * 
 *         self.planed = - (self.axisx * x0 + self.axisy * y0 + self.axisz * z0)             # <<<<<<<<<<<<<<
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 */
  __pyx_v_self->planed = (-(((__pyx_v_self->axisx * __pyx_v_x0) + (__pyx_v_self->axisy * __pyx_v_y0)) + (__pyx_v_self->axisz * __pyx_v_z0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":658
 *         self.planed = - (self.axisx * x0 + self.axisy * y0 + self.axisz * z0)
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)             # <<<<<<<<<<<<<<
 *         self.side1 = (r1 - r0) / self.conelength
 *         self.side2 = self.length / self.conelength
 */
  __pyx_v_self->conelength = sqrt((pow((__pyx_v_r1 - __pyx_v_r0), 2.0) + pow(__pyx_v_self->length, 2.0)));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":659
 * 
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 *         self.side1 = (r1 - r0) / self.conelength             # <<<<<<<<<<<<<<
 *         self.side2 = self.length / self.conelength
 *         cdef double rmax = max(r0, r1)
 */
  __pyx_t_7 = (__pyx_v_r1 - __pyx_v_r0);
  if (unlikely(__pyx_v_self->conelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_v_self->side1 = (__pyx_t_7 / __pyx_v_self->conelength);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":660
 *         self.conelength = sqrt((r1 - r0) ** 2 + self.length ** 2)
 *         self.side1 = (r1 - r0) / self.conelength
 *         self.side2 = self.length / self.conelength             # <<<<<<<<<<<<<<
 *         cdef double rmax = max(r0, r1)
 * 
 */
  if (unlikely(__pyx_v_self->conelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 660, __pyx_L1_error)
  }
  __pyx_v_self->side2 = (__pyx_v_self->length / __pyx_v_self->conelength);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":661
 *         self.side1 = (r1 - r0) / self.conelength
 *         self.side2 = self.length / self.conelength
 *         cdef double rmax = max(r0, r1)             # <<<<<<<<<<<<<<
 * 
 *         self._xlo = min(x0 - rmax, x2 - rmax)
 */
  __pyx_t_7 = __pyx_v_r1;
  __pyx_t_5 = __pyx_v_r0;
  if (((__pyx_t_7 > __pyx_t_5) != 0)) {
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = __pyx_t_5;
  }
  __pyx_v_rmax = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":663
 *         cdef double rmax = max(r0, r1)
 * 
 *         self._xlo = min(x0 - rmax, x2 - rmax)             # <<<<<<<<<<<<<<
 *         self._xhi = max(x0 + rmax, x2 + rmax)
 *         self._ylo = min(y0 - rmax, y2 - rmax)
 */
  __pyx_t_6 = (__pyx_v_x2 - __pyx_v_rmax);
  __pyx_t_7 = (__pyx_v_x0 - __pyx_v_rmax);
  if (((__pyx_t_6 < __pyx_t_7) != 0)) {
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = __pyx_t_7;
  }
  __pyx_v_self->_xlo = __pyx_t_5;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":664
 * 
 *         self._xlo = min(x0 - rmax, x2 - rmax)
 *         self._xhi = max(x0 + rmax, x2 + rmax)             # <<<<<<<<<<<<<<
 *         self._ylo = min(y0 - rmax, y2 - rmax)
 *         self._yhi = max(y0 + rmax, y2 + rmax)
 */
  __pyx_t_5 = (__pyx_v_x2 + __pyx_v_rmax);
  __pyx_t_6 = (__pyx_v_x0 + __pyx_v_rmax);
  if (((__pyx_t_5 > __pyx_t_6) != 0)) {
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_6;
  }
  __pyx_v_self->_xhi = __pyx_t_7;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":665
 *         self._xlo = min(x0 - rmax, x2 - rmax)
 *         self._xhi = max(x0 + rmax, x2 + rmax)
 *         self._ylo = min(y0 - rmax, y2 - rmax)             # <<<<<<<<<<<<<<
 *         self._yhi = max(y0 + rmax, y2 + rmax)
 *         self._zlo = min(z0 - rmax, z2 - rmax)
 */
  __pyx_t_7 = (__pyx_v_y2 - __pyx_v_rmax);
  __pyx_t_5 = (__pyx_v_y0 - __pyx_v_rmax);
  if (((__pyx_t_7 < __pyx_t_5) != 0)) {
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = __pyx_t_5;
  }
  __pyx_v_self->_ylo = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":666
 *         self._xhi = max(x0 + rmax, x2 + rmax)
 *         self._ylo = min(y0 - rmax, y2 - rmax)
 *         self._yhi = max(y0 + rmax, y2 + rmax)             # <<<<<<<<<<<<<<
 *         self._zlo = min(z0 - rmax, z2 - rmax)
 *         self._zhi = max(z0 + rmax, z2 + rmax)
 */
  __pyx_t_6 = (__pyx_v_y2 + __pyx_v_rmax);
  __pyx_t_7 = (__pyx_v_y0 + __pyx_v_rmax);
  if (((__pyx_t_6 > __pyx_t_7) != 0)) {
    __pyx_t_5 = __pyx_t_6;
  } else {
    __pyx_t_5 = __pyx_t_7;
  }
  __pyx_v_self->_yhi = __pyx_t_5;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":667
 *         self._ylo = min(y0 - rmax, y2 - rmax)
 *         self._yhi = max(y0 + rmax, y2 + rmax)
 *         self._zlo = min(z0 - rmax, z2 - rmax)             # <<<<<<<<<<<<<<
 *         self._zhi = max(z0 + rmax, z2 + rmax)
 * 
 */
  __pyx_t_5 = (__pyx_v_z2 - __pyx_v_rmax);
  __pyx_t_6 = (__pyx_v_z0 - __pyx_v_rmax);
  if (((__pyx_t_5 < __pyx_t_6) != 0)) {
    __pyx_t_7 = __pyx_t_5;
  } else {
    __pyx_t_7 = __pyx_t_6;
  }
  __pyx_v_self->_zlo = __pyx_t_7;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":668
 *         self._yhi = max(y0 + rmax, y2 + rmax)
 *         self._zlo = min(z0 - rmax, z2 - rmax)
 *         self._zhi = max(z0 + rmax, z2 + rmax)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = (__pyx_v_z2 + __pyx_v_rmax);
  __pyx_t_5 = (__pyx_v_z0 + __pyx_v_rmax);
  if (((__pyx_t_7 > __pyx_t_5) != 0)) {
    __pyx_t_6 = __pyx_t_7;
  } else {
    __pyx_t_6 = __pyx_t_5;
  }
  __pyx_v_self->_zhi = __pyx_t_6;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":634
 * 
 * 
 *     def __init__(self, double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2):             # <<<<<<<<<<<<<<
 *         """(x2, y2, z2) denotes point to skew (x1, y1, z1) to"""
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":672
 * 
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0))]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_5starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_5starting_points(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_xs = 0;
  PyObject *__pyx_v_ys = 0;
  PyObject *__pyx_v_zs = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("starting_points (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_xs,&__pyx_n_s_ys,&__pyx_n_s_zs,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_xs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ys)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 1); __PYX_ERR(0, 672, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_zs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, 2); __PYX_ERR(0, 672, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "starting_points") < 0)) __PYX_ERR(0, 672, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_xs = values[0];
    __pyx_v_ys = values[1];
    __pyx_v_zs = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("starting_points", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 672, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_4starting_points(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_xs, __pyx_v_ys, __pyx_v_zs);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_4starting_points(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, PyObject *__pyx_v_xs, PyObject *__pyx_v_ys, PyObject *__pyx_v_zs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("starting_points", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":674
 *     def starting_points(self, xs, ys, zs):
 *         # TODO: this only works right if the entire object is inside the domain
 *         return [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0))]             # <<<<<<<<<<<<<<
 *         #return sum([c.starting_points(xs, ys, zs) for c in self.clips], [(bisect.bisect_left(xs, self._x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0))])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_bisect); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_xs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_xs, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_xs);
    __Pyx_GIVEREF(__pyx_v_xs);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_xs);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_bisect); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ys, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_ys, __pyx_t_6};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_ys);
    __Pyx_GIVEREF(__pyx_v_ys);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_5, __pyx_v_ys);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_5, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_bisect); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_bisect_left); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_zs, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_zs, __pyx_t_7};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_zs);
    __Pyx_GIVEREF(__pyx_v_zs);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_v_zs);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":672
 * 
 * 
 *     def starting_points(self, xs, ys, zs):             # <<<<<<<<<<<<<<
 *         # TODO: this only works right if the entire object is inside the domain
 *         return [(bisect.bisect_left(xs, self.x0), bisect.bisect_left(ys, self.y0), bisect.bisect_left(zs, self.z0))]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.starting_points", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":678
 * 
 *     # TODO: allow clipping?
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:shearfrustdist
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, dist
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_7distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static double __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz, int __pyx_skip_dispatch) {
  double __pyx_v_nx;
  double __pyx_v_ny;
  double __pyx_v_nz;
  double __pyx_v_y;
  double __pyx_v_yy;
  double __pyx_v_xx;
  double __pyx_v_ry;
  double __pyx_v_rx;
  double __pyx_v_dist;
  double __pyx_v_x;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_7distance)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_px); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_py); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_6 = __pyx_t_1; __pyx_t_7 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
          PyObject *__pyx_temp[4] = {__pyx_t_7, __pyx_t_3, __pyx_t_4, __pyx_t_5};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        } else
        #endif
        {
          __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          if (__pyx_t_7) {
            __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_5);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_10;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":683
 * 
 *         # compute signed distance of point to plane (note: axis vector has length 1)
 *         dist = px * self.axisx + py * self.axisy + pz * self.axisz + self.planed             # <<<<<<<<<<<<<<
 * 
 *         # deskew
 */
  __pyx_v_dist = ((((__pyx_v_px * __pyx_v_self->axisx) + (__pyx_v_py * __pyx_v_self->axisy)) + (__pyx_v_pz * __pyx_v_self->axisz)) + __pyx_v_self->planed);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":686
 * 
 *         # deskew
 *         px -= dist * self.sx             # <<<<<<<<<<<<<<
 *         py -= dist * self.sy
 *         pz -= dist * self.sz
 */
  __pyx_v_px = (__pyx_v_px - (__pyx_v_dist * __pyx_v_self->sx));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":687
 *         # deskew
 *         px -= dist * self.sx
 *         py -= dist * self.sy             # <<<<<<<<<<<<<<
 *         pz -= dist * self.sz
 * 
 */
  __pyx_v_py = (__pyx_v_py - (__pyx_v_dist * __pyx_v_self->sy));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":688
 *         px -= dist * self.sx
 *         py -= dist * self.sy
 *         pz -= dist * self.sz             # <<<<<<<<<<<<<<
 * 
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 */
  __pyx_v_pz = (__pyx_v_pz - (__pyx_v_dist * __pyx_v_self->sz));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":690
 *         pz -= dist * self.sz
 * 
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0             # <<<<<<<<<<<<<<
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y
 */
  __pyx_t_10 = (__pyx_v_px - __pyx_v_self->x0);
  __pyx_t_11 = (__pyx_v_py - __pyx_v_self->y0);
  __pyx_t_12 = (__pyx_v_pz - __pyx_v_self->z0);
  __pyx_v_nx = __pyx_t_10;
  __pyx_v_ny = __pyx_t_11;
  __pyx_v_nz = __pyx_t_12;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":691
 * 
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz             # <<<<<<<<<<<<<<
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy
 */
  __pyx_v_y = (((__pyx_v_nx * __pyx_v_self->axisx) + (__pyx_v_ny * __pyx_v_self->axisy)) + (__pyx_v_nz * __pyx_v_self->axisz));

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":692
 *         nx, ny, nz = px - self.x0, py - self.y0, pz - self.z0
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y             # <<<<<<<<<<<<<<
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 */
  __pyx_v_yy = (__pyx_v_y * __pyx_v_y);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":693
 *         y = nx * self.axisx + ny * self.axisy + nz * self.axisz
 *         yy = y * y
 *         xx = nx * nx + ny * ny + nz * nz - yy             # <<<<<<<<<<<<<<
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0
 */
  __pyx_v_xx = ((((__pyx_v_nx * __pyx_v_nx) + (__pyx_v_ny * __pyx_v_ny)) + (__pyx_v_nz * __pyx_v_nz)) - __pyx_v_yy);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":695
 *         xx = nx * nx + ny * ny + nz * nz - yy
 *         # in principle, xx >= 0, however roundoff errors may cause trouble
 *         if xx < 0: xx = 0             # <<<<<<<<<<<<<<
 * 
 *         if y < 0:
 */
  __pyx_t_13 = ((__pyx_v_xx < 0.0) != 0);
  if (__pyx_t_13) {
    __pyx_v_xx = 0.0;
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":697
 *         if xx < 0: xx = 0
 * 
 *         if y < 0:             # <<<<<<<<<<<<<<
 *             if xx < self.rra:
 *                 return -y
 */
  __pyx_t_13 = ((__pyx_v_y < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":698
 * 
 *         if y < 0:
 *             if xx < self.rra:             # <<<<<<<<<<<<<<
 *                 return -y
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_xx < __pyx_v_self->rra) != 0);
    if (__pyx_t_13) {

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":699
 *         if y < 0:
 *             if xx < self.rra:
 *                 return -y             # <<<<<<<<<<<<<<
 *             else:
 *                 x = sqrt(xx) - self.r0
 */
      __pyx_r = (-__pyx_v_y);
      goto __pyx_L0;

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":698
 * 
 *         if y < 0:
 *             if xx < self.rra:             # <<<<<<<<<<<<<<
 *                 return -y
 *             else:
 */
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":701
 *                 return -y
 *             else:
 *                 x = sqrt(xx) - self.r0             # <<<<<<<<<<<<<<
 *                 return sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:
 */
    /*else*/ {
      __pyx_v_x = (sqrt(__pyx_v_xx) - __pyx_v_self->r0);

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":702
 *             else:
 *                 x = sqrt(xx) - self.r0
 *                 return sqrt(x * x + yy)             # <<<<<<<<<<<<<<
 *         elif xx < self.rrb and y > self.length:
 *             return y - self.length
 */
      __pyx_r = sqrt(((__pyx_v_x * __pyx_v_x) + __pyx_v_yy));
      goto __pyx_L0;
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":697
 *         if xx < 0: xx = 0
 * 
 *         if y < 0:             # <<<<<<<<<<<<<<
 *             if xx < self.rra:
 *                 return -y
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":703
 *                 x = sqrt(xx) - self.r0
 *                 return sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:             # <<<<<<<<<<<<<<
 *             return y - self.length
 *         else:
 */
  __pyx_t_14 = ((__pyx_v_xx < __pyx_v_self->rrb) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_13 = __pyx_t_14;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_y > __pyx_v_self->length) != 0);
  __pyx_t_13 = __pyx_t_14;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":704
 *                 return sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:
 *             return y - self.length             # <<<<<<<<<<<<<<
 *         else:
 *             x = sqrt(xx) - self.r0
 */
    __pyx_r = (__pyx_v_y - __pyx_v_self->length);
    goto __pyx_L0;

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":703
 *                 x = sqrt(xx) - self.r0
 *                 return sqrt(x * x + yy)
 *         elif xx < self.rrb and y > self.length:             # <<<<<<<<<<<<<<
 *             return y - self.length
 *         else:
 */
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":706
 *             return y - self.length
 *         else:
 *             x = sqrt(xx) - self.r0             # <<<<<<<<<<<<<<
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:
 */
  /*else*/ {
    __pyx_v_x = (sqrt(__pyx_v_xx) - __pyx_v_self->r0);

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":707
 *         else:
 *             x = sqrt(xx) - self.r0
 *             ry = x * self.side1 + y * self.side2             # <<<<<<<<<<<<<<
 *             if ry < 0:
 *                 return sqrt(x * x + yy)
 */
    __pyx_v_ry = ((__pyx_v_x * __pyx_v_self->side1) + (__pyx_v_y * __pyx_v_self->side2));

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":708
 *             x = sqrt(xx) - self.r0
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:             # <<<<<<<<<<<<<<
 *                 return sqrt(x * x + yy)
 *             else:
 */
    __pyx_t_13 = ((__pyx_v_ry < 0.0) != 0);
    if (__pyx_t_13) {

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":709
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:
 *                 return sqrt(x * x + yy)             # <<<<<<<<<<<<<<
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 */
      __pyx_r = sqrt(((__pyx_v_x * __pyx_v_x) + __pyx_v_yy));
      goto __pyx_L0;

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":708
 *             x = sqrt(xx) - self.r0
 *             ry = x * self.side1 + y * self.side2
 *             if ry < 0:             # <<<<<<<<<<<<<<
 *                 return sqrt(x * x + yy)
 *             else:
 */
    }

    /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":711
 *                 return sqrt(x * x + yy)
 *             else:
 *                 rx = x * self.side2 - y * self.side1             # <<<<<<<<<<<<<<
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength
 */
    /*else*/ {
      __pyx_v_rx = ((__pyx_v_x * __pyx_v_self->side2) - (__pyx_v_y * __pyx_v_self->side1));

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":712
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:             # <<<<<<<<<<<<<<
 *                     ry -= self.conelength
 *                     return sqrt(rx * rx + ry * ry)
 */
      __pyx_t_14 = ((__pyx_v_ry > __pyx_v_self->conelength) != 0);
      if (__pyx_t_14) {
      } else {
        __pyx_t_13 = __pyx_t_14;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_14 = ((__pyx_v_y > __pyx_v_self->length) != 0);
      __pyx_t_13 = __pyx_t_14;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_13) {

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":713
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength             # <<<<<<<<<<<<<<
 *                     return sqrt(rx * rx + ry * ry)
 *                 else:
 */
        __pyx_v_ry = (__pyx_v_ry - __pyx_v_self->conelength);

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":714
 *                 if ry > self.conelength and y > self.length:
 *                     ry -= self.conelength
 *                     return sqrt(rx * rx + ry * ry)             # <<<<<<<<<<<<<<
 *                 else:
 *                     if rx >= 0:
 */
        __pyx_r = sqrt(((__pyx_v_rx * __pyx_v_rx) + (__pyx_v_ry * __pyx_v_ry)));
        goto __pyx_L0;

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":712
 *             else:
 *                 rx = x * self.side2 - y * self.side1
 *                 if ry > self.conelength and y > self.length:             # <<<<<<<<<<<<<<
 *                     ry -= self.conelength
 *                     return sqrt(rx * rx + ry * ry)
 */
      }

      /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":716
 *                     return sqrt(rx * rx + ry * ry)
 *                 else:
 *                     if rx >= 0:             # <<<<<<<<<<<<<<
 *                         return rx
 *                     else:
 */
      /*else*/ {
        __pyx_t_13 = ((__pyx_v_rx >= 0.0) != 0);
        if (__pyx_t_13) {

          /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":717
 *                 else:
 *                     if rx >= 0:
 *                         return rx             # <<<<<<<<<<<<<<
 *                     else:
 *                         return max(rx, y - self.length)
 */
          __pyx_r = __pyx_v_rx;
          goto __pyx_L0;

          /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":716
 *                     return sqrt(rx * rx + ry * ry)
 *                 else:
 *                     if rx >= 0:             # <<<<<<<<<<<<<<
 *                         return rx
 *                     else:
 */
        }

        /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":719
 *                         return rx
 *                     else:
 *                         return max(rx, y - self.length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_t_12 = (__pyx_v_y - __pyx_v_self->length);
          __pyx_t_11 = __pyx_v_rx;
          if (((__pyx_t_12 > __pyx_t_11) != 0)) {
            __pyx_t_10 = __pyx_t_12;
          } else {
            __pyx_t_10 = __pyx_t_11;
          }
          __pyx_r = __pyx_t_10;
          goto __pyx_L0;
        }
      }
    }
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":678
 * 
 *     # TODO: allow clipping?
 *     cpdef double distance(self, double px, double py, double pz):             # <<<<<<<<<<<<<<
 *         # CTNG:shearfrustdist
 *         cdef double nx, ny, nz, y, yy, xx, ry, rx, dist
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_7distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_7distance(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_px;
  double __pyx_v_py;
  double __pyx_v_pz;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 1); __PYX_ERR(0, 678, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, 2); __PYX_ERR(0, 678, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "distance") < 0)) __PYX_ERR(0, 678, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_px = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_px == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L3_error)
    __pyx_v_py = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_py == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L3_error)
    __pyx_v_pz = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_pz == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 678, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("distance", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 678, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_6distance(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_px, __pyx_v_py, __pyx_v_pz);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_6distance(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_px, double __pyx_v_py, double __pyx_v_pz) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_distance(__pyx_v_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":723
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_9overlaps_x)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":724
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_xhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_xlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":723
 * 
 * 
 *     cpdef bint overlaps_x(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_9overlaps_x(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_x (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, 1); __PYX_ERR(0, 723, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_x") < 0)) __PYX_ERR(0, 723, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_x", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 723, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_8overlaps_x(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_8overlaps_x(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_x", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_x(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_x", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":725
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_11overlaps_y)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":726
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo             # <<<<<<<<<<<<<<
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_yhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_ylo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":725
 *     cpdef bint overlaps_x(self, double lo, double hi):
 *         return lo <= self._xhi and hi >= self._xlo
 *     cpdef bint overlaps_y(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_11overlaps_y(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_y (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, 1); __PYX_ERR(0, 725, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_y") < 0)) __PYX_ERR(0, 725, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_y", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 725, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10overlaps_y(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10overlaps_y(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_y", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_y(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_y", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":727
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 */

static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely((Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0) || (Py_TYPE(((PyObject *)__pyx_v_self))->tp_flags & (Py_TPFLAGS_IS_ABSTRACT | Py_TPFLAGS_HEAPTYPE)))) {
    #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    static PY_UINT64_T __pyx_tp_dict_version = __PYX_DICT_VERSION_INIT, __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
    if (unlikely(!__Pyx_object_dict_version_matches(((PyObject *)__pyx_v_self), __pyx_tp_dict_version, __pyx_obj_dict_version))) {
      PY_UINT64_T __pyx_type_dict_guard = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      #endif
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_overlaps_z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)(void*)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_13overlaps_z)) {
        __pyx_t_3 = PyFloat_FromDouble(__pyx_v_lo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_hi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_5 = __pyx_t_1; __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        #if CYTHON_FAST_PYCALL
        if (PyFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        #if CYTHON_FAST_PYCCALL
        if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
          PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_3, __pyx_t_4};
          __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else
        #endif
        {
          __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 727, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (__pyx_t_6) {
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
          }
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
          __pyx_t_3 = 0;
          __pyx_t_4 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_r = __pyx_t_9;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L0;
      }
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
      __pyx_tp_dict_version = __Pyx_get_tp_dict_version(((PyObject *)__pyx_v_self));
      __pyx_obj_dict_version = __Pyx_get_object_dict_version(((PyObject *)__pyx_v_self));
      if (unlikely(__pyx_type_dict_guard != __pyx_tp_dict_version)) {
        __pyx_tp_dict_version = __pyx_obj_dict_version = __PYX_DICT_VERSION_INIT;
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      #if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
    }
    #endif
  }

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":728
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):
 *         return lo <= self._zhi and hi >= self._zlo             # <<<<<<<<<<<<<<
 */
  __pyx_t_10 = ((__pyx_v_lo <= __pyx_v_self->_zhi) != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L3_bool_binop_done;
  }
  __pyx_t_10 = ((__pyx_v_hi >= __pyx_v_self->_zlo) != 0);
  __pyx_t_9 = __pyx_t_10;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_9;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":727
 *     cpdef bint overlaps_y(self, double lo, double hi):
 *         return lo <= self._yhi and hi >= self._ylo
 *     cpdef bint overlaps_z(self, double lo, double hi):             # <<<<<<<<<<<<<<
 *         return lo <= self._zhi and hi >= self._zlo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_13overlaps_z(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_lo;
  double __pyx_v_hi;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("overlaps_z (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_lo,&__pyx_n_s_hi,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_lo)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hi)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, 1); __PYX_ERR(0, 727, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "overlaps_z") < 0)) __PYX_ERR(0, 727, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_lo = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_lo == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
    __pyx_v_hi = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_hi == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("overlaps_z", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 727, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_12overlaps_z(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), __pyx_v_lo, __pyx_v_hi);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_12overlaps_z(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, double __pyx_v_lo, double __pyx_v_hi) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("overlaps_z", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_z(__pyx_v_self, __pyx_v_lo, __pyx_v_hi, 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.overlaps_z", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_14__reduce_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_14__reduce_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_t_29;
  int __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.conelength, self.length, self.planed, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.sx, self.sy, self.sz, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_xhi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_xlo); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->_yhi); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_ylo); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->_zhi); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_self->_zlo); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->axisx); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_self->axisy); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_self->axisz); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->conelength); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_self->length); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_v_self->planed); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_self->r0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = PyFloat_FromDouble(__pyx_v_self->r1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyFloat_FromDouble(__pyx_v_self->rra); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_v_self->rrb); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(__pyx_v_self->side1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble(__pyx_v_self->side2); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = PyFloat_FromDouble(__pyx_v_self->sx); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_20 = PyFloat_FromDouble(__pyx_v_self->sy); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyFloat_FromDouble(__pyx_v_self->sz); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_22 = PyFloat_FromDouble(__pyx_v_self->x0); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_23 = PyFloat_FromDouble(__pyx_v_self->x1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble(__pyx_v_self->y0); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_25 = PyFloat_FromDouble(__pyx_v_self->y1); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_26 = PyFloat_FromDouble(__pyx_v_self->z0); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_self->z1); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __pyx_t_28 = PyTuple_New(27); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_28, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_28, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_28, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_28, 5, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_28, 6, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_28, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_28, 8, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_28, 9, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_28, 10, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_28, 11, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_28, 12, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_28, 13, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_28, 14, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_28, 15, __pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  PyTuple_SET_ITEM(__pyx_t_28, 16, __pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  PyTuple_SET_ITEM(__pyx_t_28, 17, __pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_19);
  PyTuple_SET_ITEM(__pyx_t_28, 18, __pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_20);
  PyTuple_SET_ITEM(__pyx_t_28, 19, __pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_21);
  PyTuple_SET_ITEM(__pyx_t_28, 20, __pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_22);
  PyTuple_SET_ITEM(__pyx_t_28, 21, __pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_23);
  PyTuple_SET_ITEM(__pyx_t_28, 22, __pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_24);
  PyTuple_SET_ITEM(__pyx_t_28, 23, __pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_25);
  PyTuple_SET_ITEM(__pyx_t_28, 24, __pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_26);
  PyTuple_SET_ITEM(__pyx_t_28, 25, __pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_27);
  PyTuple_SET_ITEM(__pyx_t_28, 26, __pyx_t_27);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_26 = 0;
  __pyx_t_27 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_28);
  __pyx_t_28 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.conelength, self.length, self.planed, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.sx, self.sy, self.sz, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_28 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __pyx_v__dict = __pyx_t_28;
  __pyx_t_28 = 0;

  /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.conelength, self.length, self.planed, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.sx, self.sy, self.sz, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_29 = (__pyx_v__dict != Py_None);
  __pyx_t_30 = (__pyx_t_29 != 0);
  if (__pyx_t_30) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_28 = PyTuple_New(1); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_v__dict);
    __pyx_t_27 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_28); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_27));
    __pyx_t_27 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = False
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._xhi, self._xlo, self._yhi, self._ylo, self._zhi, self._zlo, self.axisx, self.axisy, self.axisz, self.conelength, self.length, self.planed, self.r0, self.r1, self.rra, self.rrb, self.side1, self.side2, self.sx, self.sy, self.sz, self.x0, self.x1, self.y0, self.y1, self.z0, self.z1)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = False             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, None), state
 */
  /*else*/ {
    __pyx_v_use_setstate = 0;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, None), state
 *     else:
 */
  __pyx_t_30 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_30) {

    /* "(tree fragment)":13
 *         use_setstate = False
 *     if use_setstate:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_27, __pyx_n_s_pyx_unpickle_SkewCone); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_28 = PyTuple_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_28, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_238900401);
    __Pyx_GIVEREF(__pyx_int_238900401);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_int_238900401);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_28, 2, Py_None);
    __pyx_t_26 = PyTuple_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __Pyx_GIVEREF(__pyx_t_27);
    PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_28);
    PyTuple_SET_ITEM(__pyx_t_26, 1, __pyx_t_28);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_26, 2, __pyx_v_state);
    __pyx_t_27 = 0;
    __pyx_t_28 = 0;
    __pyx_r = __pyx_t_26;
    __pyx_t_26 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = False
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, None), state
 *     else:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SkewCone__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_pyx_unpickle_SkewCone); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __pyx_t_28 = PyTuple_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_28);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_28, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_238900401);
    __Pyx_GIVEREF(__pyx_int_238900401);
    PyTuple_SET_ITEM(__pyx_t_28, 1, __pyx_int_238900401);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_28, 2, __pyx_v_state);
    __pyx_t_27 = PyTuple_New(2); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __Pyx_GIVEREF(__pyx_t_26);
    PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_26);
    __Pyx_GIVEREF(__pyx_t_28);
    PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_28);
    __pyx_t_26 = 0;
    __pyx_t_28 = 0;
    __pyx_r = __pyx_t_27;
    __pyx_t_27 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SkewCone__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_16__setstate_cython__(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_16__setstate_cython__(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SkewCone__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SkewCone__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SkewCone, (type(self), 0xe3d54b1, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SkewCone__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.SkewCone.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Complement(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_1__pyx_unpickle_Complement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_1__pyx_unpickle_Complement = {"__pyx_unpickle_Complement", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_1__pyx_unpickle_Complement, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_1__pyx_unpickle_Complement(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Complement (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Complement", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Complement", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Complement") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Complement", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Complement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Complement", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__2, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Complement.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Complement.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Complement.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Complement.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Complement.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 *     __pyx_result = Complement.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Complement(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Complement", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Complement__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Complement__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_2 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 12, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 13, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_5 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Complement__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Union(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_3__pyx_unpickle_Union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_3__pyx_unpickle_Union = {"__pyx_unpickle_Union", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_3__pyx_unpickle_Union, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_3__pyx_unpickle_Union(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Union (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Union", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Union", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Union") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Union", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_2__pyx_unpickle_Union(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_2__pyx_unpickle_Union(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Union", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__3, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Union.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Union.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Union.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Union.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Union.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Union__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Union.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Union(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Union__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Union__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->objects);
  __Pyx_DECREF(__pyx_v___pyx_result->objects);
  __pyx_v___pyx_result->objects = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Union__set_state(<Union> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Union__set_state(Union __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Union__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Intersection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5__pyx_unpickle_Intersection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5__pyx_unpickle_Intersection = {"__pyx_unpickle_Intersection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5__pyx_unpickle_Intersection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5__pyx_unpickle_Intersection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Intersection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Intersection", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Intersection", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Intersection") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Intersection", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Intersection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4__pyx_unpickle_Intersection(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4__pyx_unpickle_Intersection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Intersection", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__3, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Intersection.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Intersection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5891da2, 0xe4cd302, 0xf0f7f39):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Intersection.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Intersection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Intersection.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Intersection__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5891da2, 0xe4cd302, 0xf0f7f39) = (objects))" % __pyx_checksum)
 *     __pyx_result = Intersection.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Intersection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Intersection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Intersection__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Intersection__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->objects);
  __Pyx_DECREF(__pyx_v___pyx_result->objects);
  __pyx_v___pyx_result->objects = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Intersection__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Plane(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_7__pyx_unpickle_Plane(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_7__pyx_unpickle_Plane = {"__pyx_unpickle_Plane", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_7__pyx_unpickle_Plane, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_7__pyx_unpickle_Plane(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Plane (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Plane", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Plane", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Plane") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Plane", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Plane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6__pyx_unpickle_Plane(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6__pyx_unpickle_Plane(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Plane", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9867a54, 0x65dee06, 0x5beb9fe):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__4, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9867a54, 0x65dee06, 0x5beb9fe):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 *     __pyx_result = Plane.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x9867a54, 0x65dee06, 0x5beb9fe):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Plane.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x9867a54, 0x65dee06, 0x5beb9fe):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 *     __pyx_result = Plane.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 *     __pyx_result = Plane.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Plane.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Plane__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x9867a54, 0x65dee06, 0x5beb9fe) = (d, mul, nx, ny, nz, px, py, pz))" % __pyx_checksum)
 *     __pyx_result = Plane.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Plane(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Plane", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Plane__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Plane__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[8])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->d = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->mul = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->nx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ny = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->nz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->px = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->py = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->pz = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[8])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 8) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[8])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[8])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Plane__set_state(<Plane> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Plane__set_state(Plane __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.d = __pyx_state[0]; __pyx_result.mul = __pyx_state[1]; __pyx_result.nx = __pyx_state[2]; __pyx_result.ny = __pyx_state[3]; __pyx_result.nz = __pyx_state[4]; __pyx_result.px = __pyx_state[5]; __pyx_result.py = __pyx_state[6]; __pyx_result.pz = __pyx_state[7]
 *     if len(__pyx_state) > 8 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Plane__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Sphere(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_9__pyx_unpickle_Sphere(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_9__pyx_unpickle_Sphere = {"__pyx_unpickle_Sphere", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_9__pyx_unpickle_Sphere, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_9__pyx_unpickle_Sphere(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Sphere (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Sphere", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Sphere", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Sphere") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Sphere", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Sphere", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8__pyx_unpickle_Sphere(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8__pyx_unpickle_Sphere(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Sphere", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2573da8, 0x5a06a8c, 0xe658afb):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__5, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2573da8, 0x5a06a8c, 0xe658afb):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 *     __pyx_result = Sphere.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x2573da8, 0x5a06a8c, 0xe658afb):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Sphere.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x2573da8, 0x5a06a8c, 0xe658afb):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 *     __pyx_result = Sphere.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 *     __pyx_result = Sphere.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Sphere.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Sphere__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x2573da8, 0x5a06a8c, 0xe658afb) = (_r, _x, _xhi, _xlo, _y, _yhi, _ylo, _z, _zhi, _zlo, clips))" % __pyx_checksum)
 *     __pyx_result = Sphere.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Sphere(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Sphere", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Sphere__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Sphere__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_r = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_x = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_xhi);
  __Pyx_DECREF(__pyx_v___pyx_result->_xhi);
  __pyx_v___pyx_result->_xhi = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_xlo);
  __Pyx_DECREF(__pyx_v___pyx_result->_xlo);
  __pyx_v___pyx_result->_xlo = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_y = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_yhi);
  __Pyx_DECREF(__pyx_v___pyx_result->_yhi);
  __pyx_v___pyx_result->_yhi = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_ylo);
  __Pyx_DECREF(__pyx_v___pyx_result->_ylo);
  __pyx_v___pyx_result->_ylo = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_z = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_zhi);
  __Pyx_DECREF(__pyx_v___pyx_result->_zhi);
  __pyx_v___pyx_result->_zhi = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->_zlo);
  __Pyx_DECREF(__pyx_v___pyx_result->_zlo);
  __pyx_v___pyx_result->_zlo = __pyx_t_1;
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->clips);
  __Pyx_DECREF(__pyx_v___pyx_result->clips);
  __pyx_v___pyx_result->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 11) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[11])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[11])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Sphere__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Cylinder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_11__pyx_unpickle_Cylinder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_11__pyx_unpickle_Cylinder = {"__pyx_unpickle_Cylinder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_11__pyx_unpickle_Cylinder, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_11__pyx_unpickle_Cylinder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cylinder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cylinder", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cylinder", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Cylinder") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cylinder", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cylinder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10__pyx_unpickle_Cylinder(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10__pyx_unpickle_Cylinder(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cylinder", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x00a8c38, 0x1d6bd3d, 0x69c601b):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__6, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x00a8c38, 0x1d6bd3d, 0x69c601b):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cylinder.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x00a8c38, 0x1d6bd3d, 0x69c601b):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Cylinder.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x00a8c38, 0x1d6bd3d, 0x69c601b):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cylinder.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cylinder.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Cylinder.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cylinder__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x00a8c38, 0x1d6bd3d, 0x69c601b) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, cx, cy, cz, h, length, neighbor_regions, neighbors, r, rr, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cylinder.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Cylinder(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cylinder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cylinder__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cylinder__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[25])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_yhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_ylo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->clips);
  __Pyx_DECREF(__pyx_v___pyx_result->clips);
  __pyx_v___pyx_result->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->h = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->neighbor_regions);
  __Pyx_DECREF(__pyx_v___pyx_result->neighbor_regions);
  __pyx_v___pyx_result->neighbor_regions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->neighbors);
  __Pyx_DECREF(__pyx_v___pyx_result->neighbors);
  __pyx_v___pyx_result->neighbors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rr = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z1 = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[25])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 25) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[25])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[25])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Cylinder__set_state(<Cylinder> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Cylinder__set_state(Cylinder __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.cx = __pyx_state[10]; __pyx_result.cy = __pyx_state[11]; __pyx_result.cz = __pyx_state[12]; __pyx_result.h = __pyx_state[13]; __pyx_result.length = __pyx_state[14]; __pyx_result.neighbor_regions = __pyx_state[15]; __pyx_result.neighbors = __pyx_state[16]; __pyx_result.r = __pyx_state[17]; __pyx_result.rr = __pyx_state[18]; __pyx_result.x0 = __pyx_state[19]; __pyx_result.x1 = __pyx_state[20]; __pyx_result.y0 = __pyx_state[21]; __pyx_result.y1 = __pyx_state[22]; __pyx_result.z0 = __pyx_state[23]; __pyx_result.z1 = __pyx_state[24]
 *     if len(__pyx_state) > 25 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cylinder__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SphereCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_13__pyx_unpickle_SphereCone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_13__pyx_unpickle_SphereCone = {"__pyx_unpickle_SphereCone", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_13__pyx_unpickle_SphereCone, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_13__pyx_unpickle_SphereCone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SphereCone (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SphereCone", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SphereCone", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_SphereCone") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SphereCone", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SphereCone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12__pyx_unpickle_SphereCone(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12__pyx_unpickle_SphereCone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SphereCone", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5eefd72, 0xb25677d, 0x2112acb):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__7, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5eefd72, 0xb25677d, 0x2112acb):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SphereCone.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x5eefd72, 0xb25677d, 0x2112acb):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = SphereCone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x5eefd72, 0xb25677d, 0x2112acb):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SphereCone.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SphereCone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = SphereCone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SphereCone__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x5eefd72, 0xb25677d, 0x2112acb) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, ha, hb, hra, hrb, length, r0, r1, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SphereCone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SphereCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SphereCone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SphereCone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SphereCone__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[28])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_yhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_ylo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->clips);
  __Pyx_DECREF(__pyx_v___pyx_result->clips);
  __pyx_v___pyx_result->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->conelength = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->ha = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->hb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->hra = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->hrb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rra = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rrb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z1 = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[28])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 28) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[28])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 28, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[28])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SphereCone__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Cone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_15__pyx_unpickle_Cone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_15__pyx_unpickle_Cone = {"__pyx_unpickle_Cone", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_15__pyx_unpickle_Cone, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_15__pyx_unpickle_Cone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cone (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cone", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cone", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Cone") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Cone", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_14__pyx_unpickle_Cone(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_14__pyx_unpickle_Cone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cone", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x926d5b2, 0xb8e26f6, 0x36c2b77):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__8, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x926d5b2, 0xb8e26f6, 0x36c2b77):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cone.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x926d5b2, 0xb8e26f6, 0x36c2b77):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Cone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x926d5b2, 0xb8e26f6, 0x36c2b77):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cone.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Cone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cone__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0x926d5b2, 0xb8e26f6, 0x36c2b77) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, clips, conelength, cx, cy, cz, h, length, neighbor_regions, neighbors, r0, r1, reversed, rra, rrb, side1, side2, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = Cone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Cone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_Cone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Cone__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[31])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_yhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_ylo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->clips);
  __Pyx_DECREF(__pyx_v___pyx_result->clips);
  __pyx_v___pyx_result->clips = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->conelength = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->cz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->h = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->neighbor_regions);
  __Pyx_DECREF(__pyx_v___pyx_result->neighbor_regions);
  __pyx_v___pyx_result->neighbor_regions = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->neighbors);
  __Pyx_DECREF(__pyx_v___pyx_result->neighbors);
  __pyx_v___pyx_result->neighbors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->reversed = __pyx_t_3;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rra = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rrb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 28, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 29, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 30, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z1 = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[31])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 31) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[31])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 31, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[31])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Cone__set_state(<Cone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Cone__set_state(Cone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.cx = __pyx_state[11]; __pyx_result.cy = __pyx_state[12]; __pyx_result.cz = __pyx_state[13]; __pyx_result.h = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.neighbor_regions = __pyx_state[16]; __pyx_result.neighbors = __pyx_state[17]; __pyx_result.r0 = __pyx_state[18]; __pyx_result.r1 = __pyx_state[19]; __pyx_result.reversed = __pyx_state[20]; __pyx_result.rra = __pyx_state[21]; __pyx_result.rrb = __pyx_state[22]; __pyx_result.side1 = __pyx_state[23]; __pyx_result.side2 = __pyx_state[24]; __pyx_result.x0 = __pyx_state[25]; __pyx_result.x1 = __pyx_state[26]; __pyx_result.y0 = __pyx_state[27]; __pyx_result.y1 = __pyx_state[28]; __pyx_result.z0 = __pyx_state[29]; __pyx_result.z1 = __pyx_state[30]
 *     if len(__pyx_state) > 31 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_Cone__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SkewCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_17__pyx_unpickle_SkewCone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_17__pyx_unpickle_SkewCone = {"__pyx_unpickle_SkewCone", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_17__pyx_unpickle_SkewCone, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_17__pyx_unpickle_SkewCone(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SkewCone (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SkewCone", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SkewCone", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_SkewCone") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SkewCone", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SkewCone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_16__pyx_unpickle_SkewCone(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_18graphicsPrimitives_16__pyx_unpickle_SkewCone(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SkewCone", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3d54b1, 0x1d2a4e2, 0x1e290e5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__9, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3d54b1, 0x1d2a4e2, 0x1e290e5):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SkewCone.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xe3d54b1, 0x1d2a4e2, 0x1e290e5):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = SkewCone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xe3d54b1, 0x1d2a4e2, 0x1e290e5):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SkewCone.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SkewCone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = SkewCone.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SkewCone__set_state(((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xe3d54b1, 0x1d2a4e2, 0x1e290e5) = (_xhi, _xlo, _yhi, _ylo, _zhi, _zlo, axisx, axisy, axisz, conelength, length, planed, r0, r1, rra, rrb, side1, side2, sx, sy, sz, x0, x1, y0, y1, z0, z1))" % __pyx_checksum)
 *     __pyx_result = SkewCone.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SkewCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SkewCone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives___pyx_unpickle_SkewCone__set_state(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SkewCone__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_xlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_yhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_ylo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zhi = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->_zlo = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 7, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 8, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->axisz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 9, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->conelength = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 10, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->length = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 11, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->planed = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 13, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->r1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 14, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rra = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 15, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->rrb = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 16, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->side2 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 18, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sx = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 19, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sy = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 20, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->sz = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 21, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 22, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->x1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 23, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 24, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->y1 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 25, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z0 = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 26, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->z1 = __pyx_t_2;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 27) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[27])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 27, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[27])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SkewCone__set_state(<SkewCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SkewCone__set_state(SkewCone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.conelength = __pyx_state[9]; __pyx_result.length = __pyx_state[10]; __pyx_result.planed = __pyx_state[11]; __pyx_result.r0 = __pyx_state[12]; __pyx_result.r1 = __pyx_state[13]; __pyx_result.rra = __pyx_state[14]; __pyx_result.rrb = __pyx_state[15]; __pyx_result.side1 = __pyx_state[16]; __pyx_result.side2 = __pyx_state[17]; __pyx_result.sx = __pyx_state[18]; __pyx_result.sy = __pyx_state[19]; __pyx_result.sz = __pyx_state[20]; __pyx_result.x0 = __pyx_state[21]; __pyx_result.x1 = __pyx_state[22]; __pyx_result.y0 = __pyx_state[23]; __pyx_result.y1 = __pyx_state[24]; __pyx_result.z0 = __pyx_state[25]; __pyx_result.z1 = __pyx_state[26]
 *     if len(__pyx_state) > 27 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.graphicsPrimitives.__pyx_unpickle_SkewCone__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement[] = {
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_5distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_7starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Complement", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10Complement_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;
  p->objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->objects);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)o;
  if (p->objects) {
    e = (*v)(p->objects, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *)o;
  tmp = ((PyObject*)p->objects);
  p->objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union[] = {
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_5distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_7starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Union", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;
  p->objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->objects);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)o;
  if (p->objects) {
    e = (*v)(p->objects, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *)o;
  tmp = ((PyObject*)p->objects);
  p->objects = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection[] = {
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_5distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_7starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Intersection", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane[] = {
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_5distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_7starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Plane", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;
  p->_xlo = Py_None; Py_INCREF(Py_None);
  p->_xhi = Py_None; Py_INCREF(Py_None);
  p->_ylo = Py_None; Py_INCREF(Py_None);
  p->_yhi = Py_None; Py_INCREF(Py_None);
  p->_zlo = Py_None; Py_INCREF(Py_None);
  p->_zhi = Py_None; Py_INCREF(Py_None);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_xlo);
  Py_CLEAR(p->_xhi);
  Py_CLEAR(p->_ylo);
  Py_CLEAR(p->_yhi);
  Py_CLEAR(p->_zlo);
  Py_CLEAR(p->_zhi);
  Py_CLEAR(p->clips);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)o;
  if (p->_xlo) {
    e = (*v)(p->_xlo, a); if (e) return e;
  }
  if (p->_xhi) {
    e = (*v)(p->_xhi, a); if (e) return e;
  }
  if (p->_ylo) {
    e = (*v)(p->_ylo, a); if (e) return e;
  }
  if (p->_yhi) {
    e = (*v)(p->_yhi, a); if (e) return e;
  }
  if (p->_zlo) {
    e = (*v)(p->_zlo, a); if (e) return e;
  }
  if (p->_zhi) {
    e = (*v)(p->_zhi, a); if (e) return e;
  }
  if (p->clips) {
    e = (*v)(p->clips, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *)o;
  tmp = ((PyObject*)p->_xlo);
  p->_xlo = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_xhi);
  p->_xhi = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_ylo);
  p->_ylo = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_yhi);
  p->_yhi = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_zlo);
  p->_zlo = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_zhi);
  p->_zhi = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->clips);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_10primitives_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_x(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1x_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_y(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1y_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_z(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1z_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_r(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1r_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_xlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_xhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3xhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_ylo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3ylo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_yhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3yhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_zlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_zhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3zhi_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere[] = {
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_5distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_7starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_9overlaps_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_11overlaps_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_z", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_13overlaps_z, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_15set_clip, METH_O, 0},
  {"get_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_17get_clip, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_primitives, 0, (char *)0, 0},
  {(char *)"x", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_x, 0, (char *)0, 0},
  {(char *)"y", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_y, 0, (char *)0, 0},
  {(char *)"z", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_z, 0, (char *)0, 0},
  {(char *)"r", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_r, 0, (char *)0, 0},
  {(char *)"xlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_xlo, 0, (char *)0, 0},
  {(char *)"xhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_xhi, 0, (char *)0, 0},
  {(char *)"ylo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_ylo, 0, (char *)0, 0},
  {(char *)"yhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_yhi, 0, (char *)0, 0},
  {(char *)"zlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_zlo, 0, (char *)0, 0},
  {(char *)"zhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_zhi, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Sphere", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;
  p->neighbors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->neighbor_regions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->neighbors);
  Py_CLEAR(p->clips);
  Py_CLEAR(p->neighbor_regions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)o;
  if (p->neighbors) {
    e = (*v)(p->neighbors, a); if (e) return e;
  }
  if (p->clips) {
    e = (*v)(p->clips, a); if (e) return e;
  }
  if (p->neighbor_regions) {
    e = (*v)(p->neighbor_regions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *)o;
  tmp = ((PyObject*)p->neighbors);
  p->neighbors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->clips);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neighbor_regions);
  p->neighbor_regions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_xlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_xhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3xhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_ylo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3ylo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_yhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3yhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_zlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_zhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3zhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_axislength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10axislength_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__x0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__y0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__z0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__r0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__x1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_x1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__y1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_y1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__z1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_z1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__r1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3_r1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder[] = {
  {"get_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_5get_clip, METH_NOARGS, 0},
  {"set_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_7set_clip, METH_O, 0},
  {"axis", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_9axis, METH_NOARGS, 0},
  {"set_neighbors", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_11set_neighbors, METH_VARARGS|METH_KEYWORDS, 0},
  {"within_core", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_13within_core, METH_VARARGS|METH_KEYWORDS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_15starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_17distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_19overlaps_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_21overlaps_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_z", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_23overlaps_z, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder[] = {
  {(char *)"xlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_xlo, 0, (char *)0, 0},
  {(char *)"xhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_xhi, 0, (char *)0, 0},
  {(char *)"ylo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_ylo, 0, (char *)0, 0},
  {(char *)"yhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_yhi, 0, (char *)0, 0},
  {(char *)"zlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_zlo, 0, (char *)0, 0},
  {(char *)"zhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_zhi, 0, (char *)0, 0},
  {(char *)"axislength", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_axislength, 0, (char *)0, 0},
  {(char *)"_x0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__x0, 0, (char *)0, 0},
  {(char *)"_y0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__y0, 0, (char *)0, 0},
  {(char *)"_z0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__z0, 0, (char *)0, 0},
  {(char *)"_r0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__r0, 0, (char *)0, 0},
  {(char *)"_x1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__x1, 0, (char *)0, 0},
  {(char *)"_y1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__y1, 0, (char *)0, 0},
  {(char *)"_z1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__z1, 0, (char *)0, 0},
  {(char *)"_r1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder__r1, 0, (char *)0, 0},
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Cylinder", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->clips);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)o;
  if (p->clips) {
    e = (*v)(p->clips, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *)o;
  tmp = ((PyObject*)p->clips);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone[] = {
  {"set_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_3set_clip, METH_O, 0},
  {"get_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_5get_clip, METH_NOARGS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_9starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_11distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_13overlaps_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_15overlaps_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_z", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_17overlaps_z, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone[] = {
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.SphereCone", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_7__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;
  p->neighbors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->neighbor_regions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->neighbors);
  Py_CLEAR(p->clips);
  Py_CLEAR(p->neighbor_regions);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)o;
  if (p->neighbors) {
    e = (*v)(p->neighbors, a); if (e) return e;
  }
  if (p->clips) {
    e = (*v)(p->clips, a); if (e) return e;
  }
  if (p->neighbor_regions) {
    e = (*v)(p->neighbor_regions, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *)o;
  tmp = ((PyObject*)p->neighbors);
  p->neighbors = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->clips);
  p->clips = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->neighbor_regions);
  p->neighbor_regions = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_xlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_xhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3xhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_ylo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3ylo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_yhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3yhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_zlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_zhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3zhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__x0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__y0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__z0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__r0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__x1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_x1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__y1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_y1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__z1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_z1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__r1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3_r1_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_axislength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10axislength_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone[] = {
  {"set_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_5set_clip, METH_O, 0},
  {"get_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_7get_clip, METH_NOARGS, 0},
  {"within_core", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_9within_core, METH_VARARGS|METH_KEYWORDS, 0},
  {"axis", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_11axis, METH_NOARGS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_13starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_15distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_17overlaps_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_19overlaps_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_z", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_21overlaps_z, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone[] = {
  {(char *)"xlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_xlo, 0, (char *)0, 0},
  {(char *)"xhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_xhi, 0, (char *)0, 0},
  {(char *)"ylo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_ylo, 0, (char *)0, 0},
  {(char *)"yhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_yhi, 0, (char *)0, 0},
  {(char *)"zlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_zlo, 0, (char *)0, 0},
  {(char *)"zhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_zhi, 0, (char *)0, 0},
  {(char *)"_x0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__x0, 0, (char *)0, 0},
  {(char *)"_y0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__y0, 0, (char *)0, 0},
  {(char *)"_z0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__z0, 0, (char *)0, 0},
  {(char *)"_r0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__r0, 0, (char *)0, 0},
  {(char *)"_x1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__x1, 0, (char *)0, 0},
  {(char *)"_y1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__y1, 0, (char *)0, 0},
  {(char *)"_z1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__z1, 0, (char *)0, 0},
  {(char *)"_r1", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone__r1, 0, (char *)0, 0},
  {(char *)"axislength", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_axislength, 0, (char *)0, 0},
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.Cone", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *)o);
  p->__pyx_vtab = __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__x0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_x0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__y0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_y0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__z0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3_z0_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_xlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_xhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3xhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_ylo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3ylo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_yhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3yhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_zlo(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zlo_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_zhi(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3zhi_1__get__(o);
}

static PyObject *__pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_primitives(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_10primitives_1__get__(o);
}

static PyMethodDef __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone[] = {
  {"get_clip", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_1get_clip, METH_NOARGS, 0},
  {"starting_points", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_5starting_points, METH_VARARGS|METH_KEYWORDS, 0},
  {"distance", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_7distance, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_x", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_9overlaps_x, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_y", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_11overlaps_y, METH_VARARGS|METH_KEYWORDS, 0},
  {"overlaps_z", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_13overlaps_z, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone[] = {
  {(char *)"_x0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__x0, 0, (char *)0, 0},
  {(char *)"_y0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__y0, 0, (char *)0, 0},
  {(char *)"_z0", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone__z0, 0, (char *)0, 0},
  {(char *)"xlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_xlo, 0, (char *)0, 0},
  {(char *)"xhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_xhi, 0, (char *)0, 0},
  {(char *)"ylo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_ylo, 0, (char *)0, 0},
  {(char *)"yhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_yhi, 0, (char *)0, 0},
  {(char *)"zlo", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_zlo, 0, (char *)0, 0},
  {(char *)"zhi", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_zhi, 0, (char *)0, 0},
  {(char *)"primitives", __pyx_getprop_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_primitives, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.graphicsPrimitives.SkewCone", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_graphicsPrimitives(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_graphicsPrimitives},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "graphicsPrimitives",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_At_least_one_Cone_radius_must_be, __pyx_k_At_least_one_Cone_radius_must_be, sizeof(__pyx_k_At_least_one_Cone_radius_must_be), 0, 0, 1, 0},
  {&__pyx_n_s_Complement, __pyx_k_Complement, sizeof(__pyx_k_Complement), 0, 0, 1, 1},
  {&__pyx_kp_s_Complement_r, __pyx_k_Complement_r, sizeof(__pyx_k_Complement_r), 0, 0, 1, 0},
  {&__pyx_n_s_Cone, __pyx_k_Cone, sizeof(__pyx_k_Cone), 0, 0, 1, 1},
  {&__pyx_kp_s_Cone_g_g_g_g_g_g_g_g, __pyx_k_Cone_g_g_g_g_g_g_g_g, sizeof(__pyx_k_Cone_g_g_g_g_g_g_g_g), 0, 0, 1, 0},
  {&__pyx_kp_s_Cone_g_g_g_g_g_g_g_g_clips_r, __pyx_k_Cone_g_g_g_g_g_g_g_g_clips_r, sizeof(__pyx_k_Cone_g_g_g_g_g_g_g_g_clips_r), 0, 0, 1, 0},
  {&__pyx_n_s_Cylinder, __pyx_k_Cylinder, sizeof(__pyx_k_Cylinder), 0, 0, 1, 1},
  {&__pyx_kp_s_Cylinder_g_g_g_g_g_g_g, __pyx_k_Cylinder_g_g_g_g_g_g_g, sizeof(__pyx_k_Cylinder_g_g_g_g_g_g_g), 0, 0, 1, 0},
  {&__pyx_kp_s_Cylinder_g_g_g_g_g_g_g_clips_r, __pyx_k_Cylinder_g_g_g_g_g_g_g_clips_r, sizeof(__pyx_k_Cylinder_g_g_g_g_g_g_g_clips_r), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_2, __pyx_k_Incompatible_checksums_0x_x_vs_0_2, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_3, __pyx_k_Incompatible_checksums_0x_x_vs_0_3, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_4, __pyx_k_Incompatible_checksums_0x_x_vs_0_4, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_4), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_5, __pyx_k_Incompatible_checksums_0x_x_vs_0_5, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_5), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_6, __pyx_k_Incompatible_checksums_0x_x_vs_0_6, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_6), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_7, __pyx_k_Incompatible_checksums_0x_x_vs_0_7, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_7), 0, 0, 1, 0},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0_8, __pyx_k_Incompatible_checksums_0x_x_vs_0_8, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0_8), 0, 0, 1, 0},
  {&__pyx_n_s_Intersection, __pyx_k_Intersection, sizeof(__pyx_k_Intersection), 0, 0, 1, 1},
  {&__pyx_kp_s_Intersection_r, __pyx_k_Intersection_r, sizeof(__pyx_k_Intersection_r), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_Plane, __pyx_k_Plane, sizeof(__pyx_k_Plane), 0, 0, 1, 1},
  {&__pyx_kp_s_Plane_g_g_g_g_g_g, __pyx_k_Plane_g_g_g_g_g_g, sizeof(__pyx_k_Plane_g_g_g_g_g_g), 0, 0, 1, 0},
  {&__pyx_n_s_SkewCone, __pyx_k_SkewCone, sizeof(__pyx_k_SkewCone), 0, 0, 1, 1},
  {&__pyx_n_s_Sphere, __pyx_k_Sphere, sizeof(__pyx_k_Sphere), 0, 0, 1, 1},
  {&__pyx_n_s_SphereCone, __pyx_k_SphereCone, sizeof(__pyx_k_SphereCone), 0, 0, 1, 1},
  {&__pyx_kp_s_SphereCone_g_g_g_g_g_g_g_g, __pyx_k_SphereCone_g_g_g_g_g_g_g_g, sizeof(__pyx_k_SphereCone_g_g_g_g_g_g_g_g), 0, 0, 1, 0},
  {&__pyx_kp_s_Sphere_g_g_g_g, __pyx_k_Sphere_g_g_g_g, sizeof(__pyx_k_Sphere_g_g_g_g), 0, 0, 1, 0},
  {&__pyx_kp_s_Sphere_g_g_g_g_clips_r, __pyx_k_Sphere_g_g_g_g_clips_r, sizeof(__pyx_k_Sphere_g_g_g_g_clips_r), 0, 0, 1, 0},
  {&__pyx_n_s_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 0, 1, 1},
  {&__pyx_kp_s_Union_r, __pyx_k_Union_r, sizeof(__pyx_k_Union_r), 0, 0, 1, 0},
  {&__pyx_n_s_bisect, __pyx_k_bisect, sizeof(__pyx_k_bisect), 0, 0, 1, 1},
  {&__pyx_n_s_bisect_left, __pyx_k_bisect_left, sizeof(__pyx_k_bisect_left), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hi, __pyx_k_hi, sizeof(__pyx_k_hi), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_lo, __pyx_k_lo, sizeof(__pyx_k_lo), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_regions, __pyx_k_neighbor_regions, sizeof(__pyx_k_neighbor_regions), 0, 0, 1, 1},
  {&__pyx_n_s_neighbors, __pyx_k_neighbors, sizeof(__pyx_k_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_neuron_rxd_geometry3d_graphicsPr, __pyx_k_neuron_rxd_geometry3d_graphicsPr, sizeof(__pyx_k_neuron_rxd_geometry3d_graphicsPr), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_nx, __pyx_k_nx, sizeof(__pyx_k_nx), 0, 0, 1, 1},
  {&__pyx_n_s_ny, __pyx_k_ny, sizeof(__pyx_k_ny), 0, 0, 1, 1},
  {&__pyx_n_s_nz, __pyx_k_nz, sizeof(__pyx_k_nz), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_objects, __pyx_k_objects, sizeof(__pyx_k_objects), 0, 0, 1, 1},
  {&__pyx_n_s_overlaps_x, __pyx_k_overlaps_x, sizeof(__pyx_k_overlaps_x), 0, 0, 1, 1},
  {&__pyx_n_s_overlaps_y, __pyx_k_overlaps_y, sizeof(__pyx_k_overlaps_y), 0, 0, 1, 1},
  {&__pyx_n_s_overlaps_z, __pyx_k_overlaps_z, sizeof(__pyx_k_overlaps_z), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_primitives, __pyx_k_primitives, sizeof(__pyx_k_primitives), 0, 0, 1, 1},
  {&__pyx_n_s_px, __pyx_k_px, sizeof(__pyx_k_px), 0, 0, 1, 1},
  {&__pyx_n_s_py, __pyx_k_py, sizeof(__pyx_k_py), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Complement, __pyx_k_pyx_unpickle_Complement, sizeof(__pyx_k_pyx_unpickle_Complement), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Cone, __pyx_k_pyx_unpickle_Cone, sizeof(__pyx_k_pyx_unpickle_Cone), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Cylinder, __pyx_k_pyx_unpickle_Cylinder, sizeof(__pyx_k_pyx_unpickle_Cylinder), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Intersection, __pyx_k_pyx_unpickle_Intersection, sizeof(__pyx_k_pyx_unpickle_Intersection), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Plane, __pyx_k_pyx_unpickle_Plane, sizeof(__pyx_k_pyx_unpickle_Plane), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SkewCone, __pyx_k_pyx_unpickle_SkewCone, sizeof(__pyx_k_pyx_unpickle_SkewCone), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Sphere, __pyx_k_pyx_unpickle_Sphere, sizeof(__pyx_k_pyx_unpickle_Sphere), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SphereCone, __pyx_k_pyx_unpickle_SphereCone, sizeof(__pyx_k_pyx_unpickle_SphereCone), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Union, __pyx_k_pyx_unpickle_Union, sizeof(__pyx_k_pyx_unpickle_Union), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pz, __pyx_k_pz, sizeof(__pyx_k_pz), 0, 0, 1, 1},
  {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
  {&__pyx_n_s_r0, __pyx_k_r0, sizeof(__pyx_k_r0), 0, 0, 1, 1},
  {&__pyx_n_s_r1, __pyx_k_r1, sizeof(__pyx_k_r1), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_starting_points, __pyx_k_starting_points, sizeof(__pyx_k_starting_points), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_within_core, __pyx_k_within_core, sizeof(__pyx_k_within_core), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_xs, __pyx_k_xs, sizeof(__pyx_k_xs), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_ys, __pyx_k_ys, sizeof(__pyx_k_ys), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z0, __pyx_k_z0, sizeof(__pyx_k_z0), 0, 0, 1, 1},
  {&__pyx_n_s_z1, __pyx_k_z1, sizeof(__pyx_k_z1), 0, 0, 1, 1},
  {&__pyx_n_s_z2, __pyx_k_z2, sizeof(__pyx_k_z2), 0, 0, 1, 1},
  {&__pyx_n_s_zs, __pyx_k_zs, sizeof(__pyx_k_zs), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 58, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":493
 * 
 *         if r0 < 0:
 *             raise Exception('At least one Cone radius must be positive')             # <<<<<<<<<<<<<<
 *         if r1 < 0:
 *             axisx, axisy, axisz = (x1 - x0, y1 - y0, z1 - z0)
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_At_least_one_Cone_radius_must_be); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xd41d8cd, 0xe3b0c44, 0xda39a3e):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xd41d8cd, 0xe3b0c44, 0xda39a3e) = ())" % __pyx_checksum)
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_int_222419149, __pyx_int_238750788, __pyx_int_228825662); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_tuple__3 = PyTuple_Pack(3, __pyx_int_92872098, __pyx_int_239915778, __pyx_int_252673849); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__4 = PyTuple_Pack(3, __pyx_int_159808084, __pyx_int_106819078, __pyx_int_96385534); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_tuple__5 = PyTuple_Pack(3, __pyx_int_39271848, __pyx_int_94399116, __pyx_int_241535739); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(3, __pyx_int_691256, __pyx_int_30850365, __pyx_int_110911515); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_tuple__7 = PyTuple_Pack(3, __pyx_int_99548530, __pyx_int_187000701, __pyx_int_34679499); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_int_153540018, __pyx_int_193865462, __pyx_int_57420663); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);
  __pyx_tuple__9 = PyTuple_Pack(3, __pyx_int_238900401, __pyx_int_30581986, __pyx_int_31625445); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Complement(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__10 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);
  __pyx_codeobj__11 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__10, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Complement, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__11)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__12 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Union, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Intersection, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Plane, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__18 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Sphere, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__20 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Cylinder, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__22 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SphereCone, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__24 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Cone, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__26 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SkewCone, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_691256 = PyInt_FromLong(691256L); if (unlikely(!__pyx_int_691256)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30581986 = PyInt_FromLong(30581986L); if (unlikely(!__pyx_int_30581986)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30850365 = PyInt_FromLong(30850365L); if (unlikely(!__pyx_int_30850365)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_31625445 = PyInt_FromLong(31625445L); if (unlikely(!__pyx_int_31625445)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_34679499 = PyInt_FromLong(34679499L); if (unlikely(!__pyx_int_34679499)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_39271848 = PyInt_FromLong(39271848L); if (unlikely(!__pyx_int_39271848)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_57420663 = PyInt_FromLong(57420663L); if (unlikely(!__pyx_int_57420663)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_92872098 = PyInt_FromLong(92872098L); if (unlikely(!__pyx_int_92872098)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_94399116 = PyInt_FromLong(94399116L); if (unlikely(!__pyx_int_94399116)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_96385534 = PyInt_FromLong(96385534L); if (unlikely(!__pyx_int_96385534)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_99548530 = PyInt_FromLong(99548530L); if (unlikely(!__pyx_int_99548530)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_106819078 = PyInt_FromLong(106819078L); if (unlikely(!__pyx_int_106819078)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_110911515 = PyInt_FromLong(110911515L); if (unlikely(!__pyx_int_110911515)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_153540018 = PyInt_FromLong(153540018L); if (unlikely(!__pyx_int_153540018)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_159808084 = PyInt_FromLong(159808084L); if (unlikely(!__pyx_int_159808084)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_187000701 = PyInt_FromLong(187000701L); if (unlikely(!__pyx_int_187000701)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_193865462 = PyInt_FromLong(193865462L); if (unlikely(!__pyx_int_193865462)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_222419149 = PyInt_FromLong(222419149L); if (unlikely(!__pyx_int_222419149)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_228825662 = PyInt_FromLong(228825662L); if (unlikely(!__pyx_int_228825662)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238750788 = PyInt_FromLong(238750788L); if (unlikely(!__pyx_int_238750788)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_238900401 = PyInt_FromLong(238900401L); if (unlikely(!__pyx_int_238900401)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_239915778 = PyInt_FromLong(239915778L); if (unlikely(!__pyx_int_239915778)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_241535739 = PyInt_FromLong(241535739L); if (unlikely(!__pyx_int_241535739)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_252673849 = PyInt_FromLong(252673849L); if (unlikely(!__pyx_int_252673849)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Complement, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Complement;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.starting_points = (PyObject *(*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Union_starting_points;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Union, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Union;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.starting_points = (PyObject *(*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_12Intersection_starting_points;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Intersection, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Intersection;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.starting_points = (PyObject *(*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane_starting_points;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 86, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__.doc = __pyx_doc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5Plane___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Plane, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane) < 0) __PYX_ERR(0, 86, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Plane;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.overlaps_x = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_x;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.overlaps_y = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_y;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.overlaps_z = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_6Sphere_overlaps_z;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Sphere, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Sphere;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.within_core = (PyObject *(*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_within_core;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.overlaps_x = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_x;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.overlaps_y = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_y;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.overlaps_z = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8Cylinder_overlaps_z;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Cylinder, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder) < 0) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cylinder;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.overlaps_x = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_x;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.overlaps_y = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_y;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.overlaps_z = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_10SphereCone_overlaps_z;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SphereCone, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone) < 0) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SphereCone;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.within_core = (PyObject *(*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_within_core;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.overlaps_x = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_x;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.overlaps_y = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_y;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.overlaps_z = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_4Cone_overlaps_z;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Cone, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_Cone;
  __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone = &__pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.distance = (double (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_distance;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.overlaps_x = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_x;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.overlaps_y = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_y;
  __pyx_vtable_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.overlaps_z = (int (*)(struct __pyx_obj_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone *, double, double, int __pyx_skip_dispatch))__pyx_f_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_overlaps_z;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_UPDATE_DESCRIPTOR_DOC
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 604, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__.doc = __pyx_doc_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_6neuron_3rxd_10geometry3d_18graphicsPrimitives_8SkewCone_2__init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone.tp_dict, __pyx_vtabptr_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SkewCone, (PyObject *)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __pyx_ptype_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone = &__pyx_type_6neuron_3rxd_10geometry3d_18graphicsPrimitives_SkewCone;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initgraphicsPrimitives(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initgraphicsPrimitives(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_graphicsPrimitives(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_graphicsPrimitives(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_graphicsPrimitives(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'graphicsPrimitives' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_graphicsPrimitives(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("graphicsPrimitives", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_neuron__rxd__geometry3d__graphicsPrimitives) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "neuron.rxd.geometry3d.graphicsPrimitives")) {
      if (unlikely(PyDict_SetItemString(modules, "neuron.rxd.geometry3d.graphicsPrimitives", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":8
 * #   http://jgt.akpeters.com/papers/BarbierGalin04/Cone-Sphere.zip
 * 
 * import bisect             # <<<<<<<<<<<<<<
 * cimport cython
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_bisect, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bisect, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Complement(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_1__pyx_unpickle_Complement, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Complement, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Complement__set_state(<Complement> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Complement__set_state(Complement __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 0 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[0])
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_3__pyx_unpickle_Union, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Union, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Intersection(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_5__pyx_unpickle_Intersection, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Intersection, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Intersection__set_state(<Intersection> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Intersection__set_state(Intersection __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.objects = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_7__pyx_unpickle_Plane, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Plane, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Sphere(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_9__pyx_unpickle_Sphere, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Sphere, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Sphere__set_state(<Sphere> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Sphere__set_state(Sphere __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._r = __pyx_state[0]; __pyx_result._x = __pyx_state[1]; __pyx_result._xhi = __pyx_state[2]; __pyx_result._xlo = __pyx_state[3]; __pyx_result._y = __pyx_state[4]; __pyx_result._yhi = __pyx_state[5]; __pyx_result._ylo = __pyx_state[6]; __pyx_result._z = __pyx_state[7]; __pyx_result._zhi = __pyx_state[8]; __pyx_result._zlo = __pyx_state[9]; __pyx_result.clips = __pyx_state[10]
 *     if len(__pyx_state) > 11 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_11__pyx_unpickle_Cylinder, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Cylinder, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SphereCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_13__pyx_unpickle_SphereCone, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SphereCone, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_SphereCone__set_state(<SphereCone> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SphereCone__set_state(SphereCone __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._xhi = __pyx_state[0]; __pyx_result._xlo = __pyx_state[1]; __pyx_result._yhi = __pyx_state[2]; __pyx_result._ylo = __pyx_state[3]; __pyx_result._zhi = __pyx_state[4]; __pyx_result._zlo = __pyx_state[5]; __pyx_result.axisx = __pyx_state[6]; __pyx_result.axisy = __pyx_state[7]; __pyx_result.axisz = __pyx_state[8]; __pyx_result.clips = __pyx_state[9]; __pyx_result.conelength = __pyx_state[10]; __pyx_result.ha = __pyx_state[11]; __pyx_result.hb = __pyx_state[12]; __pyx_result.hra = __pyx_state[13]; __pyx_result.hrb = __pyx_state[14]; __pyx_result.length = __pyx_state[15]; __pyx_result.r0 = __pyx_state[16]; __pyx_result.r1 = __pyx_state[17]; __pyx_result.rra = __pyx_state[18]; __pyx_result.rrb = __pyx_state[19]; __pyx_result.side1 = __pyx_state[20]; __pyx_result.side2 = __pyx_state[21]; __pyx_result.x0 = __pyx_state[22]; __pyx_result.x1 = __pyx_state[23]; __pyx_result.y0 = __pyx_state[24]; __pyx_result.y1 = __pyx_state[25]; __pyx_result.z0 = __pyx_state[26]; __pyx_result.z1 = __pyx_state[27]
 *     if len(__pyx_state) > 28 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_15__pyx_unpickle_Cone, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Cone, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SkewCone(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_18graphicsPrimitives_17__pyx_unpickle_SkewCone, NULL, __pyx_n_s_neuron_rxd_geometry3d_graphicsPr); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SkewCone, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/graphicsPrimitives.pyx":1
 * #cython: language_level=2             # <<<<<<<<<<<<<<
 * # this contains cone, spherecone, and cylinder code translated and modified from Barbier and
 * # Galin 2004's example code
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init neuron.rxd.geometry3d.graphicsPrimitives", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init neuron.rxd.geometry3d.graphicsPrimitives");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
