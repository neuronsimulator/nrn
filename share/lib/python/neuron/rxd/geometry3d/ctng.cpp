/* Generated by Cython 0.29.37 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_37"
#define CYTHON_HEX_VERSION 0x001D25F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__neuron__rxd__geometry3d__ctng
#define __PYX_HAVE_API__neuron__rxd__geometry3d__ctng
/* Early includes */
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"

    /* NumPy API declarations from "numpy/__init__.pxd" */
    
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "share/lib/python/neuron/rxd/geometry3d/ctng.pyx",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":688
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":689
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":690
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":691
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":695
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":696
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":697
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":698
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":702
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":703
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":712
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":713
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":715
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":716
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":718
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":719
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":721
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":722
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":723
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry;
struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":725
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":726
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":727
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":729
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry {
  PyObject_HEAD
  PyObject *__pyx_v_cell;
};


/* "neuron/rxd/geometry3d/ctng.pyx":307
 *         cell = source
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)             # <<<<<<<<<<<<<<
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')
 */
struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *__pyx_outer_scope;
  PyObject *__pyx_v_sec;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_dict_items.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d);

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_37
#define __PYX_HAVE_RT_ImportType_proto_0_29_37
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_37(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_37 {
   __Pyx_ImportType_CheckSize_Error_0_29_37 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_37 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_37 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size);
#endif

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;

/* Module declarations from 'cython' */

/* Module declarations from 'neuron.rxd.geometry3d.ctng' */
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry = 0;
static PyTypeObject *__pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr = 0;
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_seg_line_intersection(double, double, double, double, double, double, double, double, int); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_closest_pt(PyObject *, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_extreme_pts(PyObject *); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(PyObject *, PyObject *, PyObject *); /*proto*/
static int __pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(PyObject *, PyObject *, double); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_get_infinite_cones(double, double, double, double, double, double, double, double, double, double, double, double); /*proto*/
static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_join_outside(double, double, double, double, double, double, double, double, double, double, double, double, double); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float_t = { "float_t", NULL, sizeof(__pyx_t_5numpy_float_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "neuron.rxd.geometry3d.ctng"
extern int __pyx_module_is_main_neuron__rxd__geometry3d__ctng;
int __pyx_module_is_main_neuron__rxd__geometry3d__ctng = 0;

/* Implementation of 'neuron.rxd.geometry3d.ctng' */
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_min;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_any;
static PyObject *__pyx_builtin_ImportError;
static const char __pyx_k_L[] = "L";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_m[] = "m";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_c0[] = "c0";
static const char __pyx_k_c1[] = "c1";
static const char __pyx_k_cp[] = "cp";
static const char __pyx_k_cx[] = "cx";
static const char __pyx_k_cy[] = "cy";
static const char __pyx_k_d0[] = "d0";
static const char __pyx_k_d1[] = "d1";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_hi[] = "hi";
static const char __pyx_k_lo[] = "lo";
static const char __pyx_k_p1[] = "p1";
static const char __pyx_k_p2[] = "p2";
static const char __pyx_k_pt[] = "pt";
static const char __pyx_k_r0[] = "_r0";
static const char __pyx_k_r1[] = "_r1";
static const char __pyx_k_r2[] = "r2";
static const char __pyx_k_r3[] = "r3";
static const char __pyx_k_s0[] = "s0";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_sp[] = "sp";
static const char __pyx_k_sx[] = "sx";
static const char __pyx_k_sy[] = "sy";
static const char __pyx_k_sz[] = "sz";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "_x1";
static const char __pyx_k_x2[] = "x2";
static const char __pyx_k_x3[] = "x3";
static const char __pyx_k_x4[] = "x4";
static const char __pyx_k_xx[] = "xx";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "_y1";
static const char __pyx_k_y2[] = "y2";
static const char __pyx_k_y3[] = "y3";
static const char __pyx_k_y4[] = "y4";
static const char __pyx_k_yy[] = "yy";
static const char __pyx_k_z0[] = "z0";
static const char __pyx_k_z1[] = "_z1";
static const char __pyx_k_z2[] = "z2";
static const char __pyx_k_z3[] = "z3";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_arc[] = "arc";
static const char __pyx_k_div[] = "div";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_loc[] = "loc";
static const char __pyx_k_mag[] = "mag";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_n3d[] = "n3d";
static const char __pyx_k_pt0[] = "pt0";
static const char __pyx_k_pt1[] = "pt1";
static const char __pyx_k_pt2[] = "pt2";
static const char __pyx_k_pt3[] = "pt3";
static const char __pyx_k_pts[] = "pts";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_rng[] = "rng";
static const char __pyx_k_sec[] = "sec";
static const char __pyx_k_seg[] = "seg";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_x3d[] = "x3d";
static const char __pyx_k_y3d[] = "y3d";
static const char __pyx_k_z3d[] = "z3d";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_Cone[] = "Cone";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_cell[] = "cell";
static const char __pyx_k_clip[] = "clip";
static const char __pyx_k_cone[] = "cone";
static const char __pyx_k_iseg[] = "iseg";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_nseg[] = "nseg";
static const char __pyx_k_psec[] = "psec";
static const char __pyx_k_pt1x[] = "pt1x";
static const char __pyx_k_pt1y[] = "pt1y";
static const char __pyx_k_pt2x[] = "pt2x";
static const char __pyx_k_pt2y[] = "pt2y";
static const char __pyx_k_r0_2[] = "r0";
static const char __pyx_k_r1_2[] = "r1";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tobj[] = "tobj";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_x0_2[] = "_x0";
static const char __pyx_k_x1_2[] = "x1";
static const char __pyx_k_y0_2[] = "_y0";
static const char __pyx_k_y1_2[] = "y1";
static const char __pyx_k_z0_2[] = "_z0";
static const char __pyx_k_z1_2[] = "z1";
static const char __pyx_k_Plane[] = "Plane";
static const char __pyx_k_Union[] = "Union";
static const char __pyx_k_arc3d[] = "arc3d";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_axisx[] = "axisx";
static const char __pyx_k_axisy[] = "axisy";
static const char __pyx_k_axisz[] = "axisz";
static const char __pyx_k_clips[] = "clips";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cones[] = "cones";
static const char __pyx_k_cross[] = "cross";
static const char __pyx_k_diam1[] = "diam1";
static const char __pyx_k_diam2[] = "diam2";
static const char __pyx_k_diams[] = "diams";
static const char __pyx_k_f_pts[] = "f_pts";
static const char __pyx_k_hname[] = "hname";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_major[] = "major";
static const char __pyx_k_minor[] = "minor";
static const char __pyx_k_naxis[] = "naxis";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pts3d[] = "pts3d";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shift[] = "shift";
static const char __pyx_k_somax[] = "somax";
static const char __pyx_k_somay[] = "somay";
static const char __pyx_k_somaz[] = "somaz";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_Matrix[] = "Matrix";
static const char __pyx_k_Sphere[] = "Sphere";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_bisect[] = "bisect";
static const char __pyx_k_branch[] = "branch";
static const char __pyx_k_deltad[] = "deltad";
static const char __pyx_k_diam3d[] = "diam3d";
static const char __pyx_k_getcol[] = "getcol";
static const char __pyx_k_getrow[] = "getrow";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_interp[] = "interp";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_margin[] = "margin";
static const char __pyx_k_neuron[] = "neuron";
static const char __pyx_k_orig_x[] = "orig_x";
static const char __pyx_k_orig_y[] = "orig_y";
static const char __pyx_k_orig_z[] = "orig_z";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_sec_db[] = "_sec_db";
static const char __pyx_k_setval[] = "setval";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_delta_x[] = "delta_x";
static const char __pyx_k_delta_y[] = "delta_y";
static const char __pyx_k_diam_db[] = "diam_db";
static const char __pyx_k_f_diams[] = "f_diams";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_max_ind[] = "max_ind";
static const char __pyx_k_min_ind[] = "min_ind";
static const char __pyx_k_objects[] = "objects";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_symmeig[] = "symmeig";
static const char __pyx_k_xcoords[] = "xcoords";
static const char __pyx_k_xs_loop[] = "xs_loop";
static const char __pyx_k_ycoords[] = "ycoords";
static const char __pyx_k_ys_loop[] = "ys_loop";
static const char __pyx_k_zcoords[] = "zcoords";
static const char __pyx_k_Cylinder[] = "Cylinder";
static const char __pyx_k_SkewCone[] = "SkewCone";
static const char __pyx_k_branches[] = "branches";
static const char __pyx_k_distance[] = "distance";
static const char __pyx_k_extreme1[] = "extreme1";
static const char __pyx_k_extreme2[] = "extreme2";
static const char __pyx_k_int_clip[] = "int_clip";
static const char __pyx_k_is_stack[] = "is_stack";
static const char __pyx_k_major_p1[] = "major_p1";
static const char __pyx_k_major_p2[] = "major_p2";
static const char __pyx_k_neighbor[] = "neighbor";
static const char __pyx_k_sections[] = "sections";
static const char __pyx_k_seg_dict[] = "seg_dict";
static const char __pyx_k_set_clip[] = "set_clip";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_xshifted[] = "xshifted";
static const char __pyx_k_yshifted[] = "yshifted";
static const char __pyx_k_zshifted[] = "zshifted";
static const char __pyx_k_all_cones[] = "all_cones";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_iscontour[] = "iscontour_";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_join_item[] = "join_item";
static const char __pyx_k_joingroup[] = "joingroup";
static const char __pyx_k_nouniform[] = "nouniform";
static const char __pyx_k_parentsec[] = "parentsec";
static const char __pyx_k_soma_secs[] = "soma_secs";
static const char __pyx_k_thickness[] = "thickness";
static const char __pyx_k_to_python[] = "to_python";
static const char __pyx_k_SphereCone[] = "SphereCone";
static const char __pyx_k_axislength[] = "axislength";
static const char __pyx_k_center_vec[] = "center_vec";
static const char __pyx_k_conecoords[] = "conecoords";
static const char __pyx_k_corner_pts[] = "corner_pts";
static const char __pyx_k_radial_vec[] = "radial_vec";
static const char __pyx_k_sharp_turn[] = "sharp_turn";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_join_groups[] = "join_groups";
static const char __pyx_k_n_soma_step[] = "n_soma_step";
static const char __pyx_k_new_objects[] = "new_objects";
static const char __pyx_k_nradial_vec[] = "nradial_vec";
static const char __pyx_k_path_length[] = "path_length";
static const char __pyx_k_pts_sources[] = "pts_sources";
static const char __pyx_k_Intersection[] = "Intersection";
static const char __pyx_k_RxDException[] = "RxDException";
static const char __pyx_k_clip_copying[] = "clip_copying";
static const char __pyx_k_combinations[] = "combinations";
static const char __pyx_k_cone_clip_db[] = "cone_clip_db";
static const char __pyx_k_corner_count[] = "corner_count";
static const char __pyx_k_define_shape[] = "define_shape";
static const char __pyx_k_major_length[] = "major_length";
static const char __pyx_k_num_contours[] = "num_contours";
static const char __pyx_k_obj_pts_dict[] = "obj_pts_dict";
static const char __pyx_k_obj_sections[] = "obj_sections";
static const char __pyx_k_plane_normal[] = "plane_normal";
static const char __pyx_k_pts_cones_db[] = "pts_cones_db";
static const char __pyx_k_relevant_pts[] = "relevant_pts";
static const char __pyx_k_segment_locs[] = "segment_locs";
static const char __pyx_k_soma_objects[] = "soma_objects";
static const char __pyx_k_cone_sections[] = "cone_sections";
static const char __pyx_k_contourcenter[] = "contourcenter";
static const char __pyx_k_neighbor_copy[] = "neighbor_copy";
static const char __pyx_k_neighbor_left[] = "neighbor_left";
static const char __pyx_k_trueparentseg[] = "trueparentseg";
static const char __pyx_k_left_neighbors[] = "left_neighbors";
static const char __pyx_k_neighbor_right[] = "neighbor_right";
static const char __pyx_k_my_corner_count[] = "my_corner_count";
static const char __pyx_k_no_parent_count[] = "no_parent_count";
static const char __pyx_k_parent_sec_name[] = "parent_sec_name";
static const char __pyx_k_radial_vec_norm[] = "radial_vec_norm";
static const char __pyx_k_right_neighbors[] = "right_neighbors";
static const char __pyx_k_diam_corrections[] = "diam_corrections";
static const char __pyx_k_cone_segment_dict[] = "cone_segment_dict";
static const char __pyx_k_hoc_internal_name[] = "hoc_internal_name";
static const char __pyx_k_soma_segment_dict[] = "soma_segment_dict";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_graphicsPrimitives[] = "graphicsPrimitives";
static const char __pyx_k_source_is_import3d[] = "source_is_import3d";
static const char __pyx_k_potential_soma_cones[] = "potential_soma_cones";
static const char __pyx_k_neuron_rxd_rxdException[] = "neuron.rxd.rxdException";
static const char __pyx_k_unexpected_corner_counts[] = "unexpected corner_counts?";
static const char __pyx_k_join_items_needing_clipped[] = "join_items_needing_clipped";
static const char __pyx_k_neuron_rxd_geometry3d_ctng[] = "neuron.rxd.geometry3d.ctng";
static const char __pyx_k_multiple_most_extreme_points[] = "multiple most extreme points";
static const char __pyx_k_constructive_neuronal_geometry[] = "constructive_neuronal_geometry";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_constructive_neuronal_geometry_l[] = "constructive_neuronal_geometry.<locals>.genexpr";
static const char __pyx_k_extreme_points_computation_faile[] = "extreme points computation failed";
static const char __pyx_k_more_than_one_contour_is_not_cur[] = "more than one contour is not currently supported";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_share_lib_python_neuron_rxd_geom[] = "share/lib/python/neuron/rxd/geometry3d/ctng.pyx";
static const char __pyx_k_soma_rotation_unsupported_for_vo[] = "soma rotation unsupported for voxelized somas";
static const char __pyx_k_soma_stack_ignored_using_centroi[] = "soma stack ignored; using centroid instead";
static PyObject *__pyx_n_s_Cone;
static PyObject *__pyx_n_s_Cylinder;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_Intersection;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_Matrix;
static PyObject *__pyx_n_s_Plane;
static PyObject *__pyx_n_s_RxDException;
static PyObject *__pyx_n_s_SkewCone;
static PyObject *__pyx_n_s_Sphere;
static PyObject *__pyx_n_s_SphereCone;
static PyObject *__pyx_n_s_Union;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_cones;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arc;
static PyObject *__pyx_n_s_arc3d;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_axislength;
static PyObject *__pyx_n_s_axisx;
static PyObject *__pyx_n_s_axisy;
static PyObject *__pyx_n_s_axisz;
static PyObject *__pyx_n_s_bisect;
static PyObject *__pyx_n_s_branch;
static PyObject *__pyx_n_s_branches;
static PyObject *__pyx_n_s_c0;
static PyObject *__pyx_n_s_c1;
static PyObject *__pyx_n_s_cell;
static PyObject *__pyx_n_s_center_vec;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clip;
static PyObject *__pyx_n_s_clip_copying;
static PyObject *__pyx_n_s_clips;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_combinations;
static PyObject *__pyx_n_s_cone;
static PyObject *__pyx_n_s_cone_clip_db;
static PyObject *__pyx_n_s_cone_sections;
static PyObject *__pyx_n_s_cone_segment_dict;
static PyObject *__pyx_n_s_conecoords;
static PyObject *__pyx_n_s_cones;
static PyObject *__pyx_n_s_constructive_neuronal_geometry;
static PyObject *__pyx_n_s_constructive_neuronal_geometry_l;
static PyObject *__pyx_n_s_contourcenter;
static PyObject *__pyx_n_s_corner_count;
static PyObject *__pyx_n_s_corner_pts;
static PyObject *__pyx_n_s_cp;
static PyObject *__pyx_n_s_cross;
static PyObject *__pyx_n_s_cx;
static PyObject *__pyx_n_s_cy;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_d0;
static PyObject *__pyx_n_s_d1;
static PyObject *__pyx_n_s_define_shape;
static PyObject *__pyx_n_s_delta_x;
static PyObject *__pyx_n_s_delta_y;
static PyObject *__pyx_n_s_deltad;
static PyObject *__pyx_n_s_diam1;
static PyObject *__pyx_n_s_diam2;
static PyObject *__pyx_n_s_diam3d;
static PyObject *__pyx_n_s_diam_corrections;
static PyObject *__pyx_n_s_diam_db;
static PyObject *__pyx_n_s_diams;
static PyObject *__pyx_n_s_distance;
static PyObject *__pyx_n_s_div;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_extreme1;
static PyObject *__pyx_n_s_extreme2;
static PyObject *__pyx_kp_s_extreme_points_computation_faile;
static PyObject *__pyx_n_s_f_diams;
static PyObject *__pyx_n_s_f_pts;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_getcol;
static PyObject *__pyx_n_s_getrow;
static PyObject *__pyx_n_s_graphicsPrimitives;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_n_s_hi;
static PyObject *__pyx_n_s_hname;
static PyObject *__pyx_n_s_hoc_internal_name;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_int_clip;
static PyObject *__pyx_n_s_interp;
static PyObject *__pyx_n_s_is_stack;
static PyObject *__pyx_n_s_iscontour;
static PyObject *__pyx_n_s_iseg;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join_groups;
static PyObject *__pyx_n_s_join_item;
static PyObject *__pyx_n_s_join_items_needing_clipped;
static PyObject *__pyx_n_s_joingroup;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_left_neighbors;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_n_s_lo;
static PyObject *__pyx_n_s_loc;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_mag;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_major;
static PyObject *__pyx_n_s_major_length;
static PyObject *__pyx_n_s_major_p1;
static PyObject *__pyx_n_s_major_p2;
static PyObject *__pyx_n_s_margin;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_ind;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_min_ind;
static PyObject *__pyx_n_s_minor;
static PyObject *__pyx_kp_s_more_than_one_contour_is_not_cur;
static PyObject *__pyx_kp_s_multiple_most_extreme_points;
static PyObject *__pyx_n_s_my_corner_count;
static PyObject *__pyx_n_s_n3d;
static PyObject *__pyx_n_s_n_soma_step;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_naxis;
static PyObject *__pyx_n_s_neighbor;
static PyObject *__pyx_n_s_neighbor_copy;
static PyObject *__pyx_n_s_neighbor_left;
static PyObject *__pyx_n_s_neighbor_right;
static PyObject *__pyx_n_s_neuron;
static PyObject *__pyx_n_s_neuron_rxd_geometry3d_ctng;
static PyObject *__pyx_n_s_neuron_rxd_rxdException;
static PyObject *__pyx_n_s_new_objects;
static PyObject *__pyx_n_s_no_parent_count;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_nouniform;
static PyObject *__pyx_n_s_nradial_vec;
static PyObject *__pyx_n_s_nseg;
static PyObject *__pyx_n_s_num_contours;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj_pts_dict;
static PyObject *__pyx_n_s_obj_sections;
static PyObject *__pyx_n_s_objects;
static PyObject *__pyx_n_s_orig_x;
static PyObject *__pyx_n_s_orig_y;
static PyObject *__pyx_n_s_orig_z;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_p1;
static PyObject *__pyx_n_s_p2;
static PyObject *__pyx_n_s_parent_sec_name;
static PyObject *__pyx_n_s_parentsec;
static PyObject *__pyx_n_s_path_length;
static PyObject *__pyx_n_s_plane_normal;
static PyObject *__pyx_n_s_potential_soma_cones;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_psec;
static PyObject *__pyx_n_s_pt;
static PyObject *__pyx_n_s_pt0;
static PyObject *__pyx_n_s_pt1;
static PyObject *__pyx_n_s_pt1x;
static PyObject *__pyx_n_s_pt1y;
static PyObject *__pyx_n_s_pt2;
static PyObject *__pyx_n_s_pt2x;
static PyObject *__pyx_n_s_pt2y;
static PyObject *__pyx_n_s_pt3;
static PyObject *__pyx_n_s_pts;
static PyObject *__pyx_n_s_pts3d;
static PyObject *__pyx_n_s_pts_cones_db;
static PyObject *__pyx_n_s_pts_sources;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_r0;
static PyObject *__pyx_n_s_r0_2;
static PyObject *__pyx_n_s_r1;
static PyObject *__pyx_n_s_r1_2;
static PyObject *__pyx_n_s_r2;
static PyObject *__pyx_n_s_r3;
static PyObject *__pyx_n_s_radial_vec;
static PyObject *__pyx_n_s_radial_vec_norm;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw;
static PyObject *__pyx_n_s_relevant_pts;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_right_neighbors;
static PyObject *__pyx_n_s_rng;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s0;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_sec;
static PyObject *__pyx_n_s_sec_db;
static PyObject *__pyx_n_s_sections;
static PyObject *__pyx_n_s_seg;
static PyObject *__pyx_n_s_seg_dict;
static PyObject *__pyx_n_s_segment_locs;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_clip;
static PyObject *__pyx_n_s_setval;
static PyObject *__pyx_kp_s_share_lib_python_neuron_rxd_geom;
static PyObject *__pyx_n_s_sharp_turn;
static PyObject *__pyx_n_s_shift;
static PyObject *__pyx_n_s_soma_objects;
static PyObject *__pyx_kp_s_soma_rotation_unsupported_for_vo;
static PyObject *__pyx_n_s_soma_secs;
static PyObject *__pyx_n_s_soma_segment_dict;
static PyObject *__pyx_kp_s_soma_stack_ignored_using_centroi;
static PyObject *__pyx_n_s_somax;
static PyObject *__pyx_n_s_somay;
static PyObject *__pyx_n_s_somaz;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_source_is_import3d;
static PyObject *__pyx_n_s_sp;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sx;
static PyObject *__pyx_n_s_sy;
static PyObject *__pyx_n_s_symmeig;
static PyObject *__pyx_n_s_sz;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thickness;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_to_python;
static PyObject *__pyx_n_s_tobj;
static PyObject *__pyx_n_s_trueparentseg;
static PyObject *__pyx_kp_s_unexpected_corner_counts;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_x0_2;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x1_2;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_x3;
static PyObject *__pyx_n_s_x3d;
static PyObject *__pyx_n_s_x4;
static PyObject *__pyx_n_s_xcoords;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_xs_loop;
static PyObject *__pyx_n_s_xshifted;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_y0_2;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y1_2;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_y3;
static PyObject *__pyx_n_s_y3d;
static PyObject *__pyx_n_s_y4;
static PyObject *__pyx_n_s_ycoords;
static PyObject *__pyx_n_s_ys_loop;
static PyObject *__pyx_n_s_yshifted;
static PyObject *__pyx_n_s_yy;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z0;
static PyObject *__pyx_n_s_z0_2;
static PyObject *__pyx_n_s_z1;
static PyObject *__pyx_n_s_z1_2;
static PyObject *__pyx_n_s_z2;
static PyObject *__pyx_n_s_z3;
static PyObject *__pyx_n_s_z3d;
static PyObject *__pyx_n_s_zcoords;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_n_s_zshifted;
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_soma_objects(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, CYTHON_UNUSED PyObject *__pyx_v_z, PyObject *__pyx_v_sec, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, int __pyx_v_n_soma_step); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_2constructive_neuronal_geometry(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source, int __pyx_v_n_soma_step, double __pyx_v_dx, PyObject *__pyx_v_nouniform, PyObject *__pyx_v_relevant_pts); /* proto */
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_items = {0, &__pyx_n_s_items, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyList_Type_remove = {0, &__pyx_n_s_remove, 0, 0, 0};
static PyObject *__pyx_float_2_;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
/* Late includes */

/* "neuron/rxd/geometry3d/ctng.pyx":23
 * from graphicsPrimitives import Sphere, Cone, Cylinder, SkewCone, Plane, Union, Intersection, SphereCone
 * 
 * cdef tuple seg_line_intersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, bint clip):             # <<<<<<<<<<<<<<
 *     # returns None if parallel (so None if 0 or infinitely many intersections)
 *     # if clip is True, requires intersection on segment; else returns line-line intersection
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_seg_line_intersection(double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_x3, double __pyx_v_y3, double __pyx_v_x4, double __pyx_v_y4, int __pyx_v_clip) {
  double __pyx_v_denom;
  double __pyx_v_u;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("seg_line_intersection", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":26
 *     # returns None if parallel (so None if 0 or infinitely many intersections)
 *     # if clip is True, requires intersection on segment; else returns line-line intersection
 *     cdef double denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)             # <<<<<<<<<<<<<<
 *     if denom == 0: return None
 *     cdef double u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom
 */
  __pyx_v_denom = (((__pyx_v_y4 - __pyx_v_y3) * (__pyx_v_x2 - __pyx_v_x1)) - ((__pyx_v_x4 - __pyx_v_x3) * (__pyx_v_y2 - __pyx_v_y1)));

  /* "neuron/rxd/geometry3d/ctng.pyx":27
 *     # if clip is True, requires intersection on segment; else returns line-line intersection
 *     cdef double denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)
 *     if denom == 0: return None             # <<<<<<<<<<<<<<
 *     cdef double u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom
 *     if clip and not (0 <= u <= 1): return None
 */
  __pyx_t_1 = ((__pyx_v_denom == 0.0) != 0);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":28
 *     cdef double denom = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)
 *     if denom == 0: return None
 *     cdef double u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom             # <<<<<<<<<<<<<<
 *     if clip and not (0 <= u <= 1): return None
 *     return (x1 + u * (x2 - x1), y1 + u * (y2 - y1))
 */
  __pyx_t_2 = (((__pyx_v_x4 - __pyx_v_x3) * (__pyx_v_y1 - __pyx_v_y3)) - ((__pyx_v_y4 - __pyx_v_y3) * (__pyx_v_x1 - __pyx_v_x3)));
  if (unlikely(__pyx_v_denom == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 28, __pyx_L1_error)
  }
  __pyx_v_u = (__pyx_t_2 / __pyx_v_denom);

  /* "neuron/rxd/geometry3d/ctng.pyx":29
 *     if denom == 0: return None
 *     cdef double u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom
 *     if clip and not (0 <= u <= 1): return None             # <<<<<<<<<<<<<<
 *     return (x1 + u * (x2 - x1), y1 + u * (y2 - y1))
 * 
 */
  __pyx_t_3 = (__pyx_v_clip != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (0.0 <= __pyx_v_u);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_u <= 1.0);
  }
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  __pyx_t_1 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = ((PyObject*)Py_None); __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":30
 *     cdef double u = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denom
 *     if clip and not (0 <= u <= 1): return None
 *     return (x1 + u * (x2 - x1), y1 + u * (y2 - y1))             # <<<<<<<<<<<<<<
 * 
 * cdef tuple closest_pt(pt, list pts, z2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_x1 + (__pyx_v_u * (__pyx_v_x2 - __pyx_v_x1)))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_y1 + (__pyx_v_u * (__pyx_v_y2 - __pyx_v_y1)))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":23
 * from graphicsPrimitives import Sphere, Cone, Cylinder, SkewCone, Plane, Union, Intersection, SphereCone
 * 
 * cdef tuple seg_line_intersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, bint clip):             # <<<<<<<<<<<<<<
 *     # returns None if parallel (so None if 0 or infinitely many intersections)
 *     # if clip is True, requires intersection on segment; else returns line-line intersection
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.seg_line_intersection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":32
 *     return (x1 + u * (x2 - x1), y1 + u * (y2 - y1))
 * 
 * cdef tuple closest_pt(pt, list pts, z2):             # <<<<<<<<<<<<<<
 *     dist = float('inf')
 *     closest = None
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_closest_pt(PyObject *__pyx_v_pt, PyObject *__pyx_v_pts, PyObject *__pyx_v_z2) {
  PyObject *__pyx_v_dist = NULL;
  PyObject *__pyx_v_closest = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("closest_pt", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":33
 * 
 * cdef tuple closest_pt(pt, list pts, z2):
 *     dist = float('inf')             # <<<<<<<<<<<<<<
 *     closest = None
 *     for p in pts:
 */
  __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_n_s_inf); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dist = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":34
 * cdef tuple closest_pt(pt, list pts, z2):
 *     dist = float('inf')
 *     closest = None             # <<<<<<<<<<<<<<
 *     for p in pts:
 *         x, y = p
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_closest = Py_None;

  /* "neuron/rxd/geometry3d/ctng.pyx":35
 *     dist = float('inf')
 *     closest = None
 *     for p in pts:             # <<<<<<<<<<<<<<
 *         x, y = p
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 */
  if (unlikely(__pyx_v_pts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 35, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_pts; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 35, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":36
 *     closest = None
 *     for p in pts:
 *         x, y = p             # <<<<<<<<<<<<<<
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 *         if d < dist:
 */
    if ((likely(PyTuple_CheckExact(__pyx_v_p))) || (PyList_CheckExact(__pyx_v_p))) {
      PyObject* sequence = __pyx_v_p;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 36, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_v_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
      __pyx_t_6 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 36, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":37
 *     for p in pts:
 *         x, y = p
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))             # <<<<<<<<<<<<<<
 *         if d < dist:
 *             dist = d
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_3 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_7, __pyx_v_pt) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_pt);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_numpy); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_v_x);
    __Pyx_GIVEREF(__pyx_v_x);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_v_x);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_v_y);
    __Pyx_INCREF(__pyx_v_z2);
    __Pyx_GIVEREF(__pyx_v_z2);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_v_z2);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_7) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Subtract(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_8, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_9);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":38
 *         x, y = p
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 *         if d < dist:             # <<<<<<<<<<<<<<
 *             dist = d
 *             closest = p
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_d, __pyx_v_dist, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 38, __pyx_L1_error)
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_11) {

      /* "neuron/rxd/geometry3d/ctng.pyx":39
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 *         if d < dist:
 *             dist = d             # <<<<<<<<<<<<<<
 *             closest = p
 *     return tuple(closest)
 */
      __Pyx_INCREF(__pyx_v_d);
      __Pyx_DECREF_SET(__pyx_v_dist, __pyx_v_d);

      /* "neuron/rxd/geometry3d/ctng.pyx":40
 *         if d < dist:
 *             dist = d
 *             closest = p             # <<<<<<<<<<<<<<
 *     return tuple(closest)
 * 
 */
      __Pyx_INCREF(__pyx_v_p);
      __Pyx_DECREF_SET(__pyx_v_closest, __pyx_v_p);

      /* "neuron/rxd/geometry3d/ctng.pyx":38
 *         x, y = p
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 *         if d < dist:             # <<<<<<<<<<<<<<
 *             dist = d
 *             closest = p
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":35
 *     dist = float('inf')
 *     closest = None
 *     for p in pts:             # <<<<<<<<<<<<<<
 *         x, y = p
 *         d = linalg.norm(numpy.array(pt) - numpy.array((x, y, z2)))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":41
 *             dist = d
 *             closest = p
 *     return tuple(closest)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple extreme_pts(list pts):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PySequence_Tuple(__pyx_v_closest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":32
 *     return (x1 + u * (x2 - x1), y1 + u * (y2 - y1))
 * 
 * cdef tuple closest_pt(pt, list pts, z2):             # <<<<<<<<<<<<<<
 *     dist = float('inf')
 *     closest = None
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.closest_pt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dist);
  __Pyx_XDECREF(__pyx_v_closest);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":43
 *     return tuple(closest)
 * 
 * cdef tuple extreme_pts(list pts):             # <<<<<<<<<<<<<<
 *     if len(pts) < 2: raise RxDException('extreme points computation failed')
 *     cdef double max_dist, d
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_extreme_pts(PyObject *__pyx_v_pts) {
  double __pyx_v_max_dist;
  double __pyx_v_d;
  PyObject *__pyx_v_pt1 = 0;
  PyObject *__pyx_v_pt2 = 0;
  PyObject *__pyx_v_best_p1 = 0;
  PyObject *__pyx_v_best_p2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extreme_pts", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":44
 * 
 * cdef tuple extreme_pts(list pts):
 *     if len(pts) < 2: raise RxDException('extreme points computation failed')             # <<<<<<<<<<<<<<
 *     cdef double max_dist, d
 *     cdef tuple pt1, pt2, best_p1, best_p2
 */
  if (unlikely(__pyx_v_pts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 44, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_pts); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 44, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 < 2) != 0);
  if (unlikely(__pyx_t_2)) {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_s_extreme_points_computation_faile) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_s_extreme_points_computation_faile);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 44, __pyx_L1_error)
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":47
 *     cdef double max_dist, d
 *     cdef tuple pt1, pt2, best_p1, best_p2
 *     max_dist = -1             # <<<<<<<<<<<<<<
 * 
 *     for pt1, pt2 in itertools.combinations(pts, 2):
 */
  __pyx_v_max_dist = -1.0;

  /* "neuron/rxd/geometry3d/ctng.pyx":49
 *     max_dist = -1
 * 
 *     for pt1, pt2 in itertools.combinations(pts, 2):             # <<<<<<<<<<<<<<
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))
 *         if d > max_dist:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_itertools); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_combinations); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_pts, __pyx_int_2};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_pts, __pyx_int_2};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_pts);
    __Pyx_GIVEREF(__pyx_v_pts);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_v_pts);
    __Pyx_INCREF(__pyx_int_2);
    __Pyx_GIVEREF(__pyx_int_2);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_int_2);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 49, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 49, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 49, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 49, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 49, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_9 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 49, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_4 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(0, 49, __pyx_L1_error)
      __pyx_t_10 = NULL;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 49, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    if (!(likely(PyTuple_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_7)->tp_name), 0))) __PYX_ERR(0, 49, __pyx_L1_error)
    if (!(likely(PyTuple_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(0, 49, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_pt1, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt2, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":50
 * 
 *     for pt1, pt2 in itertools.combinations(pts, 2):
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))             # <<<<<<<<<<<<<<
 *         if d > max_dist:
 *             best_p1 = pt1
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_linalg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_norm); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_9, __pyx_v_pt1) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_pt1);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_11 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_9, __pyx_v_pt2) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_pt2);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyNumber_Subtract(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_3 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_11, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 50, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_d = __pyx_t_13;

    /* "neuron/rxd/geometry3d/ctng.pyx":51
 *     for pt1, pt2 in itertools.combinations(pts, 2):
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))
 *         if d > max_dist:             # <<<<<<<<<<<<<<
 *             best_p1 = pt1
 *             best_p2 = pt2
 */
    __pyx_t_2 = ((__pyx_v_d > __pyx_v_max_dist) != 0);
    if (__pyx_t_2) {

      /* "neuron/rxd/geometry3d/ctng.pyx":52
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))
 *         if d > max_dist:
 *             best_p1 = pt1             # <<<<<<<<<<<<<<
 *             best_p2 = pt2
 *             max_dist = d
 */
      __Pyx_INCREF(__pyx_v_pt1);
      __Pyx_XDECREF_SET(__pyx_v_best_p1, __pyx_v_pt1);

      /* "neuron/rxd/geometry3d/ctng.pyx":53
 *         if d > max_dist:
 *             best_p1 = pt1
 *             best_p2 = pt2             # <<<<<<<<<<<<<<
 *             max_dist = d
 *     return best_p1, best_p2
 */
      __Pyx_INCREF(__pyx_v_pt2);
      __Pyx_XDECREF_SET(__pyx_v_best_p2, __pyx_v_pt2);

      /* "neuron/rxd/geometry3d/ctng.pyx":54
 *             best_p1 = pt1
 *             best_p2 = pt2
 *             max_dist = d             # <<<<<<<<<<<<<<
 *     return best_p1, best_p2
 * 
 */
      __pyx_v_max_dist = __pyx_v_d;

      /* "neuron/rxd/geometry3d/ctng.pyx":51
 *     for pt1, pt2 in itertools.combinations(pts, 2):
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))
 *         if d > max_dist:             # <<<<<<<<<<<<<<
 *             best_p1 = pt1
 *             best_p2 = pt2
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":49
 *     max_dist = -1
 * 
 *     for pt1, pt2 in itertools.combinations(pts, 2):             # <<<<<<<<<<<<<<
 *         d = linalg.norm(numpy.array(pt1) - numpy.array(pt2))
 *         if d > max_dist:
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":55
 *             best_p2 = pt2
 *             max_dist = d
 *     return best_p1, best_p2             # <<<<<<<<<<<<<<
 * 
 * # helper function for maintaing the points-cones database
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_best_p1)) { __Pyx_RaiseUnboundLocalError("best_p1"); __PYX_ERR(0, 55, __pyx_L1_error) }
  if (unlikely(!__pyx_v_best_p2)) { __Pyx_RaiseUnboundLocalError("best_p2"); __PYX_ERR(0, 55, __pyx_L1_error) }
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_best_p1);
  __Pyx_GIVEREF(__pyx_v_best_p1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_best_p1);
  __Pyx_INCREF(__pyx_v_best_p2);
  __Pyx_GIVEREF(__pyx_v_best_p2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_best_p2);
  __pyx_r = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":43
 *     return tuple(closest)
 * 
 * cdef tuple extreme_pts(list pts):             # <<<<<<<<<<<<<<
 *     if len(pts) < 2: raise RxDException('extreme points computation failed')
 *     cdef double max_dist, d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.extreme_pts", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pt1);
  __Pyx_XDECREF(__pyx_v_pt2);
  __Pyx_XDECREF(__pyx_v_best_p1);
  __Pyx_XDECREF(__pyx_v_best_p2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":58
 * 
 * # helper function for maintaing the points-cones database
 * cdef register(dict pts_cones_db, tuple pt, cone):             # <<<<<<<<<<<<<<
 *     if pt not in pts_cones_db:
 *         pts_cones_db[pt] = []
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(PyObject *__pyx_v_pts_cones_db, PyObject *__pyx_v_pt, PyObject *__pyx_v_cone) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":59
 * # helper function for maintaing the points-cones database
 * cdef register(dict pts_cones_db, tuple pt, cone):
 *     if pt not in pts_cones_db:             # <<<<<<<<<<<<<<
 *         pts_cones_db[pt] = []
 *     pts_cones_db[pt].append(cone)
 */
  if (unlikely(__pyx_v_pts_cones_db == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 59, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_pt, __pyx_v_pts_cones_db, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 59, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "neuron/rxd/geometry3d/ctng.pyx":60
 * cdef register(dict pts_cones_db, tuple pt, cone):
 *     if pt not in pts_cones_db:
 *         pts_cones_db[pt] = []             # <<<<<<<<<<<<<<
 *     pts_cones_db[pt].append(cone)
 * 
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__pyx_v_pts_cones_db == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 60, __pyx_L1_error)
    }
    if (unlikely(PyDict_SetItem(__pyx_v_pts_cones_db, __pyx_v_pt, __pyx_t_3) < 0)) __PYX_ERR(0, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":59
 * # helper function for maintaing the points-cones database
 * cdef register(dict pts_cones_db, tuple pt, cone):
 *     if pt not in pts_cones_db:             # <<<<<<<<<<<<<<
 *         pts_cones_db[pt] = []
 *     pts_cones_db[pt].append(cone)
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":61
 *     if pt not in pts_cones_db:
 *         pts_cones_db[pt] = []
 *     pts_cones_db[pt].append(cone)             # <<<<<<<<<<<<<<
 * 
 * # helper function that counts the number of points inside a region
 */
  if (unlikely(__pyx_v_pts_cones_db == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 61, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_pts_cones_db, __pyx_v_pt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Append(__pyx_t_3, __pyx_v_cone); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":58
 * 
 * # helper function for maintaing the points-cones database
 * cdef register(dict pts_cones_db, tuple pt, cone):             # <<<<<<<<<<<<<<
 *     if pt not in pts_cones_db:
 *         pts_cones_db[pt] = []
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.register", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":66
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef int count_outside(region, list pts, double err):             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt
 *     cdef int result = 0
 */

static int __pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(PyObject *__pyx_v_region, PyObject *__pyx_v_pts, double __pyx_v_err) {
  PyArrayObject *__pyx_v_pt = 0;
  int __pyx_v_result;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pt;
  __Pyx_Buffer __pyx_pybuffer_pt;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyArrayObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_outside", 0);
  __pyx_pybuffer_pt.pybuffer.buf = NULL;
  __pyx_pybuffer_pt.refcount = 0;
  __pyx_pybuffernd_pt.data = NULL;
  __pyx_pybuffernd_pt.rcbuffer = &__pyx_pybuffer_pt;

  /* "neuron/rxd/geometry3d/ctng.pyx":68
 * cdef int count_outside(region, list pts, double err):
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt
 *     cdef int result = 0             # <<<<<<<<<<<<<<
 *     for pt in pts:
 *         if region.distance(pt[0], pt[1], pt[2]) > err:
 */
  __pyx_v_result = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":69
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt
 *     cdef int result = 0
 *     for pt in pts:             # <<<<<<<<<<<<<<
 *         if region.distance(pt[0], pt[1], pt[2]) > err:
 *             result += 1
 */
  if (unlikely(__pyx_v_pts == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 69, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_pts; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 69, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 69, __pyx_L1_error)
    __pyx_t_4 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
      __pyx_t_5 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt.rcbuffer->pybuffer, (PyObject*)__pyx_t_4, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_5 < 0)) {
        PyErr_Fetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt.rcbuffer->pybuffer, (PyObject*)__pyx_v_pt, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
        }
        __pyx_t_6 = __pyx_t_7 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_pt.diminfo[0].strides = __pyx_pybuffernd_pt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pt.diminfo[0].shape = __pyx_pybuffernd_pt.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 69, __pyx_L1_error)
    }
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":70
 *     cdef int result = 0
 *     for pt in pts:
 *         if region.distance(pt[0], pt[1], pt[2]) > err:             # <<<<<<<<<<<<<<
 *             result += 1
 *     return result
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_region, __pyx_n_s_distance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = 0;
    __pyx_t_11 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_pt.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pt.diminfo[0].strides))); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_10 = 1;
    __pyx_t_12 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_pt.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pt.diminfo[0].strides))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = 2;
    __pyx_t_13 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_pt.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pt.diminfo[0].strides))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_5 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_11, __pyx_t_12, __pyx_t_13};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[4] = {__pyx_t_14, __pyx_t_11, __pyx_t_12, __pyx_t_13};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_5, 3+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_15 = PyTuple_New(3+__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (__pyx_t_14) {
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_5, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_5, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_15, 2+__pyx_t_5, __pyx_t_13);
      __pyx_t_11 = 0;
      __pyx_t_12 = 0;
      __pyx_t_13 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_15, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 70, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_err); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_15 = PyObject_RichCompare(__pyx_t_3, __pyx_t_9, Py_GT); __Pyx_XGOTREF(__pyx_t_15); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely(__pyx_t_16 < 0)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (__pyx_t_16) {

      /* "neuron/rxd/geometry3d/ctng.pyx":71
 *     for pt in pts:
 *         if region.distance(pt[0], pt[1], pt[2]) > err:
 *             result += 1             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
      __pyx_v_result = (__pyx_v_result + 1);

      /* "neuron/rxd/geometry3d/ctng.pyx":70
 *     cdef int result = 0
 *     for pt in pts:
 *         if region.distance(pt[0], pt[1], pt[2]) > err:             # <<<<<<<<<<<<<<
 *             result += 1
 *     return result
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":69
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt
 *     cdef int result = 0
 *     for pt in pts:             # <<<<<<<<<<<<<<
 *         if region.distance(pt[0], pt[1], pt[2]) > err:
 *             result += 1
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":72
 *         if region.distance(pt[0], pt[1], pt[2]) > err:
 *             result += 1
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":66
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef int count_outside(region, list pts, double err):             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt
 *     cdef int result = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_WriteUnraisable("neuron.rxd.geometry3d.ctng.count_outside", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pt);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":76
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple get_infinite_cones(double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2, double r2):             # <<<<<<<<<<<<<<
 *     cdef double deltar, deltanr
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] axis, naxis
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_get_infinite_cones(double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2, double __pyx_v_r2) {
  double __pyx_v_deltar;
  double __pyx_v_deltanr;
  PyArrayObject *__pyx_v_axis = 0;
  PyArrayObject *__pyx_v_naxis = 0;
  double __pyx_v_offset0;
  double __pyx_v_offset1;
  double __pyx_v_offset1b;
  double __pyx_v_offset2;
  PyObject *__pyx_v_c0 = NULL;
  PyObject *__pyx_v_c1 = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_axis;
  __Pyx_Buffer __pyx_pybuffer_axis;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_naxis;
  __Pyx_Buffer __pyx_pybuffer_naxis;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_infinite_cones", 0);
  __pyx_pybuffer_axis.pybuffer.buf = NULL;
  __pyx_pybuffer_axis.refcount = 0;
  __pyx_pybuffernd_axis.data = NULL;
  __pyx_pybuffernd_axis.rcbuffer = &__pyx_pybuffer_axis;
  __pyx_pybuffer_naxis.pybuffer.buf = NULL;
  __pyx_pybuffer_naxis.refcount = 0;
  __pyx_pybuffernd_naxis.data = NULL;
  __pyx_pybuffernd_naxis.rcbuffer = &__pyx_pybuffer_naxis;

  /* "neuron/rxd/geometry3d/ctng.pyx":80
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] axis, naxis
 * 
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])             # <<<<<<<<<<<<<<
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])
 *     deltar = r2 - r1; deltanr = r1 - r0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x2 - __pyx_v_x1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_y2 - __pyx_v_y1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_z2 - __pyx_v_z1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_v_axis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_axis.diminfo[0].strides = __pyx_pybuffernd_axis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_axis.diminfo[0].shape = __pyx_pybuffernd_axis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 80, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_axis = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":81
 * 
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])             # <<<<<<<<<<<<<<
 *     deltar = r2 - r1; deltanr = r1 - r0
 *     deltar /= linalg.norm(axis); deltanr /= linalg.norm(naxis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_x1 - __pyx_v_x0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_y1 - __pyx_v_y0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_z1 - __pyx_v_z0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_v_naxis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_naxis.diminfo[0].strides = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_naxis.diminfo[0].shape = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_naxis = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":82
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])
 *     deltar = r2 - r1; deltanr = r1 - r0             # <<<<<<<<<<<<<<
 *     deltar /= linalg.norm(axis); deltanr /= linalg.norm(naxis)
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)
 */
  __pyx_v_deltar = (__pyx_v_r2 - __pyx_v_r1);
  __pyx_v_deltanr = (__pyx_v_r1 - __pyx_v_r0);

  /* "neuron/rxd/geometry3d/ctng.pyx":83
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])
 *     deltar = r2 - r1; deltanr = r1 - r0
 *     deltar /= linalg.norm(axis); deltanr /= linalg.norm(naxis)             # <<<<<<<<<<<<<<
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)
 *     #
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_deltar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_6 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, ((PyObject *)__pyx_v_axis)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_axis));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_InPlaceDivide(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_deltar = __pyx_t_12;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_deltanr); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, ((PyObject *)__pyx_v_naxis)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_naxis));
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_InPlaceDivide(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_deltanr = __pyx_t_12;

  /* "neuron/rxd/geometry3d/ctng.pyx":84
 *     deltar = r2 - r1; deltanr = r1 - r0
 *     deltar /= linalg.norm(axis); deltanr /= linalg.norm(naxis)
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)             # <<<<<<<<<<<<<<
 *     #
 *     # sphere, clipped to extended cones
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_linalg); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, ((PyObject *)__pyx_v_axis)) : __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_axis));
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_axis), __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_v_axis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_axis.diminfo[0].strides = __pyx_pybuffernd_axis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_axis.diminfo[0].shape = __pyx_pybuffernd_axis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_axis, ((PyArrayObject *)__pyx_t_4));
  __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_2, ((PyObject *)__pyx_v_naxis)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_naxis));
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_naxis), __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_v_naxis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_naxis.diminfo[0].strides = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_naxis.diminfo[0].shape = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_naxis, ((PyArrayObject *)__pyx_t_6));
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":89
 *     # CTNG:trimsphere
 *     #
 *     offset0 = r0             # <<<<<<<<<<<<<<
 *     offset1 = r1
 *     offset1b = r1
 */
  __pyx_v_offset0 = __pyx_v_r0;

  /* "neuron/rxd/geometry3d/ctng.pyx":90
 *     #
 *     offset0 = r0
 *     offset1 = r1             # <<<<<<<<<<<<<<
 *     offset1b = r1
 *     offset2 = r2
 */
  __pyx_v_offset1 = __pyx_v_r1;

  /* "neuron/rxd/geometry3d/ctng.pyx":91
 *     offset0 = r0
 *     offset1 = r1
 *     offset1b = r1             # <<<<<<<<<<<<<<
 *     offset2 = r2
 *     if r0 - deltanr * offset0 < 0:
 */
  __pyx_v_offset1b = __pyx_v_r1;

  /* "neuron/rxd/geometry3d/ctng.pyx":92
 *     offset1 = r1
 *     offset1b = r1
 *     offset2 = r2             # <<<<<<<<<<<<<<
 *     if r0 - deltanr * offset0 < 0:
 *         # don't go that far (reduce offset0 so that this comes out 0)
 */
  __pyx_v_offset2 = __pyx_v_r2;

  /* "neuron/rxd/geometry3d/ctng.pyx":93
 *     offset1b = r1
 *     offset2 = r2
 *     if r0 - deltanr * offset0 < 0:             # <<<<<<<<<<<<<<
 *         # don't go that far (reduce offset0 so that this comes out 0)
 *         offset0 = r0 / deltanr
 */
  __pyx_t_13 = (((__pyx_v_r0 - (__pyx_v_deltanr * __pyx_v_offset0)) < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/ctng.pyx":95
 *     if r0 - deltanr * offset0 < 0:
 *         # don't go that far (reduce offset0 so that this comes out 0)
 *         offset0 = r0 / deltanr             # <<<<<<<<<<<<<<
 *     if r1 + deltanr * offset1 < 0:
 *         offset1 = -r1 / deltanr
 */
    if (unlikely(__pyx_v_deltanr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_v_offset0 = (__pyx_v_r0 / __pyx_v_deltanr);

    /* "neuron/rxd/geometry3d/ctng.pyx":93
 *     offset1b = r1
 *     offset2 = r2
 *     if r0 - deltanr * offset0 < 0:             # <<<<<<<<<<<<<<
 *         # don't go that far (reduce offset0 so that this comes out 0)
 *         offset0 = r0 / deltanr
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":96
 *         # don't go that far (reduce offset0 so that this comes out 0)
 *         offset0 = r0 / deltanr
 *     if r1 + deltanr * offset1 < 0:             # <<<<<<<<<<<<<<
 *         offset1 = -r1 / deltanr
 *     if r1 - deltar * offset1b < 0:
 */
  __pyx_t_13 = (((__pyx_v_r1 + (__pyx_v_deltanr * __pyx_v_offset1)) < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/ctng.pyx":97
 *         offset0 = r0 / deltanr
 *     if r1 + deltanr * offset1 < 0:
 *         offset1 = -r1 / deltanr             # <<<<<<<<<<<<<<
 *     if r1 - deltar * offset1b < 0:
 *         offset1b = r1 / deltar
 */
    __pyx_t_12 = (-__pyx_v_r1);
    if (unlikely(__pyx_v_deltanr == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    __pyx_v_offset1 = (__pyx_t_12 / __pyx_v_deltanr);

    /* "neuron/rxd/geometry3d/ctng.pyx":96
 *         # don't go that far (reduce offset0 so that this comes out 0)
 *         offset0 = r0 / deltanr
 *     if r1 + deltanr * offset1 < 0:             # <<<<<<<<<<<<<<
 *         offset1 = -r1 / deltanr
 *     if r1 - deltar * offset1b < 0:
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":98
 *     if r1 + deltanr * offset1 < 0:
 *         offset1 = -r1 / deltanr
 *     if r1 - deltar * offset1b < 0:             # <<<<<<<<<<<<<<
 *         offset1b = r1 / deltar
 *     if r2 + deltar * offset2 < 0:
 */
  __pyx_t_13 = (((__pyx_v_r1 - (__pyx_v_deltar * __pyx_v_offset1b)) < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/ctng.pyx":99
 *         offset1 = -r1 / deltanr
 *     if r1 - deltar * offset1b < 0:
 *         offset1b = r1 / deltar             # <<<<<<<<<<<<<<
 *     if r2 + deltar * offset2 < 0:
 *         offset2 = -r2 / deltar
 */
    if (unlikely(__pyx_v_deltar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 99, __pyx_L1_error)
    }
    __pyx_v_offset1b = (__pyx_v_r1 / __pyx_v_deltar);

    /* "neuron/rxd/geometry3d/ctng.pyx":98
 *     if r1 + deltanr * offset1 < 0:
 *         offset1 = -r1 / deltanr
 *     if r1 - deltar * offset1b < 0:             # <<<<<<<<<<<<<<
 *         offset1b = r1 / deltar
 *     if r2 + deltar * offset2 < 0:
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":100
 *     if r1 - deltar * offset1b < 0:
 *         offset1b = r1 / deltar
 *     if r2 + deltar * offset2 < 0:             # <<<<<<<<<<<<<<
 *         offset2 = -r2 / deltar
 * 
 */
  __pyx_t_13 = (((__pyx_v_r2 + (__pyx_v_deltar * __pyx_v_offset2)) < 0.0) != 0);
  if (__pyx_t_13) {

    /* "neuron/rxd/geometry3d/ctng.pyx":101
 *         offset1b = r1 / deltar
 *     if r2 + deltar * offset2 < 0:
 *         offset2 = -r2 / deltar             # <<<<<<<<<<<<<<
 * 
 *     c0 = Cone(x0 - naxis[0] * offset0, y0 - naxis[1] * offset0, z0 - naxis[2] * offset0, r0 - deltanr * offset0, x1 + naxis[0] * offset1, y1 + naxis[1] * offset1, z1 + naxis[2] * offset1, r1 + deltanr * offset1)
 */
    __pyx_t_12 = (-__pyx_v_r2);
    if (unlikely(__pyx_v_deltar == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_v_offset2 = (__pyx_t_12 / __pyx_v_deltar);

    /* "neuron/rxd/geometry3d/ctng.pyx":100
 *     if r1 - deltar * offset1b < 0:
 *         offset1b = r1 / deltar
 *     if r2 + deltar * offset2 < 0:             # <<<<<<<<<<<<<<
 *         offset2 = -r2 / deltar
 * 
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":103
 *         offset2 = -r2 / deltar
 * 
 *     c0 = Cone(x0 - naxis[0] * offset0, y0 - naxis[1] * offset0, z0 - naxis[2] * offset0, r0 - deltanr * offset0, x1 + naxis[0] * offset1, y1 + naxis[1] * offset1, z1 + naxis[2] * offset1, r1 + deltanr * offset1)             # <<<<<<<<<<<<<<
 *     c1 = Cone(x1 - axis[0] * offset1b, y1 - axis[1] * offset1b, z1 - axis[2] * offset1b, r1 - deltar * offset1b, x2 + axis[0] * offset2, y2 + axis[1] * offset2, z2 + axis[2] * offset2, r2 + deltar * offset2)
 *     return c0, c1
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Cone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = 0;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x0 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset0))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_14 = 1;
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_y0 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_14 = 2;
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_z0 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset0))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_r0 - (__pyx_v_deltanr * __pyx_v_offset0))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = 0;
  __pyx_t_15 = PyFloat_FromDouble((__pyx_v_x1 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset1))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_14 = 1;
  __pyx_t_16 = PyFloat_FromDouble((__pyx_v_y1 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset1))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_14 = 2;
  __pyx_t_17 = PyFloat_FromDouble((__pyx_v_z1 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_naxis.diminfo[0].strides)) * __pyx_v_offset1))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyFloat_FromDouble((__pyx_v_r1 + (__pyx_v_deltanr * __pyx_v_offset1))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_19 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_19)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[9] = {__pyx_t_19, __pyx_t_2, __pyx_t_1, __pyx_t_5, __pyx_t_3, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[9] = {__pyx_t_19, __pyx_t_2, __pyx_t_1, __pyx_t_5, __pyx_t_3, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  } else
  #endif
  {
    __pyx_t_20 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    if (__pyx_t_19) {
      __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_8, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_8, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_20, 6+__pyx_t_8, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_20, 7+__pyx_t_8, __pyx_t_18);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;
    __pyx_t_15 = 0;
    __pyx_t_16 = 0;
    __pyx_t_17 = 0;
    __pyx_t_18 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_c0 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":104
 * 
 *     c0 = Cone(x0 - naxis[0] * offset0, y0 - naxis[1] * offset0, z0 - naxis[2] * offset0, r0 - deltanr * offset0, x1 + naxis[0] * offset1, y1 + naxis[1] * offset1, z1 + naxis[2] * offset1, r1 + deltanr * offset1)
 *     c1 = Cone(x1 - axis[0] * offset1b, y1 - axis[1] * offset1b, z1 - axis[2] * offset1b, r1 - deltar * offset1b, x2 + axis[0] * offset2, y2 + axis[1] * offset2, z2 + axis[2] * offset2, r2 + deltar * offset2)             # <<<<<<<<<<<<<<
 *     return c0, c1
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Cone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_14 = 0;
  __pyx_t_20 = PyFloat_FromDouble((__pyx_v_x1 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset1b))); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_14 = 1;
  __pyx_t_18 = PyFloat_FromDouble((__pyx_v_y1 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset1b))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_14 = 2;
  __pyx_t_17 = PyFloat_FromDouble((__pyx_v_z1 - ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset1b))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_16 = PyFloat_FromDouble((__pyx_v_r1 - (__pyx_v_deltar * __pyx_v_offset1b))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_14 = 0;
  __pyx_t_15 = PyFloat_FromDouble((__pyx_v_x2 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset2))); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_14 = 1;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_y2 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset2))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = 2;
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_z2 + ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_axis.diminfo[0].strides)) * __pyx_v_offset2))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_r2 + (__pyx_v_deltar * __pyx_v_offset2))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[9] = {__pyx_t_2, __pyx_t_20, __pyx_t_18, __pyx_t_17, __pyx_t_16, __pyx_t_15, __pyx_t_3, __pyx_t_5, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[9] = {__pyx_t_2, __pyx_t_20, __pyx_t_18, __pyx_t_17, __pyx_t_16, __pyx_t_15, __pyx_t_3, __pyx_t_5, __pyx_t_1};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else
  #endif
  {
    __pyx_t_19 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_20);
    PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_8, __pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_18);
    PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_8, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_17);
    PyTuple_SET_ITEM(__pyx_t_19, 2+__pyx_t_8, __pyx_t_17);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_19, 3+__pyx_t_8, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_19, 4+__pyx_t_8, __pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_19, 5+__pyx_t_8, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_19, 6+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_19, 7+__pyx_t_8, __pyx_t_1);
    __pyx_t_20 = 0;
    __pyx_t_18 = 0;
    __pyx_t_17 = 0;
    __pyx_t_16 = 0;
    __pyx_t_15 = 0;
    __pyx_t_3 = 0;
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_19, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_c1 = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":105
 *     c0 = Cone(x0 - naxis[0] * offset0, y0 - naxis[1] * offset0, z0 - naxis[2] * offset0, r0 - deltanr * offset0, x1 + naxis[0] * offset1, y1 + naxis[1] * offset1, z1 + naxis[2] * offset1, r1 + deltanr * offset1)
 *     c1 = Cone(x1 - axis[0] * offset1b, y1 - axis[1] * offset1b, z1 - axis[2] * offset1b, r1 - deltar * offset1b, x2 + axis[0] * offset2, y2 + axis[1] * offset2, z2 + axis[2] * offset2, r2 + deltar * offset2)
 *     return c0, c1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_c0);
  __Pyx_GIVEREF(__pyx_v_c0);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_c0);
  __Pyx_INCREF(__pyx_v_c1);
  __Pyx_GIVEREF(__pyx_v_c1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_c1);
  __pyx_r = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":76
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef tuple get_infinite_cones(double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2, double r2):             # <<<<<<<<<<<<<<
 *     cdef double deltar, deltanr
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] axis, naxis
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.get_infinite_cones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_axis);
  __Pyx_XDECREF((PyObject *)__pyx_v_naxis);
  __Pyx_XDECREF(__pyx_v_c0);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef list join_outside(double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2, double r2, double dx):             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt1, radial_vec, nradial_vec, axis, naxis
 * 
 */

static PyObject *__pyx_f_6neuron_3rxd_10geometry3d_4ctng_join_outside(double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, double __pyx_v_r0, double __pyx_v_x1, double __pyx_v_y1, double __pyx_v_z1, double __pyx_v_r1, double __pyx_v_x2, double __pyx_v_y2, double __pyx_v_z2, double __pyx_v_r2, double __pyx_v_dx) {
  PyArrayObject *__pyx_v_pt1 = 0;
  PyArrayObject *__pyx_v_radial_vec = 0;
  PyArrayObject *__pyx_v_nradial_vec = 0;
  PyArrayObject *__pyx_v_axis = 0;
  PyArrayObject *__pyx_v_naxis = 0;
  PyObject *__pyx_v_c0 = NULL;
  PyObject *__pyx_v_c1 = NULL;
  PyObject *__pyx_v_sp = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_plane_normal = NULL;
  int __pyx_v_left_corner_count;
  int __pyx_v_corner_count;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_axis;
  __Pyx_Buffer __pyx_pybuffer_axis;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_naxis;
  __Pyx_Buffer __pyx_pybuffer_naxis;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_nradial_vec;
  __Pyx_Buffer __pyx_pybuffer_nradial_vec;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pt1;
  __Pyx_Buffer __pyx_pybuffer_pt1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_radial_vec;
  __Pyx_Buffer __pyx_pybuffer_radial_vec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("join_outside", 0);
  __pyx_pybuffer_pt1.pybuffer.buf = NULL;
  __pyx_pybuffer_pt1.refcount = 0;
  __pyx_pybuffernd_pt1.data = NULL;
  __pyx_pybuffernd_pt1.rcbuffer = &__pyx_pybuffer_pt1;
  __pyx_pybuffer_radial_vec.pybuffer.buf = NULL;
  __pyx_pybuffer_radial_vec.refcount = 0;
  __pyx_pybuffernd_radial_vec.data = NULL;
  __pyx_pybuffernd_radial_vec.rcbuffer = &__pyx_pybuffer_radial_vec;
  __pyx_pybuffer_nradial_vec.pybuffer.buf = NULL;
  __pyx_pybuffer_nradial_vec.refcount = 0;
  __pyx_pybuffernd_nradial_vec.data = NULL;
  __pyx_pybuffernd_nradial_vec.rcbuffer = &__pyx_pybuffer_nradial_vec;
  __pyx_pybuffer_axis.pybuffer.buf = NULL;
  __pyx_pybuffer_axis.refcount = 0;
  __pyx_pybuffernd_axis.data = NULL;
  __pyx_pybuffernd_axis.rcbuffer = &__pyx_pybuffer_axis;
  __pyx_pybuffer_naxis.pybuffer.buf = NULL;
  __pyx_pybuffer_naxis.refcount = 0;
  __pyx_pybuffernd_naxis.data = NULL;
  __pyx_pybuffernd_naxis.rcbuffer = &__pyx_pybuffer_naxis;

  /* "neuron/rxd/geometry3d/ctng.pyx":113
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt1, radial_vec, nradial_vec, axis, naxis
 * 
 *     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)             # <<<<<<<<<<<<<<
 * 
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])
 */
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_get_infinite_cones(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 113, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 113, __pyx_L1_error)
  }
  __pyx_v_c0 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_c1 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":115
 *     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 * 
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])             # <<<<<<<<<<<<<<
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_x2 - __pyx_v_x1)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_y2 - __pyx_v_y1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_z2 - __pyx_v_z1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 115, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_v_axis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_axis.diminfo[0].strides = __pyx_pybuffernd_axis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_axis.diminfo[0].shape = __pyx_pybuffernd_axis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 115, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_axis = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":116
 * 
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])             # <<<<<<<<<<<<<<
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)
 *     #
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_x1 - __pyx_v_x0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_y1 - __pyx_v_y0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_z1 - __pyx_v_z0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 116, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_v_naxis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_naxis.diminfo[0].strides = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_naxis.diminfo[0].shape = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 116, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_naxis = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":117
 *     axis = numpy.array([x2 - x1, y2 - y1, z2 - z1])
 *     naxis = numpy.array([x1 - x0, y1 - y0, z1 - z0])
 *     axis /= linalg.norm(axis); naxis /= linalg.norm(naxis)             # <<<<<<<<<<<<<<
 *     #
 *     # sphere, clipped to extended cones
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_linalg); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, ((PyObject *)__pyx_v_axis)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_axis));
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_axis), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_axis.rcbuffer->pybuffer, (PyObject*)__pyx_v_axis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_axis.diminfo[0].strides = __pyx_pybuffernd_axis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_axis.diminfo[0].shape = __pyx_pybuffernd_axis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_axis, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_1, ((PyObject *)__pyx_v_naxis)) : __Pyx_PyObject_CallOneArg(__pyx_t_6, ((PyObject *)__pyx_v_naxis));
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_naxis), __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer, (PyObject*)__pyx_v_naxis, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_naxis.diminfo[0].strides = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_naxis.diminfo[0].shape = __pyx_pybuffernd_naxis.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 117, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_naxis, ((PyArrayObject *)__pyx_t_6));
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":122
 *     # CTNG:trimsphere
 *     #
 *     sp = Sphere(x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *     sp.set_clip([Intersection([c0, c1])])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_12 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_12, __pyx_t_1, __pyx_t_4, __pyx_t_5, __pyx_t_2};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[5] = {__pyx_t_12, __pyx_t_1, __pyx_t_4, __pyx_t_5, __pyx_t_2};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_12) {
      __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_8, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_8, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_8, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_13, 3+__pyx_t_8, __pyx_t_2);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 122, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_sp = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":123
 *     #
 *     sp = Sphere(x1, y1, z1, r1)
 *     sp.set_clip([Intersection([c0, c1])])             # <<<<<<<<<<<<<<
 * 
 *     result = [sp]
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_c0);
  __Pyx_GIVEREF(__pyx_v_c0);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_c0);
  __Pyx_INCREF(__pyx_v_c1);
  __Pyx_GIVEREF(__pyx_v_c1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_c1);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_13 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_13);
  __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_6 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_13, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":125
 *     sp.set_clip([Intersection([c0, c1])])
 * 
 *     result = [sp]             # <<<<<<<<<<<<<<
 *     # check to see if the clipped sphere covers the ends of the cones
 *     # if not, do something else :)
 */
  __pyx_t_6 = PyList_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_sp);
  __Pyx_GIVEREF(__pyx_v_sp);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_v_sp);
  __pyx_v_result = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":130
 * 
 *     # locate key vectors
 *     plane_normal = numpy.cross(axis, naxis)             # <<<<<<<<<<<<<<
 *     radial_vec = numpy.cross(plane_normal, axis)
 *     nradial_vec = numpy.cross(plane_normal, naxis)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_cross); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_axis), ((PyObject *)__pyx_v_naxis)};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, ((PyObject *)__pyx_v_axis), ((PyObject *)__pyx_v_naxis)};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_13 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_axis));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_axis));
    PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_8, ((PyObject *)__pyx_v_axis));
    __Pyx_INCREF(((PyObject *)__pyx_v_naxis));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_naxis));
    PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_8, ((PyObject *)__pyx_v_naxis));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_13, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_plane_normal = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":131
 *     # locate key vectors
 *     plane_normal = numpy.cross(axis, naxis)
 *     radial_vec = numpy.cross(plane_normal, axis)             # <<<<<<<<<<<<<<
 *     nradial_vec = numpy.cross(plane_normal, naxis)
 *     # normalize all of these
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cross); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_plane_normal, ((PyObject *)__pyx_v_axis)};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_plane_normal, ((PyObject *)__pyx_v_axis)};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_3 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_plane_normal);
    __Pyx_GIVEREF(__pyx_v_plane_normal);
    PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_8, __pyx_v_plane_normal);
    __Pyx_INCREF(((PyObject *)__pyx_v_axis));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_axis));
    PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_8, ((PyObject *)__pyx_v_axis));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_radial_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_radial_vec.diminfo[0].strides = __pyx_pybuffernd_radial_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_radial_vec.diminfo[0].shape = __pyx_pybuffernd_radial_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 131, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_radial_vec = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":132
 *     plane_normal = numpy.cross(axis, naxis)
 *     radial_vec = numpy.cross(plane_normal, axis)
 *     nradial_vec = numpy.cross(plane_normal, naxis)             # <<<<<<<<<<<<<<
 *     # normalize all of these
 *     radial_vec /= linalg.norm(radial_vec)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_cross); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_8 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_plane_normal, ((PyObject *)__pyx_v_naxis)};
    __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_plane_normal, ((PyObject *)__pyx_v_naxis)};
    __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_GOTREF(__pyx_t_6);
  } else
  #endif
  {
    __pyx_t_2 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__pyx_t_13) {
      __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_13); __pyx_t_13 = NULL;
    }
    __Pyx_INCREF(__pyx_v_plane_normal);
    __Pyx_GIVEREF(__pyx_v_plane_normal);
    PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_8, __pyx_v_plane_normal);
    __Pyx_INCREF(((PyObject *)__pyx_v_naxis));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_naxis));
    PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_8, ((PyObject *)__pyx_v_naxis));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 132, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_nradial_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_nradial_vec.diminfo[0].strides = __pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nradial_vec.diminfo[0].shape = __pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_nradial_vec = ((PyArrayObject *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":134
 *     nradial_vec = numpy.cross(plane_normal, naxis)
 *     # normalize all of these
 *     radial_vec /= linalg.norm(radial_vec)             # <<<<<<<<<<<<<<
 *     nradial_vec /= linalg.norm(nradial_vec)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_6 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, ((PyObject *)__pyx_v_radial_vec)) : __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_radial_vec));
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_radial_vec), __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 134, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_radial_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_radial_vec.diminfo[0].strides = __pyx_pybuffernd_radial_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_radial_vec.diminfo[0].shape = __pyx_pybuffernd_radial_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 134, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_radial_vec, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":135
 *     # normalize all of these
 *     radial_vec /= linalg.norm(radial_vec)
 *     nradial_vec /= linalg.norm(nradial_vec)             # <<<<<<<<<<<<<<
 * 
 *     # count the corners that are inside a sphere clipped to the cones
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_linalg); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_6, ((PyObject *)__pyx_v_nradial_vec)) : __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_nradial_vec));
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_InPlaceDivide(((PyObject *)__pyx_v_nradial_vec), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 135, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_nradial_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_nradial_vec.diminfo[0].strides = __pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_nradial_vec.diminfo[0].shape = __pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 135, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __Pyx_DECREF_SET(__pyx_v_nradial_vec, ((PyArrayObject *)__pyx_t_3));
  __pyx_t_3 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":138
 * 
 *     # count the corners that are inside a sphere clipped to the cones
 *     pt1 = numpy.array([x1, y1, z1])             # <<<<<<<<<<<<<<
 *     cdef int left_corner_count = 2 - count_outside(sp, [pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec], dx * 0.5)
 *     cdef int corner_count = 2 - count_outside(sp, [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec], dx * 0.5)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_numpy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_13);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_13 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 138, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt1.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt1.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt1.rcbuffer->pybuffer, (PyObject*)__pyx_v_pt1, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_pt1.diminfo[0].strides = __pyx_pybuffernd_pt1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pt1.diminfo[0].shape = __pyx_pybuffernd_pt1.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 138, __pyx_L1_error)
  }
  __pyx_t_7 = 0;
  __pyx_v_pt1 = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":139
 *     # count the corners that are inside a sphere clipped to the cones
 *     pt1 = numpy.array([x1, y1, z1])
 *     cdef int left_corner_count = 2 - count_outside(sp, [pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec], dx * 0.5)             # <<<<<<<<<<<<<<
 *     cdef int corner_count = 2 - count_outside(sp, [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec], dx * 0.5)
 *     #print 'for join (%g, %g, %g; %g) - (%g, %g, %g; %g) - (%g, %g, %g; %g):' % (x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_3, ((PyObject *)__pyx_v_nradial_vec)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(((PyObject *)__pyx_v_pt1), __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_6, ((PyObject *)__pyx_v_nradial_vec)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(((PyObject *)__pyx_v_pt1), __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_6 = 0;
  __pyx_v_left_corner_count = (2 - __pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_sp, ((PyObject*)__pyx_t_4), (__pyx_v_dx * 0.5)));
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":140
 *     pt1 = numpy.array([x1, y1, z1])
 *     cdef int left_corner_count = 2 - count_outside(sp, [pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec], dx * 0.5)
 *     cdef int corner_count = 2 - count_outside(sp, [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec], dx * 0.5)             # <<<<<<<<<<<<<<
 *     #print 'for join (%g, %g, %g; %g) - (%g, %g, %g; %g) - (%g, %g, %g; %g):' % (x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *     #print '   left_corner_count = %g; corner_count = %g' % (left_corner_count, corner_count)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_4, ((PyObject *)__pyx_v_radial_vec)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(((PyObject *)__pyx_v_pt1), __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_6, ((PyObject *)__pyx_v_radial_vec)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Subtract(((PyObject *)__pyx_v_pt1), __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_v_corner_count = (2 - __pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_sp, ((PyObject*)__pyx_t_3), (__pyx_v_dx * 0.5)));
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":143
 *     #print 'for join (%g, %g, %g; %g) - (%g, %g, %g; %g) - (%g, %g, %g; %g):' % (x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *     #print '   left_corner_count = %g; corner_count = %g' % (left_corner_count, corner_count)
 *     if left_corner_count == corner_count == 2:             # <<<<<<<<<<<<<<
 *         sp.set_clip([Intersection([c0, c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 */
  __pyx_t_14 = (__pyx_v_left_corner_count == __pyx_v_corner_count);
  if (__pyx_t_14) {
    __pyx_t_14 = (__pyx_v_corner_count == 2);
  }
  __pyx_t_15 = (__pyx_t_14 != 0);
  if (__pyx_t_15) {

    /* "neuron/rxd/geometry3d/ctng.pyx":144
 *     #print '   left_corner_count = %g; corner_count = %g' % (left_corner_count, corner_count)
 *     if left_corner_count == corner_count == 2:
 *         sp.set_clip([Intersection([c0, c1,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "neuron/rxd/geometry3d/ctng.pyx":145
 *     if left_corner_count == corner_count == 2:
 *         sp.set_clip([Intersection([c0, c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count == 2:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Plane); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = 0;
    __pyx_t_18 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = 1;
    __pyx_t_19 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = 2;
    __pyx_t_20 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_12, __pyx_t_16, __pyx_t_18, __pyx_t_19, __pyx_t_20};
      __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_12, __pyx_t_16, __pyx_t_18, __pyx_t_19, __pyx_t_20};
      __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    {
      __pyx_t_22 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      if (__pyx_t_21) {
        __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_21); __pyx_t_21 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_8, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_22, 2+__pyx_t_8, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_22, 3+__pyx_t_8, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_22, 4+__pyx_t_8, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_22, 5+__pyx_t_8, __pyx_t_20);
      __pyx_t_1 = 0;
      __pyx_t_12 = 0;
      __pyx_t_16 = 0;
      __pyx_t_18 = 0;
      __pyx_t_19 = 0;
      __pyx_t_20 = 0;
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_22, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":146
 *         sp.set_clip([Intersection([c0, c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])             # <<<<<<<<<<<<<<
 *     elif left_corner_count < 2 and corner_count == 2:
 *         # clipping to c1 is too harsh, but c0 clip is fine
 */
    __Pyx_GetModuleGlobalName(__pyx_t_22, __pyx_n_s_Plane); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_20 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_19 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_18 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_17 = 0;
    __pyx_t_16 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = 1;
    __pyx_t_12 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_17 = 2;
    __pyx_t_1 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_21 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_22);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_22, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_22)) {
      PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_20, __pyx_t_19, __pyx_t_18, __pyx_t_16, __pyx_t_12, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_22, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_22)) {
      PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_20, __pyx_t_19, __pyx_t_18, __pyx_t_16, __pyx_t_12, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_22, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_23 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      if (__pyx_t_21) {
        __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_21); __pyx_t_21 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_23, 0+__pyx_t_8, __pyx_t_20);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_23, 1+__pyx_t_8, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_23, 2+__pyx_t_8, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_23, 3+__pyx_t_8, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_23, 4+__pyx_t_8, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_23, 5+__pyx_t_8, __pyx_t_1);
      __pyx_t_20 = 0;
      __pyx_t_19 = 0;
      __pyx_t_18 = 0;
      __pyx_t_16 = 0;
      __pyx_t_12 = 0;
      __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_22, __pyx_t_23, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    }
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":144
 *     #print '   left_corner_count = %g; corner_count = %g' % (left_corner_count, corner_count)
 *     if left_corner_count == corner_count == 2:
 *         sp.set_clip([Intersection([c0, c1,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_22 = PyList_New(4); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_INCREF(__pyx_v_c0);
    __Pyx_GIVEREF(__pyx_v_c0);
    PyList_SET_ITEM(__pyx_t_22, 0, __pyx_v_c0);
    __Pyx_INCREF(__pyx_v_c1);
    __Pyx_GIVEREF(__pyx_v_c1);
    PyList_SET_ITEM(__pyx_t_22, 1, __pyx_v_c1);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_22, 3, __pyx_t_2);
    __pyx_t_13 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_22) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_22);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":143
 *     #print 'for join (%g, %g, %g; %g) - (%g, %g, %g; %g) - (%g, %g, %g; %g):' % (x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *     #print '   left_corner_count = %g; corner_count = %g' % (left_corner_count, corner_count)
 *     if left_corner_count == corner_count == 2:             # <<<<<<<<<<<<<<
 *         sp.set_clip([Intersection([c0, c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":147
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count == 2:             # <<<<<<<<<<<<<<
 *         # clipping to c1 is too harsh, but c0 clip is fine
 *         sp.set_clip([Intersection([c0,
 */
  __pyx_t_14 = ((__pyx_v_left_corner_count < 2) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_corner_count == 2) != 0);
  __pyx_t_15 = __pyx_t_14;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_15) {

    /* "neuron/rxd/geometry3d/ctng.pyx":149
 *     elif left_corner_count < 2 and corner_count == 2:
 *         # clipping to c1 is too harsh, but c0 clip is fine
 *         sp.set_clip([Intersection([c0,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "neuron/rxd/geometry3d/ctng.pyx":150
 *         # clipping to c1 is too harsh, but c0 clip is fine
 *         sp.set_clip([Intersection([c0,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count == 2 and corner_count < 2:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Plane); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_23 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = 0;
    __pyx_t_12 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_17 = 1;
    __pyx_t_16 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_17 = 2;
    __pyx_t_18 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_13, __pyx_t_23, __pyx_t_1, __pyx_t_12, __pyx_t_16, __pyx_t_18};
      __pyx_t_22 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_13, __pyx_t_23, __pyx_t_1, __pyx_t_12, __pyx_t_16, __pyx_t_18};
      __pyx_t_22 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_8, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_8, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_8, __pyx_t_18);
      __pyx_t_13 = 0;
      __pyx_t_23 = 0;
      __pyx_t_1 = 0;
      __pyx_t_12 = 0;
      __pyx_t_16 = 0;
      __pyx_t_18 = 0;
      __pyx_t_22 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_20, NULL); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":151
 *         sp.set_clip([Intersection([c0,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])             # <<<<<<<<<<<<<<
 *     elif left_corner_count == 2 and corner_count < 2:
 *         # clipping to c0 is too harsh, but c1 clip is fine
 */
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Plane); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_18 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_16 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_17 = 0;
    __pyx_t_1 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = 1;
    __pyx_t_23 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_17 = 2;
    __pyx_t_13 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_19 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_20);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_20, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_20)) {
      PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_t_16, __pyx_t_12, __pyx_t_1, __pyx_t_23, __pyx_t_13};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_20)) {
      PyObject *__pyx_temp[7] = {__pyx_t_19, __pyx_t_18, __pyx_t_16, __pyx_t_12, __pyx_t_1, __pyx_t_23, __pyx_t_13};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    } else
    #endif
    {
      __pyx_t_21 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_21);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_18);
      PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_8, __pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_8, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_8, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_21, 4+__pyx_t_8, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_21, 5+__pyx_t_8, __pyx_t_13);
      __pyx_t_18 = 0;
      __pyx_t_16 = 0;
      __pyx_t_12 = 0;
      __pyx_t_1 = 0;
      __pyx_t_23 = 0;
      __pyx_t_13 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_21, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
    }
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":149
 *     elif left_corner_count < 2 and corner_count == 2:
 *         # clipping to c1 is too harsh, but c0 clip is fine
 *         sp.set_clip([Intersection([c0,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_INCREF(__pyx_v_c0);
    __Pyx_GIVEREF(__pyx_v_c0);
    PyList_SET_ITEM(__pyx_t_20, 0, __pyx_v_c0);
    __Pyx_GIVEREF(__pyx_t_22);
    PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_2);
    __pyx_t_22 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_20);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":147
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count == 2:             # <<<<<<<<<<<<<<
 *         # clipping to c1 is too harsh, but c0 clip is fine
 *         sp.set_clip([Intersection([c0,
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":152
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count == 2 and corner_count < 2:             # <<<<<<<<<<<<<<
 *         # clipping to c0 is too harsh, but c1 clip is fine
 *         sp.set_clip([Intersection([c1,
 */
  __pyx_t_14 = ((__pyx_v_left_corner_count == 2) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_corner_count < 2) != 0);
  __pyx_t_15 = __pyx_t_14;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_15) {

    /* "neuron/rxd/geometry3d/ctng.pyx":154
 *     elif left_corner_count == 2 and corner_count < 2:
 *         # clipping to c0 is too harsh, but c1 clip is fine
 *         sp.set_clip([Intersection([c1,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "neuron/rxd/geometry3d/ctng.pyx":155
 *         # clipping to c0 is too harsh, but c1 clip is fine
 *         sp.set_clip([Intersection([c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count < 2:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Plane); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_17 = 0;
    __pyx_t_23 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_17 = 1;
    __pyx_t_1 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = 2;
    __pyx_t_12 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_16, __pyx_t_22, __pyx_t_21, __pyx_t_13, __pyx_t_23, __pyx_t_1, __pyx_t_12};
      __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_16, __pyx_t_22, __pyx_t_21, __pyx_t_13, __pyx_t_23, __pyx_t_1, __pyx_t_12};
      __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else
    #endif
    {
      __pyx_t_18 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_18, 0+__pyx_t_8, __pyx_t_22);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_18, 1+__pyx_t_8, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_18, 2+__pyx_t_8, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_18, 3+__pyx_t_8, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_18, 4+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_18, 5+__pyx_t_8, __pyx_t_12);
      __pyx_t_22 = 0;
      __pyx_t_21 = 0;
      __pyx_t_13 = 0;
      __pyx_t_23 = 0;
      __pyx_t_1 = 0;
      __pyx_t_12 = 0;
      __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_18, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":156
 *         sp.set_clip([Intersection([c1,
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])             # <<<<<<<<<<<<<<
 *     elif left_corner_count < 2 and corner_count < 2:
 *         # both clips are too harsh; fall back to just using a sphere
 */
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_Plane); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_12 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_23 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_17 = 0;
    __pyx_t_13 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_17 = 1;
    __pyx_t_21 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = 2;
    __pyx_t_22 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_16 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_18);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_18, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[7] = {__pyx_t_16, __pyx_t_12, __pyx_t_1, __pyx_t_23, __pyx_t_13, __pyx_t_21, __pyx_t_22};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_18)) {
      PyObject *__pyx_temp[7] = {__pyx_t_16, __pyx_t_12, __pyx_t_1, __pyx_t_23, __pyx_t_13, __pyx_t_21, __pyx_t_22};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_18, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    } else
    #endif
    {
      __pyx_t_19 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_8, __pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_8, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_19, 2+__pyx_t_8, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_19, 3+__pyx_t_8, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_19, 4+__pyx_t_8, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_19, 5+__pyx_t_8, __pyx_t_22);
      __pyx_t_12 = 0;
      __pyx_t_1 = 0;
      __pyx_t_23 = 0;
      __pyx_t_13 = 0;
      __pyx_t_21 = 0;
      __pyx_t_22 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    }
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":154
 *     elif left_corner_count == 2 and corner_count < 2:
 *         # clipping to c0 is too harsh, but c1 clip is fine
 *         sp.set_clip([Intersection([c1,             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __Pyx_INCREF(__pyx_v_c1);
    __Pyx_GIVEREF(__pyx_v_c1);
    PyList_SET_ITEM(__pyx_t_18, 0, __pyx_v_c1);
    __Pyx_GIVEREF(__pyx_t_20);
    PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_20);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_2);
    __pyx_t_20 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_18) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_18);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":152
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count == 2 and corner_count < 2:             # <<<<<<<<<<<<<<
 *         # clipping to c0 is too harsh, but c1 clip is fine
 *         sp.set_clip([Intersection([c1,
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":157
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count < 2:             # <<<<<<<<<<<<<<
 *         # both clips are too harsh; fall back to just using a sphere
 *         sp.set_clip([Intersection([
 */
  __pyx_t_14 = ((__pyx_v_left_corner_count < 2) != 0);
  if (__pyx_t_14) {
  } else {
    __pyx_t_15 = __pyx_t_14;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_14 = ((__pyx_v_corner_count < 2) != 0);
  __pyx_t_15 = __pyx_t_14;
  __pyx_L8_bool_binop_done:;
  if (likely(__pyx_t_15)) {

    /* "neuron/rxd/geometry3d/ctng.pyx":159
 *     elif left_corner_count < 2 and corner_count < 2:
 *         # both clips are too harsh; fall back to just using a sphere
 *         sp.set_clip([Intersection([             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "neuron/rxd/geometry3d/ctng.pyx":160
 *         # both clips are too harsh; fall back to just using a sphere
 *         sp.set_clip([Intersection([
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Plane); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_20 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_19 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_22 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_17 = 0;
    __pyx_t_21 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = 1;
    __pyx_t_13 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_17 = 2;
    __pyx_t_23 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_axis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_axis.diminfo[0].strides))); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_1 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_1, __pyx_t_20, __pyx_t_19, __pyx_t_22, __pyx_t_21, __pyx_t_13, __pyx_t_23};
      __pyx_t_18 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[7] = {__pyx_t_1, __pyx_t_20, __pyx_t_19, __pyx_t_22, __pyx_t_21, __pyx_t_13, __pyx_t_23};
      __pyx_t_18 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    } else
    #endif
    {
      __pyx_t_12 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_t_20);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_8, __pyx_t_22);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_12, 3+__pyx_t_8, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_12, 4+__pyx_t_8, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_12, 5+__pyx_t_8, __pyx_t_23);
      __pyx_t_20 = 0;
      __pyx_t_19 = 0;
      __pyx_t_22 = 0;
      __pyx_t_21 = 0;
      __pyx_t_13 = 0;
      __pyx_t_23 = 0;
      __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_12, NULL); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 160, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":161
 *         sp.set_clip([Intersection([
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])             # <<<<<<<<<<<<<<
 *     else:
 *         raise RxDException('unexpected corner_counts?')
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Plane); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_23 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_21 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_17 = 0;
    __pyx_t_22 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __pyx_t_17 = 1;
    __pyx_t_19 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __pyx_t_17 = 2;
    __pyx_t_20 = PyFloat_FromDouble((-(*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float_t *, __pyx_pybuffernd_naxis.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_naxis.diminfo[0].strides)))); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_1 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[7] = {__pyx_t_1, __pyx_t_23, __pyx_t_13, __pyx_t_21, __pyx_t_22, __pyx_t_19, __pyx_t_20};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
      PyObject *__pyx_temp[7] = {__pyx_t_1, __pyx_t_23, __pyx_t_13, __pyx_t_21, __pyx_t_22, __pyx_t_19, __pyx_t_20};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    } else
    #endif
    {
      __pyx_t_16 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if (__pyx_t_1) {
        __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_1); __pyx_t_1 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_23);
      PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_8, __pyx_t_23);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_8, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_21);
      PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_8, __pyx_t_21);
      __Pyx_GIVEREF(__pyx_t_22);
      PyTuple_SET_ITEM(__pyx_t_16, 3+__pyx_t_8, __pyx_t_22);
      __Pyx_GIVEREF(__pyx_t_19);
      PyTuple_SET_ITEM(__pyx_t_16, 4+__pyx_t_8, __pyx_t_19);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_16, 5+__pyx_t_8, __pyx_t_20);
      __pyx_t_23 = 0;
      __pyx_t_13 = 0;
      __pyx_t_21 = 0;
      __pyx_t_22 = 0;
      __pyx_t_19 = 0;
      __pyx_t_20 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":159
 *     elif left_corner_count < 2 and corner_count < 2:
 *         # both clips are too harsh; fall back to just using a sphere
 *         sp.set_clip([Intersection([             # <<<<<<<<<<<<<<
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
    __pyx_t_12 = PyList_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_18);
    PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_18);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_2);
    __pyx_t_18 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_12) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":157
 *             Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     elif left_corner_count < 2 and corner_count < 2:             # <<<<<<<<<<<<<<
 *         # both clips are too harsh; fall back to just using a sphere
 *         sp.set_clip([Intersection([
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":163
 *             Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *     else:
 *         raise RxDException('unexpected corner_counts?')             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_kp_s_unexpected_corner_counts) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_s_unexpected_corner_counts);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 163, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "neuron/rxd/geometry3d/ctng.pyx":165
 *         raise RxDException('unexpected corner_counts?')
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cython.wraparound(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":110
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef list join_outside(double x0, double y0, double z0, double r0, double x1, double y1, double z1, double r1, double x2, double y2, double z2, double r2, double dx):             # <<<<<<<<<<<<<<
 *     cdef numpy.ndarray[numpy.float_t, ndim=1] pt1, radial_vec, nradial_vec, axis, naxis
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.join_outside", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_axis.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_naxis.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_nradial_vec.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_radial_vec.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pt1);
  __Pyx_XDECREF((PyObject *)__pyx_v_radial_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_nradial_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_axis);
  __Pyx_XDECREF((PyObject *)__pyx_v_naxis);
  __Pyx_XDECREF(__pyx_v_c0);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_sp);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_plane_normal);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":169
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def soma_objects(x, y, z, sec, double x0, double y0, double z0, int n_soma_step):             # <<<<<<<<<<<<<<
 *     cdef double diam1, diam2, somax, somay, somaz
 *     cdef list objects = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_1soma_objects(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_4ctng_1soma_objects = {"soma_objects", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_1soma_objects, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_1soma_objects(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  CYTHON_UNUSED PyObject *__pyx_v_z = 0;
  PyObject *__pyx_v_sec = 0;
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  int __pyx_v_n_soma_step;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("soma_objects (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,&__pyx_n_s_sec,&__pyx_n_s_x0,&__pyx_n_s_y0,&__pyx_n_s_z0,&__pyx_n_s_n_soma_step,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 1); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 2); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sec)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 3); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 4); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 5); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 6); __PYX_ERR(0, 169, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_soma_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, 7); __PYX_ERR(0, 169, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "soma_objects") < 0)) __PYX_ERR(0, 169, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
    __pyx_v_z = values[2];
    __pyx_v_sec = values[3];
    __pyx_v_x0 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_x0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
    __pyx_v_y0 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_y0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
    __pyx_v_z0 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_z0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
    __pyx_v_n_soma_step = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_n_soma_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 169, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("soma_objects", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 169, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.soma_objects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_4ctng_soma_objects(__pyx_self, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_sec, __pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_n_soma_step);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_soma_objects(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y, CYTHON_UNUSED PyObject *__pyx_v_z, PyObject *__pyx_v_sec, double __pyx_v_x0, double __pyx_v_y0, double __pyx_v_z0, int __pyx_v_n_soma_step) {
  double __pyx_v_diam1;
  double __pyx_v_diam2;
  CYTHON_UNUSED double __pyx_v_somax;
  CYTHON_UNUSED double __pyx_v_somay;
  CYTHON_UNUSED double __pyx_v_somaz;
  PyObject *__pyx_v_objects = 0;
  PyObject *__pyx_v_f_pts = 0;
  PyObject *__pyx_v_seg_dict = 0;
  PyObject *__pyx_v_xshifted = NULL;
  PyObject *__pyx_v_yshifted = NULL;
  PyObject *__pyx_v_zshifted = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_j = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_tobj = NULL;
  PyObject *__pyx_v_major = NULL;
  PyObject *__pyx_v_minor = NULL;
  PyObject *__pyx_v_x1 = NULL;
  PyObject *__pyx_v_y1 = NULL;
  PyObject *__pyx_v_x2 = NULL;
  PyObject *__pyx_v_y2 = NULL;
  PyObject *__pyx_v_xs_loop = NULL;
  PyObject *__pyx_v_ys_loop = NULL;
  PyObject *__pyx_v_pts = NULL;
  PyObject *__pyx_v_pts_sources = NULL;
  PyObject *__pyx_v_x3 = NULL;
  PyObject *__pyx_v_y3 = NULL;
  PyObject *__pyx_v_x4 = NULL;
  PyObject *__pyx_v_y4 = NULL;
  PyObject *__pyx_v_pt = NULL;
  PyObject *__pyx_v_major_p1 = NULL;
  PyObject *__pyx_v_major_p2 = NULL;
  PyObject *__pyx_v_extreme1 = NULL;
  PyObject *__pyx_v_extreme2 = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_major_length = NULL;
  PyObject *__pyx_v_delta_x = NULL;
  PyObject *__pyx_v_delta_y = NULL;
  PyObject *__pyx_v_f_diams = NULL;
  PyObject *__pyx_v_p1 = NULL;
  PyObject *__pyx_v_p2 = NULL;
  PyObject *__pyx_v_cx = NULL;
  PyObject *__pyx_v_cy = NULL;
  PyObject *__pyx_v_segment_locs = NULL;
  PyObject *__pyx_v_path_length = NULL;
  PyObject *__pyx_v_margin = NULL;
  PyObject *__pyx_v_pt1x = NULL;
  PyObject *__pyx_v_pt1y = NULL;
  PyObject *__pyx_v_pt2x = NULL;
  PyObject *__pyx_v_pt2y = NULL;
  PyObject *__pyx_v_thickness = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_loc = NULL;
  PyObject *__pyx_v_seg = NULL;
  PyObject *__pyx_v_xx = NULL;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *(*__pyx_t_17)(PyObject *);
  double __pyx_t_18;
  double __pyx_t_19;
  double __pyx_t_20;
  double __pyx_t_21;
  double __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  PyObject *(*__pyx_t_25)(PyObject *);
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("soma_objects", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":171
 * def soma_objects(x, y, z, sec, double x0, double y0, double z0, int n_soma_step):
 *     cdef double diam1, diam2, somax, somay, somaz
 *     cdef list objects = []             # <<<<<<<<<<<<<<
 *     cdef list f_pts
 *     cdef dict seg_dict = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objects = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":173
 *     cdef list objects = []
 *     cdef list f_pts
 *     cdef dict seg_dict = {}             # <<<<<<<<<<<<<<
 * 
 *     somax, somay, somaz = x0, y0, z0
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_seg_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":175
 *     cdef dict seg_dict = {}
 * 
 *     somax, somay, somaz = x0, y0, z0             # <<<<<<<<<<<<<<
 * 
 *     xshifted = [xx - x0 for xx in x]
 */
  __pyx_t_2 = __pyx_v_x0;
  __pyx_t_3 = __pyx_v_y0;
  __pyx_t_4 = __pyx_v_z0;
  __pyx_v_somax = __pyx_t_2;
  __pyx_v_somay = __pyx_t_3;
  __pyx_v_somaz = __pyx_t_4;

  /* "neuron/rxd/geometry3d/ctng.pyx":177
 *     somax, somay, somaz = x0, y0, z0
 * 
 *     xshifted = [xx - x0 for xx in x]             # <<<<<<<<<<<<<<
 *     yshifted = [yy - y0 for yy in y]
 *     # this is a hack to pretend everything is on the same z level
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_x)) || PyTuple_CheckExact(__pyx_v_x)) {
    __pyx_t_5 = __pyx_v_x; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 177, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 177, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 177, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_xx, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Subtract(__pyx_v_xx, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 177, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_xshifted = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":178
 * 
 *     xshifted = [xx - x0 for xx in x]
 *     yshifted = [yy - y0 for yy in y]             # <<<<<<<<<<<<<<
 *     # this is a hack to pretend everything is on the same z level
 *     zshifted = [0] * len(x)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_y)) || PyTuple_CheckExact(__pyx_v_y)) {
    __pyx_t_5 = __pyx_v_y; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 178, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 178, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_yy, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyNumber_Subtract(__pyx_v_yy, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_yshifted = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":180
 *     yshifted = [yy - y0 for yy in y]
 *     # this is a hack to pretend everything is on the same z level
 *     zshifted = [0] * len(x)             # <<<<<<<<<<<<<<
 * 
 *     # locate the major and minor axis, adapted from import3d_gui.hoc
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 180, __pyx_L1_error)
  __pyx_t_1 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_zshifted = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":183
 * 
 *     # locate the major and minor axis, adapted from import3d_gui.hoc
 *     m = h.Matrix(3, 3)             # <<<<<<<<<<<<<<
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Matrix); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_m = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":184
 *     # locate the major and minor axis, adapted from import3d_gui.hoc
 *     m = h.Matrix(3, 3)
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):             # <<<<<<<<<<<<<<
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 *             if j < i: continue
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_xshifted);
  __Pyx_GIVEREF(__pyx_v_xshifted);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_v_xshifted);
  __Pyx_INCREF(__pyx_v_yshifted);
  __Pyx_GIVEREF(__pyx_v_yshifted);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_v_yshifted);
  __Pyx_INCREF(__pyx_v_zshifted);
  __Pyx_GIVEREF(__pyx_v_zshifted);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_v_zshifted);
  __pyx_t_8 = __pyx_t_5; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_6 >= 3) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 184, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":185
 *     m = h.Matrix(3, 3)
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):             # <<<<<<<<<<<<<<
 *             if j < i: continue
 *             v = numpy.dot(p, q)
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_5 = __pyx_int_0;
    __pyx_t_9 = PyList_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_v_xshifted);
    __Pyx_GIVEREF(__pyx_v_xshifted);
    PyList_SET_ITEM(__pyx_t_9, 0, __pyx_v_xshifted);
    __Pyx_INCREF(__pyx_v_yshifted);
    __Pyx_GIVEREF(__pyx_v_yshifted);
    PyList_SET_ITEM(__pyx_t_9, 1, __pyx_v_yshifted);
    __Pyx_INCREF(__pyx_v_zshifted);
    __Pyx_GIVEREF(__pyx_v_zshifted);
    PyList_SET_ITEM(__pyx_t_9, 2, __pyx_v_zshifted);
    __pyx_t_10 = __pyx_t_9; __Pyx_INCREF(__pyx_t_10); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (__pyx_t_11 >= 3) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 185, __pyx_L1_error)
      #else
      __pyx_t_9 = PySequence_ITEM(__pyx_t_10, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_5);
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_5, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":186
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 *             if j < i: continue             # <<<<<<<<<<<<<<
 *             v = numpy.dot(p, q)
 *             m.setval(i, j, v)
 */
      __pyx_t_9 = PyObject_RichCompare(__pyx_v_j, __pyx_v_i, Py_LT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 186, __pyx_L1_error)
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 186, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_12) {
        goto __pyx_L9_continue;
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":187
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 *             if j < i: continue
 *             v = numpy.dot(p, q)             # <<<<<<<<<<<<<<
 *             m.setval(i, j, v)
 *             m.setval(j, i, v)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_dot); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_13 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_p, __pyx_v_q};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 187, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_p, __pyx_v_q};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 187, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 187, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_INCREF(__pyx_v_p);
        __Pyx_GIVEREF(__pyx_v_p);
        PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_15, __pyx_v_p);
        __Pyx_INCREF(__pyx_v_q);
        __Pyx_GIVEREF(__pyx_v_q);
        PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_15, __pyx_v_q);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 187, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":188
 *             if j < i: continue
 *             v = numpy.dot(p, q)
 *             m.setval(i, j, v)             # <<<<<<<<<<<<<<
 *             m.setval(j, i, v)
 *     # CTNG:majoraxis
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_setval); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_v_i, __pyx_v_j, __pyx_v_v};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_16, __pyx_v_i, __pyx_v_j, __pyx_v_v};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_13 = PyTuple_New(3+__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        if (__pyx_t_16) {
          __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_16); __pyx_t_16 = NULL;
        }
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_15, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_15, __pyx_v_j);
        __Pyx_INCREF(__pyx_v_v);
        __Pyx_GIVEREF(__pyx_v_v);
        PyTuple_SET_ITEM(__pyx_t_13, 2+__pyx_t_15, __pyx_v_v);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 188, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":189
 *             v = numpy.dot(p, q)
 *             m.setval(i, j, v)
 *             m.setval(j, i, v)             # <<<<<<<<<<<<<<
 *     # CTNG:majoraxis
 *     tobj = m.symmeig(m)
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_setval); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 189, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_13 = NULL;
      __pyx_t_15 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_15 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_v_j, __pyx_v_i, __pyx_v_v};
        __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_14)) {
        PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_v_j, __pyx_v_i, __pyx_v_v};
        __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_14, __pyx_temp+1-__pyx_t_15, 3+__pyx_t_15); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_GOTREF(__pyx_t_9);
      } else
      #endif
      {
        __pyx_t_16 = PyTuple_New(3+__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (__pyx_t_13) {
          __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_13); __pyx_t_13 = NULL;
        }
        __Pyx_INCREF(__pyx_v_j);
        __Pyx_GIVEREF(__pyx_v_j);
        PyTuple_SET_ITEM(__pyx_t_16, 0+__pyx_t_15, __pyx_v_j);
        __Pyx_INCREF(__pyx_v_i);
        __Pyx_GIVEREF(__pyx_v_i);
        PyTuple_SET_ITEM(__pyx_t_16, 1+__pyx_t_15, __pyx_v_i);
        __Pyx_INCREF(__pyx_v_v);
        __Pyx_GIVEREF(__pyx_v_v);
        PyTuple_SET_ITEM(__pyx_t_16, 2+__pyx_t_15, __pyx_v_v);
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 189, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":185
 *     m = h.Matrix(3, 3)
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):             # <<<<<<<<<<<<<<
 *             if j < i: continue
 *             v = numpy.dot(p, q)
 */
      __pyx_L9_continue:;
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":184
 *     # locate the major and minor axis, adapted from import3d_gui.hoc
 *     m = h.Matrix(3, 3)
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):             # <<<<<<<<<<<<<<
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 *             if j < i: continue
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":191
 *             m.setval(j, i, v)
 *     # CTNG:majoraxis
 *     tobj = m.symmeig(m)             # <<<<<<<<<<<<<<
 *     # major axis is the one with largest eigenvalue
 *     major = m.getcol(tobj.max_ind())
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_symmeig); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_m) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_m);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_tobj = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":193
 *     tobj = m.symmeig(m)
 *     # major axis is the one with largest eigenvalue
 *     major = m.getcol(tobj.max_ind())             # <<<<<<<<<<<<<<
 *     # minor is normal and in xy plane
 *     minor = m.getcol(3 - tobj.min_ind() - tobj.max_ind())
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_getcol); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_tobj, __pyx_n_s_max_ind); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_10, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_major = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":195
 *     major = m.getcol(tobj.max_ind())
 *     # minor is normal and in xy plane
 *     minor = m.getcol(3 - tobj.min_ind() - tobj.max_ind())             # <<<<<<<<<<<<<<
 *     #minor.x[2] = 0
 *     minor.div(minor.mag())
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_m, __pyx_n_s_getcol); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_tobj, __pyx_n_s_min_ind); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyInt_SubtractCObj(__pyx_int_3, __pyx_t_5, 3, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_tobj, __pyx_n_s_max_ind); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_14 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_5 = (__pyx_t_14) ? __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_14) : __Pyx_PyObject_CallNoArg(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Subtract(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_minor = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":197
 *     minor = m.getcol(3 - tobj.min_ind() - tobj.max_ind())
 *     #minor.x[2] = 0
 *     minor.div(minor.mag())             # <<<<<<<<<<<<<<
 * 
 *     x1 = x0; y1 = y0
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_div); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_mag); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallNoArg(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":199
 *     minor.div(minor.mag())
 * 
 *     x1 = x0; y1 = y0             # <<<<<<<<<<<<<<
 *     x2 = x1 + major.x[0]; y2 = y1 + major.x[1]
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_x1 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_y1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":200
 * 
 *     x1 = x0; y1 = y0
 *     x2 = x1 + major.x[0]; y2 = y1 + major.x[1]             # <<<<<<<<<<<<<<
 * 
 *     xs_loop = x + [x[0]]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_major, __pyx_n_s_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_x1, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_x2 = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_major, __pyx_n_s_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_y1, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_y2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":202
 *     x2 = x1 + major.x[0]; y2 = y1 + major.x[1]
 * 
 *     xs_loop = x + [x[0]]             # <<<<<<<<<<<<<<
 *     ys_loop = y + [y[0]]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_xs_loop = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":203
 * 
 *     xs_loop = x + [x[0]]
 *     ys_loop = y + [y[0]]             # <<<<<<<<<<<<<<
 * 
 *     # locate the extrema of the major axis CTNG:somaextrema
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_y, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_v_y, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_ys_loop = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":207
 *     # locate the extrema of the major axis CTNG:somaextrema
 *     # this is defined by the furthest points on it that lie on the minor axis
 *     pts = []             # <<<<<<<<<<<<<<
 *     pts_sources = {}
 *     for x3, y3 in zip(x, y):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pts = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":208
 *     # this is defined by the furthest points on it that lie on the minor axis
 *     pts = []
 *     pts_sources = {}             # <<<<<<<<<<<<<<
 *     for x3, y3 in zip(x, y):
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_pts_sources = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":209
 *     pts = []
 *     pts_sources = {}
 *     for x3, y3 in zip(x, y):             # <<<<<<<<<<<<<<
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_x);
  __Pyx_INCREF(__pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_y);
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_1 = __pyx_t_8; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 209, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 209, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 209, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 209, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
      PyObject* sequence = __pyx_t_8;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 209, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_17 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_5 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L14_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_10), 2) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L15_unpacking_done;
      __pyx_L14_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 209, __pyx_L1_error)
      __pyx_L15_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_x3, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y3, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":210
 *     pts_sources = {}
 *     for x3, y3 in zip(x, y):
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]             # <<<<<<<<<<<<<<
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 *         if pt is not None:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_v_x3, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_v_y3, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_x4, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_y4, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":211
 *     for x3, y3 in zip(x, y):
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)             # <<<<<<<<<<<<<<
 *         if pt is not None:
 *             pts.append(pt)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_x1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_y1); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_x2); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_v_y2); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_v_x3); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_v_y3); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_v_x4); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_v_y4); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
    __pyx_t_5 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_seg_line_intersection(__pyx_t_4, __pyx_t_3, __pyx_t_2, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, __pyx_t_22, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_pt, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":212
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 *         if pt is not None:             # <<<<<<<<<<<<<<
 *             pts.append(pt)
 *             if pt not in pts_sources:
 */
    __pyx_t_12 = (__pyx_v_pt != ((PyObject*)Py_None));
    __pyx_t_23 = (__pyx_t_12 != 0);
    if (__pyx_t_23) {

      /* "neuron/rxd/geometry3d/ctng.pyx":213
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 *         if pt is not None:
 *             pts.append(pt)             # <<<<<<<<<<<<<<
 *             if pt not in pts_sources:
 *                 pts_sources[pt] = []
 */
      __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_pts, __pyx_v_pt); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 213, __pyx_L1_error)

      /* "neuron/rxd/geometry3d/ctng.pyx":214
 *         if pt is not None:
 *             pts.append(pt)
 *             if pt not in pts_sources:             # <<<<<<<<<<<<<<
 *                 pts_sources[pt] = []
 *             pts_sources[pt].append((x3, y3))
 */
      __pyx_t_23 = (__Pyx_PyDict_ContainsTF(__pyx_v_pt, __pyx_v_pts_sources, Py_NE)); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 214, __pyx_L1_error)
      __pyx_t_12 = (__pyx_t_23 != 0);
      if (__pyx_t_12) {

        /* "neuron/rxd/geometry3d/ctng.pyx":215
 *             pts.append(pt)
 *             if pt not in pts_sources:
 *                 pts_sources[pt] = []             # <<<<<<<<<<<<<<
 *             pts_sources[pt].append((x3, y3))
 * 
 */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(PyDict_SetItem(__pyx_v_pts_sources, __pyx_v_pt, __pyx_t_5) < 0)) __PYX_ERR(0, 215, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":214
 *         if pt is not None:
 *             pts.append(pt)
 *             if pt not in pts_sources:             # <<<<<<<<<<<<<<
 *                 pts_sources[pt] = []
 *             pts_sources[pt].append((x3, y3))
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":216
 *             if pt not in pts_sources:
 *                 pts_sources[pt] = []
 *             pts_sources[pt].append((x3, y3))             # <<<<<<<<<<<<<<
 * 
 *     major_p1, major_p2 = extreme_pts(pts)
 */
      __pyx_t_5 = __Pyx_PyDict_GetItem(__pyx_v_pts_sources, __pyx_v_pt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_x3);
      __Pyx_GIVEREF(__pyx_v_x3);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_x3);
      __Pyx_INCREF(__pyx_v_y3);
      __Pyx_GIVEREF(__pyx_v_y3);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_y3);
      __pyx_t_24 = __Pyx_PyObject_Append(__pyx_t_5, __pyx_t_8); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 216, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":212
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 *         if pt is not None:             # <<<<<<<<<<<<<<
 *             pts.append(pt)
 *             if pt not in pts_sources:
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":209
 *     pts = []
 *     pts_sources = {}
 *     for x3, y3 in zip(x, y):             # <<<<<<<<<<<<<<
 *         x4, y4 = x3 + minor.x[0], y3 + minor.x[1]
 *         pt = seg_line_intersection(x1, y1, x2, y2, x3, y3, x4, y4, False)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":218
 *             pts_sources[pt].append((x3, y3))
 * 
 *     major_p1, major_p2 = extreme_pts(pts)             # <<<<<<<<<<<<<<
 * 
 *     extreme1 = pts_sources[major_p1]
 */
  __pyx_t_1 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_extreme_pts(__pyx_v_pts); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 218, __pyx_L1_error)
  }
  __pyx_v_major_p1 = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_major_p2 = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":220
 *     major_p1, major_p2 = extreme_pts(pts)
 * 
 *     extreme1 = pts_sources[major_p1]             # <<<<<<<<<<<<<<
 *     extreme2 = pts_sources[major_p2]
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pts_sources, __pyx_v_major_p1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_extreme1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":221
 * 
 *     extreme1 = pts_sources[major_p1]
 *     extreme2 = pts_sources[major_p2]             # <<<<<<<<<<<<<<
 * 
 *     major_p1, major_p2 = numpy.array(major_p1), numpy.array(major_p2)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_pts_sources, __pyx_v_major_p2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_extreme2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":223
 *     extreme2 = pts_sources[major_p2]
 * 
 *     major_p1, major_p2 = numpy.array(major_p1), numpy.array(major_p2)             # <<<<<<<<<<<<<<
 *     del pts_sources
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_5, __pyx_v_major_p1) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_major_p1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_major_p2) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_major_p2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_major_p1, __pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_major_p2, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":224
 * 
 *     major_p1, major_p2 = numpy.array(major_p1), numpy.array(major_p2)
 *     del pts_sources             # <<<<<<<<<<<<<<
 * 
 *     if len(extreme1) != 1 or len(extreme2) != 1:
 */
  __Pyx_DECREF(__pyx_v_pts_sources);
  __pyx_v_pts_sources = NULL;

  /* "neuron/rxd/geometry3d/ctng.pyx":226
 *     del pts_sources
 * 
 *     if len(extreme1) != 1 or len(extreme2) != 1:             # <<<<<<<<<<<<<<
 *         raise RxDException('multiple most extreme points')
 *     extreme1 = extreme1[0]
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_extreme1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_23 = ((__pyx_t_6 != 1) != 0);
  if (!__pyx_t_23) {
  } else {
    __pyx_t_12 = __pyx_t_23;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_t_6 = PyObject_Length(__pyx_v_extreme2); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_t_23 = ((__pyx_t_6 != 1) != 0);
  __pyx_t_12 = __pyx_t_23;
  __pyx_L19_bool_binop_done:;
  if (unlikely(__pyx_t_12)) {

    /* "neuron/rxd/geometry3d/ctng.pyx":227
 * 
 *     if len(extreme1) != 1 or len(extreme2) != 1:
 *         raise RxDException('multiple most extreme points')             # <<<<<<<<<<<<<<
 *     extreme1 = extreme1[0]
 *     extreme2 = extreme2[0]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_8 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_9, __pyx_kp_s_multiple_most_extreme_points) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_multiple_most_extreme_points);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(0, 227, __pyx_L1_error)

    /* "neuron/rxd/geometry3d/ctng.pyx":226
 *     del pts_sources
 * 
 *     if len(extreme1) != 1 or len(extreme2) != 1:             # <<<<<<<<<<<<<<
 *         raise RxDException('multiple most extreme points')
 *     extreme1 = extreme1[0]
 */
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":228
 *     if len(extreme1) != 1 or len(extreme2) != 1:
 *         raise RxDException('multiple most extreme points')
 *     extreme1 = extreme1[0]             # <<<<<<<<<<<<<<
 *     extreme2 = extreme2[0]
 *     major_length = linalg.norm(major_p1 - major_p2)
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_extreme1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF_SET(__pyx_v_extreme1, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":229
 *         raise RxDException('multiple most extreme points')
 *     extreme1 = extreme1[0]
 *     extreme2 = extreme2[0]             # <<<<<<<<<<<<<<
 *     major_length = linalg.norm(major_p1 - major_p2)
 *     delta_x, delta_y = major_p2 - major_p1
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_extreme2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF_SET(__pyx_v_extreme2, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":230
 *     extreme1 = extreme1[0]
 *     extreme2 = extreme2[0]
 *     major_length = linalg.norm(major_p1 - major_p2)             # <<<<<<<<<<<<<<
 *     delta_x, delta_y = major_p2 - major_p1
 *     delta_x /= n_soma_step
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_major_p1, __pyx_v_major_p2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
    }
  }
  __pyx_t_8 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_major_length = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":231
 *     extreme2 = extreme2[0]
 *     major_length = linalg.norm(major_p1 - major_p2)
 *     delta_x, delta_y = major_p2 - major_p1             # <<<<<<<<<<<<<<
 *     delta_x /= n_soma_step
 *     delta_y /= n_soma_step
 */
  __pyx_t_8 = PyNumber_Subtract(__pyx_v_major_p2, __pyx_v_major_p1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
    PyObject* sequence = __pyx_t_8;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 231, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_1);
    #else
    __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_17 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_9 = __pyx_t_17(__pyx_t_5); if (unlikely(!__pyx_t_9)) goto __pyx_L21_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_9);
    index = 1; __pyx_t_1 = __pyx_t_17(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L21_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_5), 2) < 0) __PYX_ERR(0, 231, __pyx_L1_error)
    __pyx_t_17 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L22_unpacking_done;
    __pyx_L21_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_17 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 231, __pyx_L1_error)
    __pyx_L22_unpacking_done:;
  }
  __pyx_v_delta_x = __pyx_t_9;
  __pyx_t_9 = 0;
  __pyx_v_delta_y = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":232
 *     major_length = linalg.norm(major_p1 - major_p2)
 *     delta_x, delta_y = major_p2 - major_p1
 *     delta_x /= n_soma_step             # <<<<<<<<<<<<<<
 *     delta_y /= n_soma_step
 * 
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_n_soma_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_delta_x, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF_SET(__pyx_v_delta_x, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":233
 *     delta_x, delta_y = major_p2 - major_p1
 *     delta_x /= n_soma_step
 *     delta_y /= n_soma_step             # <<<<<<<<<<<<<<
 * 
 *     f_pts = [extreme1]
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n_soma_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_delta_y, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_delta_y, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":235
 *     delta_y /= n_soma_step
 * 
 *     f_pts = [extreme1]             # <<<<<<<<<<<<<<
 *     f_diams = [0]
 * 
 */
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_extreme1);
  __Pyx_GIVEREF(__pyx_v_extreme1);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_extreme1);
  __pyx_v_f_pts = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":236
 * 
 *     f_pts = [extreme1]
 *     f_diams = [0]             # <<<<<<<<<<<<<<
 * 
 *     # CTNG:slicesoma
 */
  __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
  __pyx_v_f_diams = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":239
 * 
 *     # CTNG:slicesoma
 *     for i in xrange(1, n_soma_step):             # <<<<<<<<<<<<<<
 *         x0, y0 = major_p1[0] + i * delta_x, major_p1[1] + i * delta_y
 *         # slice in dir of minor axis
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_n_soma_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_1, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_1 = __pyx_t_8; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 239, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 239, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 239, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 239, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 239, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":240
 *     # CTNG:slicesoma
 *     for i in xrange(1, n_soma_step):
 *         x0, y0 = major_p1[0] + i * delta_x, major_p1[1] + i * delta_y             # <<<<<<<<<<<<<<
 *         # slice in dir of minor axis
 *         x1, y1 = x0 + minor.x[0], y0 + minor.x[1]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_major_p1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Multiply(__pyx_v_i, __pyx_v_delta_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_major_p1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyNumber_Multiply(__pyx_v_i, __pyx_v_delta_y); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_x0 = __pyx_t_22;
    __pyx_v_y0 = __pyx_t_21;

    /* "neuron/rxd/geometry3d/ctng.pyx":242
 *         x0, y0 = major_p1[0] + i * delta_x, major_p1[1] + i * delta_y
 *         # slice in dir of minor axis
 *         x1, y1 = x0 + minor.x[0], y0 + minor.x[1]             # <<<<<<<<<<<<<<
 *         pts = []
 *         for i in xrange(len(x)):
 */
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_9, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Add(__pyx_t_8, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_minor, __pyx_n_s_x); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_x1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_y1, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":243
 *         # slice in dir of minor axis
 *         x1, y1 = x0 + minor.x[0], y0 + minor.x[1]
 *         pts = []             # <<<<<<<<<<<<<<
 *         for i in xrange(len(x)):
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)
 */
    __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_pts, ((PyObject*)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":244
 *         x1, y1 = x0 + minor.x[0], y0 + minor.x[1]
 *         pts = []
 *         for i in xrange(len(x)):             # <<<<<<<<<<<<<<
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)
 *             if pt is not None: pts.append(pt)
 */
    __pyx_t_11 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 244, __pyx_L1_error)
    __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_8 = __pyx_t_9; __Pyx_INCREF(__pyx_t_8); __pyx_t_11 = 0;
      __pyx_t_25 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_25 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_25)) __PYX_ERR(0, 244, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_25)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 244, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 244, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_25(__pyx_t_8);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 244, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_DECREF_SET(__pyx_v_i, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":245
 *         pts = []
 *         for i in xrange(len(x)):
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)             # <<<<<<<<<<<<<<
 *             if pt is not None: pts.append(pt)
 *         p1, p2 = extreme_pts(pts)
 */
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_xs_loop, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_21 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_21 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_ys_loop, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_22 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_22 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetItem(__pyx_v_xs_loop, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_ys_loop, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_19 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_19 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_v_x1); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_v_y1); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 245, __pyx_L1_error)
      __pyx_t_9 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_seg_line_intersection(__pyx_t_21, __pyx_t_22, __pyx_t_20, __pyx_t_19, __pyx_v_x0, __pyx_v_y0, __pyx_t_18, __pyx_t_2, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_pt, ((PyObject*)__pyx_t_9));
      __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":246
 *         for i in xrange(len(x)):
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)
 *             if pt is not None: pts.append(pt)             # <<<<<<<<<<<<<<
 *         p1, p2 = extreme_pts(pts)
 *         p1, p2 = numpy.array(p1), numpy.array(p2)
 */
      __pyx_t_12 = (__pyx_v_pt != ((PyObject*)Py_None));
      __pyx_t_23 = (__pyx_t_12 != 0);
      if (__pyx_t_23) {
        __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_pts, __pyx_v_pt); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 246, __pyx_L1_error)
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":244
 *         x1, y1 = x0 + minor.x[0], y0 + minor.x[1]
 *         pts = []
 *         for i in xrange(len(x)):             # <<<<<<<<<<<<<<
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)
 *             if pt is not None: pts.append(pt)
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":247
 *             pt = seg_line_intersection(xs_loop[i], ys_loop[i], xs_loop[i + 1], ys_loop[i + 1], x0, y0, x1, y1, True)
 *             if pt is not None: pts.append(pt)
 *         p1, p2 = extreme_pts(pts)             # <<<<<<<<<<<<<<
 *         p1, p2 = numpy.array(p1), numpy.array(p2)
 *         cx, cy = (p1 + p2) / 2.
 */
    __pyx_t_8 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_extreme_pts(__pyx_v_pts); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (likely(__pyx_t_8 != Py_None)) {
      PyObject* sequence = __pyx_t_8;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 247, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 247, __pyx_L1_error)
    }
    __Pyx_XDECREF_SET(__pyx_v_p1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_p2, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":248
 *             if pt is not None: pts.append(pt)
 *         p1, p2 = extreme_pts(pts)
 *         p1, p2 = numpy.array(p1), numpy.array(p2)             # <<<<<<<<<<<<<<
 *         cx, cy = (p1 + p2) / 2.
 *         f_pts.append((cx, cy))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_v_p1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_p1);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_9 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_10, __pyx_v_p2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_p2);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_p1, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_DECREF_SET(__pyx_v_p2, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":249
 *         p1, p2 = extreme_pts(pts)
 *         p1, p2 = numpy.array(p1), numpy.array(p2)
 *         cx, cy = (p1 + p2) / 2.             # <<<<<<<<<<<<<<
 *         f_pts.append((cx, cy))
 *         f_diams.append(linalg.norm(p1 - p2))
 */
    __pyx_t_9 = PyNumber_Add(__pyx_v_p1, __pyx_v_p2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyFloat_DivideObjC(__pyx_t_9, __pyx_float_2_, 2., 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
      PyObject* sequence = __pyx_t_8;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 249, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_17 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L28_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_5 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L28_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_10), 2) < 0) __PYX_ERR(0, 249, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L29_unpacking_done;
      __pyx_L28_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 249, __pyx_L1_error)
      __pyx_L29_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_cx, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cy, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":250
 *         p1, p2 = numpy.array(p1), numpy.array(p2)
 *         cx, cy = (p1 + p2) / 2.
 *         f_pts.append((cx, cy))             # <<<<<<<<<<<<<<
 *         f_diams.append(linalg.norm(p1 - p2))
 * 
 */
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_cx);
    __Pyx_GIVEREF(__pyx_v_cx);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_cx);
    __Pyx_INCREF(__pyx_v_cy);
    __Pyx_GIVEREF(__pyx_v_cy);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_cy);
    __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_f_pts, __pyx_t_8); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":251
 *         cx, cy = (p1 + p2) / 2.
 *         f_pts.append((cx, cy))
 *         f_diams.append(linalg.norm(p1 - p2))             # <<<<<<<<<<<<<<
 * 
 *     f_pts.append(extreme2)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_linalg); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_norm); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_p1, __pyx_v_p2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_8 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_f_diams, __pyx_t_8); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":239
 * 
 *     # CTNG:slicesoma
 *     for i in xrange(1, n_soma_step):             # <<<<<<<<<<<<<<
 *         x0, y0 = major_p1[0] + i * delta_x, major_p1[1] + i * delta_y
 *         # slice in dir of minor axis
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":253
 *         f_diams.append(linalg.norm(p1 - p2))
 * 
 *     f_pts.append(extreme2)             # <<<<<<<<<<<<<<
 *     f_diams.append(0)
 * 
 */
  __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_f_pts, __pyx_v_extreme2); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 253, __pyx_L1_error)

  /* "neuron/rxd/geometry3d/ctng.pyx":254
 * 
 *     f_pts.append(extreme2)
 *     f_diams.append(0)             # <<<<<<<<<<<<<<
 * 
 *     segment_locs = [];        # location along soma for assigning segments
 */
  __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_f_diams, __pyx_int_0); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 254, __pyx_L1_error)

  /* "neuron/rxd/geometry3d/ctng.pyx":256
 *     f_diams.append(0)
 * 
 *     segment_locs = [];        # location along soma for assigning segments             # <<<<<<<<<<<<<<
 *     path_length = 0;
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_segment_locs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":257
 * 
 *     segment_locs = [];        # location along soma for assigning segments
 *     path_length = 0;             # <<<<<<<<<<<<<<
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length
 *     for i in xrange(len(f_pts) - 1):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_path_length = __pyx_int_0;

  /* "neuron/rxd/geometry3d/ctng.pyx":258
 *     segment_locs = [];        # location along soma for assigning segments
 *     path_length = 0;
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length             # <<<<<<<<<<<<<<
 *     for i in xrange(len(f_pts) - 1):
 *         pt1x, pt1y = f_pts[i]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_nseg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyNumber_Multiply(__pyx_t_1, __pyx_int_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_int_1, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_margin = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":259
 *     path_length = 0;
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length
 *     for i in xrange(len(f_pts) - 1):             # <<<<<<<<<<<<<<
 *         pt1x, pt1y = f_pts[i]
 *         pt2x, pt2y = f_pts[i + 1]
 */
  __pyx_t_6 = PyList_GET_SIZE(__pyx_v_f_pts); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 259, __pyx_L1_error)
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_t_6 - 1)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_xrange, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
    __pyx_t_1 = __pyx_t_8; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 259, __pyx_L1_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 259, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 259, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":260
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length
 *     for i in xrange(len(f_pts) - 1):
 *         pt1x, pt1y = f_pts[i]             # <<<<<<<<<<<<<<
 *         pt2x, pt2y = f_pts[i + 1]
 *         diam1 = f_diams[i]
 */
    __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_f_pts, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {
      PyObject* sequence = __pyx_t_8;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 260, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_17 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L32_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_5 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L32_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_10), 2) < 0) __PYX_ERR(0, 260, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L33_unpacking_done;
      __pyx_L32_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 260, __pyx_L1_error)
      __pyx_L33_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_pt1x, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt1y, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":261
 *     for i in xrange(len(f_pts) - 1):
 *         pt1x, pt1y = f_pts[i]
 *         pt2x, pt2y = f_pts[i + 1]             # <<<<<<<<<<<<<<
 *         diam1 = f_diams[i]
 *         diam2 = f_diams[i + 1]
 */
    __pyx_t_8 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_f_pts, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 261, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_17 = Py_TYPE(__pyx_t_10)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L34_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_9 = __pyx_t_17(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L34_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_17(__pyx_t_10), 2) < 0) __PYX_ERR(0, 261, __pyx_L1_error)
      __pyx_t_17 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L35_unpacking_done;
      __pyx_L34_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_17 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 261, __pyx_L1_error)
      __pyx_L35_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_pt2x, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt2y, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":262
 *         pt1x, pt1y = f_pts[i]
 *         pt2x, pt2y = f_pts[i + 1]
 *         diam1 = f_diams[i]             # <<<<<<<<<<<<<<
 *         diam2 = f_diams[i + 1]
 *         thickness = numpy.sqrt((pt2x-pt1x)**2 + (pt2y-pt1y)**2)
 */
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_f_diams, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_diam1 = __pyx_t_2;

    /* "neuron/rxd/geometry3d/ctng.pyx":263
 *         pt2x, pt2y = f_pts[i + 1]
 *         diam1 = f_diams[i]
 *         diam2 = f_diams[i + 1]             # <<<<<<<<<<<<<<
 *         thickness = numpy.sqrt((pt2x-pt1x)**2 + (pt2y-pt1y)**2)
 *         segment_locs.append(path_length+(thickness/2))
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_f_diams, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_2 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_diam2 = __pyx_t_2;

    /* "neuron/rxd/geometry3d/ctng.pyx":264
 *         diam1 = f_diams[i]
 *         diam2 = f_diams[i + 1]
 *         thickness = numpy.sqrt((pt2x-pt1x)**2 + (pt2y-pt1y)**2)             # <<<<<<<<<<<<<<
 *         segment_locs.append(path_length+(thickness/2))
 *         path_length += thickness
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_pt2x, __pyx_v_pt1x); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = PyNumber_Power(__pyx_t_5, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_pt2y, __pyx_v_pt1y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyNumber_Power(__pyx_t_5, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_t_10, __pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    __pyx_t_9 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_14, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_thickness, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":265
 *         diam2 = f_diams[i + 1]
 *         thickness = numpy.sqrt((pt2x-pt1x)**2 + (pt2y-pt1y)**2)
 *         segment_locs.append(path_length+(thickness/2))             # <<<<<<<<<<<<<<
 *         path_length += thickness
 * 
 */
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_thickness, __pyx_int_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyNumber_Add(__pyx_v_path_length, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_segment_locs, __pyx_t_8); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":266
 *         thickness = numpy.sqrt((pt2x-pt1x)**2 + (pt2y-pt1y)**2)
 *         segment_locs.append(path_length+(thickness/2))
 *         path_length += thickness             # <<<<<<<<<<<<<<
 * 
 *         objects.append(SkewCone(pt1x, pt1y, z0, diam1 * 0.5, pt1x + delta_x, pt1y + delta_y, z0, diam2 * 0.5, pt2x, pt2y, z0))
 */
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_path_length, __pyx_v_thickness); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF_SET(__pyx_v_path_length, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":268
 *         path_length += thickness
 * 
 *         objects.append(SkewCone(pt1x, pt1y, z0, diam1 * 0.5, pt1x + delta_x, pt1y + delta_y, z0, diam2 * 0.5, pt2x, pt2y, z0))             # <<<<<<<<<<<<<<
 *     for j, s in enumerate(objects):
 *         loc = segment_locs[j]/path_length       # normalized along length
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_SkewCone); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_14 = PyFloat_FromDouble((__pyx_v_diam1 * 0.5)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_10 = PyNumber_Add(__pyx_v_pt1x, __pyx_v_delta_x); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_16 = PyNumber_Add(__pyx_v_pt1y, __pyx_v_delta_y); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_26 = PyFloat_FromDouble((__pyx_v_diam2 * 0.5)); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_26);
    __pyx_t_27 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_27);
    __pyx_t_28 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_28 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_28)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_28);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[12] = {__pyx_t_28, __pyx_v_pt1x, __pyx_v_pt1y, __pyx_t_5, __pyx_t_14, __pyx_t_10, __pyx_t_16, __pyx_t_13, __pyx_t_26, __pyx_v_pt2x, __pyx_v_pt2y, __pyx_t_27};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 11+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[12] = {__pyx_t_28, __pyx_v_pt1x, __pyx_v_pt1y, __pyx_t_5, __pyx_t_14, __pyx_t_10, __pyx_t_16, __pyx_t_13, __pyx_t_26, __pyx_v_pt2x, __pyx_v_pt2y, __pyx_t_27};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 11+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_28); __pyx_t_28 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
    } else
    #endif
    {
      __pyx_t_29 = PyTuple_New(11+__pyx_t_15); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      if (__pyx_t_28) {
        __Pyx_GIVEREF(__pyx_t_28); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_28); __pyx_t_28 = NULL;
      }
      __Pyx_INCREF(__pyx_v_pt1x);
      __Pyx_GIVEREF(__pyx_v_pt1x);
      PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_15, __pyx_v_pt1x);
      __Pyx_INCREF(__pyx_v_pt1y);
      __Pyx_GIVEREF(__pyx_v_pt1y);
      PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_15, __pyx_v_pt1y);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_29, 2+__pyx_t_15, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_14);
      PyTuple_SET_ITEM(__pyx_t_29, 3+__pyx_t_15, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_29, 4+__pyx_t_15, __pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_29, 5+__pyx_t_15, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_13);
      PyTuple_SET_ITEM(__pyx_t_29, 6+__pyx_t_15, __pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_26);
      PyTuple_SET_ITEM(__pyx_t_29, 7+__pyx_t_15, __pyx_t_26);
      __Pyx_INCREF(__pyx_v_pt2x);
      __Pyx_GIVEREF(__pyx_v_pt2x);
      PyTuple_SET_ITEM(__pyx_t_29, 8+__pyx_t_15, __pyx_v_pt2x);
      __Pyx_INCREF(__pyx_v_pt2y);
      __Pyx_GIVEREF(__pyx_v_pt2y);
      PyTuple_SET_ITEM(__pyx_t_29, 9+__pyx_t_15, __pyx_v_pt2y);
      __Pyx_GIVEREF(__pyx_t_27);
      PyTuple_SET_ITEM(__pyx_t_29, 10+__pyx_t_15, __pyx_t_27);
      __pyx_t_5 = 0;
      __pyx_t_14 = 0;
      __pyx_t_10 = 0;
      __pyx_t_16 = 0;
      __pyx_t_13 = 0;
      __pyx_t_26 = 0;
      __pyx_t_27 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_29, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 268, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_24 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_t_8); if (unlikely(__pyx_t_24 == ((int)-1))) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":259
 *     path_length = 0;
 *     margin = 1/(sec.nseg*2)   # half a segment, normalized length
 *     for i in xrange(len(f_pts) - 1):             # <<<<<<<<<<<<<<
 *         pt1x, pt1y = f_pts[i]
 *         pt2x, pt2y = f_pts[i + 1]
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":269
 * 
 *         objects.append(SkewCone(pt1x, pt1y, z0, diam1 * 0.5, pt1x + delta_x, pt1y + delta_y, z0, diam2 * 0.5, pt2x, pt2y, z0))
 *     for j, s in enumerate(objects):             # <<<<<<<<<<<<<<
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  __pyx_t_8 = __pyx_v_objects; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
  for (;;) {
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 269, __pyx_L1_error)
    #else
    __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_j, __pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":270
 *         objects.append(SkewCone(pt1x, pt1y, z0, diam1 * 0.5, pt1x + delta_x, pt1y + delta_y, z0, diam2 * 0.5, pt2x, pt2y, z0))
 *     for j, s in enumerate(objects):
 *         loc = segment_locs[j]/path_length       # normalized along length             # <<<<<<<<<<<<<<
 *         for seg in sec:
 *             if numpy.abs(seg.x - loc) <= margin:
 */
    __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_v_segment_locs, __pyx_v_j); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_29 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_v_path_length); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_29);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_loc, __pyx_t_29);
    __pyx_t_29 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":271
 *     for j, s in enumerate(objects):
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:             # <<<<<<<<<<<<<<
 *             if numpy.abs(seg.x - loc) <= margin:
 *                 seg_dict[s] = seg
 */
    if (likely(PyList_CheckExact(__pyx_v_sec)) || PyTuple_CheckExact(__pyx_v_sec)) {
      __pyx_t_29 = __pyx_v_sec; __Pyx_INCREF(__pyx_t_29); __pyx_t_11 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_29 = PyObject_GetIter(__pyx_v_sec); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_7 = Py_TYPE(__pyx_t_29)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 271, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_29))) {
          if (__pyx_t_11 >= PyList_GET_SIZE(__pyx_t_29)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_29, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_29, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 271, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_11 >= PyTuple_GET_SIZE(__pyx_t_29)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_29, __pyx_t_11); __Pyx_INCREF(__pyx_t_9); __pyx_t_11++; if (unlikely(0 < 0)) __PYX_ERR(0, 271, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_29, __pyx_t_11); __pyx_t_11++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 271, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_7(__pyx_t_29);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 271, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_seg, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":272
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:
 *             if numpy.abs(seg.x - loc) <= margin:             # <<<<<<<<<<<<<<
 *                 seg_dict[s] = seg
 *                 break;
 */
      __Pyx_GetModuleGlobalName(__pyx_t_27, __pyx_n_s_numpy); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_26 = __Pyx_PyObject_GetAttrStr(__pyx_t_27, __pyx_n_s_abs); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_26);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = __Pyx_PyObject_GetAttrStr(__pyx_v_seg, __pyx_n_s_x); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_27);
      __pyx_t_13 = PyNumber_Subtract(__pyx_t_27, __pyx_v_loc); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
      __pyx_t_27 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_26))) {
        __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_26);
        if (likely(__pyx_t_27)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_26);
          __Pyx_INCREF(__pyx_t_27);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_26, function);
        }
      }
      __pyx_t_9 = (__pyx_t_27) ? __Pyx_PyObject_Call2Args(__pyx_t_26, __pyx_t_27, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_26, __pyx_t_13);
      __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      __pyx_t_26 = PyObject_RichCompare(__pyx_t_9, __pyx_v_margin, Py_LE); __Pyx_XGOTREF(__pyx_t_26); if (unlikely(!__pyx_t_26)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_26); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 272, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
      if (__pyx_t_23) {

        /* "neuron/rxd/geometry3d/ctng.pyx":273
 *         for seg in sec:
 *             if numpy.abs(seg.x - loc) <= margin:
 *                 seg_dict[s] = seg             # <<<<<<<<<<<<<<
 *                 break;
 *     return seg_dict, f_pts
 */
        if (unlikely(PyDict_SetItem(__pyx_v_seg_dict, __pyx_v_s, __pyx_v_seg) < 0)) __PYX_ERR(0, 273, __pyx_L1_error)

        /* "neuron/rxd/geometry3d/ctng.pyx":274
 *             if numpy.abs(seg.x - loc) <= margin:
 *                 seg_dict[s] = seg
 *                 break;             # <<<<<<<<<<<<<<
 *     return seg_dict, f_pts
 * @cython.wraparound(False)
 */
        goto __pyx_L39_break;

        /* "neuron/rxd/geometry3d/ctng.pyx":272
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:
 *             if numpy.abs(seg.x - loc) <= margin:             # <<<<<<<<<<<<<<
 *                 seg_dict[s] = seg
 *                 break;
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":271
 *     for j, s in enumerate(objects):
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:             # <<<<<<<<<<<<<<
 *             if numpy.abs(seg.x - loc) <= margin:
 *                 seg_dict[s] = seg
 */
    }
    __pyx_L39_break:;
    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":269
 * 
 *         objects.append(SkewCone(pt1x, pt1y, z0, diam1 * 0.5, pt1x + delta_x, pt1y + delta_y, z0, diam2 * 0.5, pt2x, pt2y, z0))
 *     for j, s in enumerate(objects):             # <<<<<<<<<<<<<<
 *         loc = segment_locs[j]/path_length       # normalized along length
 *         for seg in sec:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":275
 *                 seg_dict[s] = seg
 *                 break;
 *     return seg_dict, f_pts             # <<<<<<<<<<<<<<
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_seg_dict);
  __Pyx_GIVEREF(__pyx_v_seg_dict);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_seg_dict);
  __Pyx_INCREF(__pyx_v_f_pts);
  __Pyx_GIVEREF(__pyx_v_f_pts);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_f_pts);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":169
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def soma_objects(x, y, z, sec, double x0, double y0, double z0, int n_soma_step):             # <<<<<<<<<<<<<<
 *     cdef double diam1, diam2, somax, somay, somaz
 *     cdef list objects = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.soma_objects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_objects);
  __Pyx_XDECREF(__pyx_v_f_pts);
  __Pyx_XDECREF(__pyx_v_seg_dict);
  __Pyx_XDECREF(__pyx_v_xshifted);
  __Pyx_XDECREF(__pyx_v_yshifted);
  __Pyx_XDECREF(__pyx_v_zshifted);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_j);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_tobj);
  __Pyx_XDECREF(__pyx_v_major);
  __Pyx_XDECREF(__pyx_v_minor);
  __Pyx_XDECREF(__pyx_v_x1);
  __Pyx_XDECREF(__pyx_v_y1);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_xs_loop);
  __Pyx_XDECREF(__pyx_v_ys_loop);
  __Pyx_XDECREF(__pyx_v_pts);
  __Pyx_XDECREF(__pyx_v_pts_sources);
  __Pyx_XDECREF(__pyx_v_x3);
  __Pyx_XDECREF(__pyx_v_y3);
  __Pyx_XDECREF(__pyx_v_x4);
  __Pyx_XDECREF(__pyx_v_y4);
  __Pyx_XDECREF(__pyx_v_pt);
  __Pyx_XDECREF(__pyx_v_major_p1);
  __Pyx_XDECREF(__pyx_v_major_p2);
  __Pyx_XDECREF(__pyx_v_extreme1);
  __Pyx_XDECREF(__pyx_v_extreme2);
  __Pyx_XDECREF(__pyx_v_major_length);
  __Pyx_XDECREF(__pyx_v_delta_x);
  __Pyx_XDECREF(__pyx_v_delta_y);
  __Pyx_XDECREF(__pyx_v_f_diams);
  __Pyx_XDECREF(__pyx_v_p1);
  __Pyx_XDECREF(__pyx_v_p2);
  __Pyx_XDECREF(__pyx_v_cx);
  __Pyx_XDECREF(__pyx_v_cy);
  __Pyx_XDECREF(__pyx_v_segment_locs);
  __Pyx_XDECREF(__pyx_v_path_length);
  __Pyx_XDECREF(__pyx_v_margin);
  __Pyx_XDECREF(__pyx_v_pt1x);
  __Pyx_XDECREF(__pyx_v_pt1y);
  __Pyx_XDECREF(__pyx_v_pt2x);
  __Pyx_XDECREF(__pyx_v_pt2y);
  __Pyx_XDECREF(__pyx_v_thickness);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_loc);
  __Pyx_XDECREF(__pyx_v_seg);
  __Pyx_XDECREF(__pyx_v_xx);
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_3constructive_neuronal_geometry(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6neuron_3rxd_10geometry3d_4ctng_3constructive_neuronal_geometry = {"constructive_neuronal_geometry", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_3constructive_neuronal_geometry, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6neuron_3rxd_10geometry3d_4ctng_3constructive_neuronal_geometry(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_source = 0;
  int __pyx_v_n_soma_step;
  double __pyx_v_dx;
  PyObject *__pyx_v_nouniform = 0;
  PyObject *__pyx_v_relevant_pts = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constructive_neuronal_geometry (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_n_soma_step,&__pyx_n_s_dx,&__pyx_n_s_nouniform,&__pyx_n_s_relevant_pts,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_False);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_n_soma_step)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constructive_neuronal_geometry", 0, 3, 5, 1); __PYX_ERR(0, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constructive_neuronal_geometry", 0, 3, 5, 2); __PYX_ERR(0, 278, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nouniform);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_relevant_pts);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "constructive_neuronal_geometry") < 0)) __PYX_ERR(0, 278, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = values[0];
    __pyx_v_n_soma_step = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_n_soma_step == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
    __pyx_v_dx = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_dx == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
    __pyx_v_nouniform = values[3];
    __pyx_v_relevant_pts = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constructive_neuronal_geometry", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 278, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.constructive_neuronal_geometry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6neuron_3rxd_10geometry3d_4ctng_2constructive_neuronal_geometry(__pyx_self, __pyx_v_source, __pyx_v_n_soma_step, __pyx_v_dx, __pyx_v_nouniform, __pyx_v_relevant_pts);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "neuron/rxd/geometry3d/ctng.pyx":307
 *         cell = source
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)             # <<<<<<<<<<<<<<
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')
 */

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr(__pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 307, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_constructive_neuronal_geometry_l, __pyx_n_s_neuron_rxd_geometry3d_ctng); if (unlikely(!gen)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.constructive_neuronal_geometry.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 307, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_cell)) { __Pyx_RaiseClosureNameError("cell"); __PYX_ERR(0, 307, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_cell, __pyx_n_s_sections); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 307, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 307, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 307, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_sec);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_sec, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_sec, __pyx_n_s_iscontour); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_XGIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_2);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 307, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */

static PyObject *__pyx_pf_6neuron_3rxd_10geometry3d_4ctng_2constructive_neuronal_geometry(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_source, int __pyx_v_n_soma_step, double __pyx_v_dx, PyObject *__pyx_v_nouniform, PyObject *__pyx_v_relevant_pts) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *__pyx_cur_scope;
  PyObject *__pyx_v_objects = 0;
  PyObject *__pyx_v_cone_segment_dict = 0;
  PyObject *__pyx_v_soma_segment_dict = 0;
  PyObject *__pyx_v_join_groups = 0;
  PyObject *__pyx_v_obj_pts_dict = 0;
  CYTHON_UNUSED PyObject *__pyx_v_obj_sections = 0;
  CYTHON_UNUSED PyObject *__pyx_v_cone_sections = 0;
  PyObject *__pyx_v_soma_secs = 0;
  PyObject *__pyx_v_potential_soma_cones = 0;
  int __pyx_v_i;
  int __pyx_v_k;
  double __pyx_v_x0;
  double __pyx_v_y0;
  double __pyx_v_z0;
  double __pyx_v_x1;
  double __pyx_v_y1;
  double __pyx_v_z1;
  double __pyx_v_x2;
  double __pyx_v_y2;
  double __pyx_v_z2;
  double __pyx_v_x3;
  double __pyx_v_y3;
  double __pyx_v_r0;
  double __pyx_v_r1;
  double __pyx_v_r2;
  PyObject *__pyx_v_pts = 0;
  PyObject *__pyx_v_f_pts = 0;
  PyObject *__pyx_v_branches = 0;
  PyObject *__pyx_v_parent_sec_name = 0;
  PyObject *__pyx_v_pt = 0;
  int __pyx_v_no_parent_count;
  int __pyx_v_source_is_import3d;
  PyObject *__pyx_v_num_contours = NULL;
  PyObject *__pyx_v_sec = NULL;
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_z = NULL;
  PyObject *__pyx_v_center_vec = NULL;
  PyObject *__pyx_v_new_objects = NULL;
  PyObject *__pyx_v_is_stack = NULL;
  PyObject *__pyx_v_pts3d = NULL;
  PyObject *__pyx_v_shift = NULL;
  PyObject *__pyx_v_orig_x = NULL;
  PyObject *__pyx_v_orig_y = NULL;
  PyObject *__pyx_v_orig_z = NULL;
  PyObject *__pyx_v_sx = NULL;
  PyObject *__pyx_v_sy = NULL;
  PyObject *__pyx_v_sz = NULL;
  PyObject *__pyx_v_warnings = NULL;
  PyObject *__pyx_v_diam_corrections = 0;
  CYTHON_UNUSED PyObject *__pyx_v_clip_copying = 0;
  PyObject *__pyx_v_all_cones = NULL;
  PyObject *__pyx_v_pts_cones_db = NULL;
  PyObject *__pyx_v_diam_db = NULL;
  PyObject *__pyx_v_branch = NULL;
  PyObject *__pyx_v_psec = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_rng = NULL;
  PyObject *__pyx_v_arc3d = NULL;
  PyObject *__pyx_v_diam3d = NULL;
  PyObject *__pyx_v_x3d = NULL;
  PyObject *__pyx_v_y3d = NULL;
  PyObject *__pyx_v_z3d = NULL;
  PyObject *__pyx_v_iseg = NULL;
  PyObject *__pyx_v_seg = NULL;
  PyObject *__pyx_v_lo = NULL;
  PyObject *__pyx_v_hi = NULL;
  PyObject *__pyx_v_diams = NULL;
  PyObject *__pyx_v_xcoords = NULL;
  PyObject *__pyx_v_ycoords = NULL;
  PyObject *__pyx_v_zcoords = NULL;
  Py_ssize_t __pyx_v_end;
  PyObject *__pyx_v_conecoords = NULL;
  PyObject *__pyx_v_somaz = NULL;
  PyObject *__pyx_v_cp = NULL;
  PyObject *__pyx_v_d0 = NULL;
  PyObject *__pyx_v_d1 = NULL;
  PyObject *__pyx_v_axisx = NULL;
  PyObject *__pyx_v_axisy = NULL;
  PyObject *__pyx_v_axisz = NULL;
  PyObject *__pyx_v_deltad = NULL;
  PyObject *__pyx_v_axislength = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_cone_clip_db = 0;
  int __pyx_v_sharp_turn;
  CYTHON_UNUSED PyObject *__pyx_v_join_items_needing_clipped = NULL;
  PyObject *__pyx_v_cone = NULL;
  PyObject *__pyx_v_joingroup = NULL;
  PyObject *__pyx_v_pt1 = NULL;
  PyObject *__pyx_v_pt2 = NULL;
  PyObject *__pyx_v_axis = NULL;
  PyObject *__pyx_v_left_neighbors = NULL;
  PyObject *__pyx_v_right_neighbors = NULL;
  PyObject *__pyx_v_neighbor = NULL;
  PyObject *__pyx_v_neighbor_left = NULL;
  PyObject *__pyx_v_neighbor_right = NULL;
  PyObject *__pyx_v_clips = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_join_item = NULL;
  PyObject *__pyx_v_pt0 = NULL;
  PyObject *__pyx_v_naxis = NULL;
  PyObject *__pyx_v_sp = NULL;
  PyObject *__pyx_v_c0 = NULL;
  PyObject *__pyx_v_c1 = NULL;
  PyObject *__pyx_v_plane_normal = NULL;
  PyObject *__pyx_v_radial_vec = NULL;
  PyObject *__pyx_v_nradial_vec = NULL;
  PyObject *__pyx_v_corner_pts = NULL;
  PyObject *__pyx_v_my_corner_count = NULL;
  PyObject *__pyx_v_corner_count = NULL;
  PyObject *__pyx_v_neighbor_copy = NULL;
  PyObject *__pyx_v_z3 = NULL;
  PyObject *__pyx_v_r3 = NULL;
  PyObject *__pyx_v_pt3 = NULL;
  PyObject *__pyx_v_radial_vec_norm = NULL;
  PyObject *__pyx_v_int_clip = NULL;
  PyObject *__pyx_v_clip = NULL;
  PyObject *__pyx_v_cones = NULL;
  PyObject *__pyx_gb_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_2generator = 0;
  PyObject *__pyx_v_s0 = NULL;
  PyObject *__pyx_v_s1 = NULL;
  PyObject *__pyx_v_arc = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_cone = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *(*__pyx_t_18)(PyObject *);
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  Py_ssize_t __pyx_t_22;
  PyObject *(*__pyx_t_23)(PyObject *);
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  long __pyx_t_26;
  PyObject *__pyx_t_27 = NULL;
  int __pyx_t_28;
  PyObject *__pyx_t_29 = NULL;
  double __pyx_t_30;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("constructive_neuronal_geometry", 0);
  __pyx_cur_scope = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(__pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 278, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":279
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):
 *     cdef list objects = []             # <<<<<<<<<<<<<<
 *     cdef dict cone_segment_dict = {}
 *     cdef dict soma_segment_dict = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_objects = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":280
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}             # <<<<<<<<<<<<<<
 *     cdef dict soma_segment_dict = {}
 *     cdef list join_groups = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cone_segment_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":281
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 *     cdef dict soma_segment_dict = {}             # <<<<<<<<<<<<<<
 *     cdef list join_groups = []
 *     cdef dict obj_pts_dict = {}         # for returning corner points of join objects
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_soma_segment_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":282
 *     cdef dict cone_segment_dict = {}
 *     cdef dict soma_segment_dict = {}
 *     cdef list join_groups = []             # <<<<<<<<<<<<<<
 *     cdef dict obj_pts_dict = {}         # for returning corner points of join objects
 *     cdef list obj_sections = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_join_groups = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":283
 *     cdef dict soma_segment_dict = {}
 *     cdef list join_groups = []
 *     cdef dict obj_pts_dict = {}         # for returning corner points of join objects             # <<<<<<<<<<<<<<
 *     cdef list obj_sections = []
 *     cdef list cone_sections = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj_pts_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":284
 *     cdef list join_groups = []
 *     cdef dict obj_pts_dict = {}         # for returning corner points of join objects
 *     cdef list obj_sections = []             # <<<<<<<<<<<<<<
 *     cdef list cone_sections = []
 *     cdef dict soma_secs = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_obj_sections = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":285
 *     cdef dict obj_pts_dict = {}         # for returning corner points of join objects
 *     cdef list obj_sections = []
 *     cdef list cone_sections = []             # <<<<<<<<<<<<<<
 *     cdef dict soma_secs = {}
 *     cdef dict potential_soma_cones = {}
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cone_sections = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":286
 *     cdef list obj_sections = []
 *     cdef list cone_sections = []
 *     cdef dict soma_secs = {}             # <<<<<<<<<<<<<<
 *     cdef dict potential_soma_cones = {}
 *     cdef int i, j, k
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_soma_secs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":287
 *     cdef list cone_sections = []
 *     cdef dict soma_secs = {}
 *     cdef dict potential_soma_cones = {}             # <<<<<<<<<<<<<<
 *     cdef int i, j, k
 *     cdef double x0, y0, z0, x1, y1, z1, x2, y2, z2, x3, y3, x4, y4, r0, r1, r2
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_potential_soma_cones = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":295
 *     cdef tuple pt
 *     #cdef numpy.ndarray[numpy.float_t, ndim=1] x, y, z, xs_loop, ys_loop
 *     cdef int no_parent_count = 0             # <<<<<<<<<<<<<<
 * 
 *     source_is_import3d = False
 */
  __pyx_v_no_parent_count = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":297
 *     cdef int no_parent_count = 0
 * 
 *     source_is_import3d = False             # <<<<<<<<<<<<<<
 *     branches = []
 *     f_pts = []
 */
  __pyx_v_source_is_import3d = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":298
 * 
 *     source_is_import3d = False
 *     branches = []             # <<<<<<<<<<<<<<
 *     f_pts = []
 *     parent_sec_name = []
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_branches = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":299
 *     source_is_import3d = False
 *     branches = []
 *     f_pts = []             # <<<<<<<<<<<<<<
 *     parent_sec_name = []
 *     num_contours = None
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_f_pts = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":300
 *     branches = []
 *     f_pts = []
 *     parent_sec_name = []             # <<<<<<<<<<<<<<
 *     num_contours = None
 *     # TODO: come up with a better way of checking type
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_parent_sec_name = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":301
 *     f_pts = []
 *     parent_sec_name = []
 *     num_contours = None             # <<<<<<<<<<<<<<
 *     # TODO: come up with a better way of checking type
 *     if hasattr(source, 'sections'):
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_num_contours = Py_None;

  /* "neuron/rxd/geometry3d/ctng.pyx":303
 *     num_contours = None
 *     # TODO: come up with a better way of checking type
 *     if hasattr(source, 'sections'):             # <<<<<<<<<<<<<<
 *         source_is_import3d = True
 *         cell = source
 */
  __pyx_t_2 = __Pyx_HasAttr(__pyx_v_source, __pyx_n_s_sections); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 303, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "neuron/rxd/geometry3d/ctng.pyx":304
 *     # TODO: come up with a better way of checking type
 *     if hasattr(source, 'sections'):
 *         source_is_import3d = True             # <<<<<<<<<<<<<<
 *         cell = source
 *         # probably an Import3D type
 */
    __pyx_v_source_is_import3d = 1;

    /* "neuron/rxd/geometry3d/ctng.pyx":305
 *     if hasattr(source, 'sections'):
 *         source_is_import3d = True
 *         cell = source             # <<<<<<<<<<<<<<
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)
 */
    __Pyx_INCREF(__pyx_v_source);
    __Pyx_GIVEREF(__pyx_v_source);
    __pyx_cur_scope->__pyx_v_cell = __pyx_v_source;

    /* "neuron/rxd/geometry3d/ctng.pyx":307
 *         cell = source
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)             # <<<<<<<<<<<<<<
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')
 */
    __pyx_t_1 = __pyx_pf_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_num_contours, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":308
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)
 *         if num_contours > 1:             # <<<<<<<<<<<<<<
 *             raise RxDException('more than one contour is not currently supported')
 *         if num_contours <= 1:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_num_contours, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_3)) {

      /* "neuron/rxd/geometry3d/ctng.pyx":309
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')             # <<<<<<<<<<<<<<
 *         if num_contours <= 1:
 *             # CTNG:soma
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_s_more_than_one_contour_is_not_cur) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_s_more_than_one_contour_is_not_cur);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 309, __pyx_L1_error)

      /* "neuron/rxd/geometry3d/ctng.pyx":308
 *         # probably an Import3D type
 *         num_contours = sum(sec.iscontour_ for sec in cell.sections)
 *         if num_contours > 1:             # <<<<<<<<<<<<<<
 *             raise RxDException('more than one contour is not currently supported')
 *         if num_contours <= 1:
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":310
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')
 *         if num_contours <= 1:             # <<<<<<<<<<<<<<
 *             # CTNG:soma
 *             branches = []
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_num_contours, __pyx_int_1, Py_LE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 310, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_3) {

      /* "neuron/rxd/geometry3d/ctng.pyx":312
 *         if num_contours <= 1:
 *             # CTNG:soma
 *             branches = []             # <<<<<<<<<<<<<<
 *             parent_sec_name = []
 *             for sec in cell.sections:
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 312, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_branches, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":313
 *             # CTNG:soma
 *             branches = []
 *             parent_sec_name = []             # <<<<<<<<<<<<<<
 *             for sec in cell.sections:
 *                 if sec.iscontour_:
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_parent_sec_name, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":314
 *             branches = []
 *             parent_sec_name = []
 *             for sec in cell.sections:             # <<<<<<<<<<<<<<
 *                 if sec.iscontour_:
 *                     x, y, z = [sec.raw.getrow(i).to_python() for i in xrange(3)]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_cell, __pyx_n_s_sections); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 314, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 314, __pyx_L1_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 314, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_7(__pyx_t_1);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 314, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        __Pyx_XDECREF_SET(__pyx_v_sec, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":315
 *             parent_sec_name = []
 *             for sec in cell.sections:
 *                 if sec.iscontour_:             # <<<<<<<<<<<<<<
 *                     x, y, z = [sec.raw.getrow(i).to_python() for i in xrange(3)]
 * 
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_iscontour); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_3) {

          /* "neuron/rxd/geometry3d/ctng.pyx":316
 *             for sec in cell.sections:
 *                 if sec.iscontour_:
 *                     x, y, z = [sec.raw.getrow(i).to_python() for i in xrange(3)]             # <<<<<<<<<<<<<<
 * 
 *                     # compute the center of the contour based on uniformly spaced points around the perimeter
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
            __pyx_v_i = __pyx_t_8;
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_raw); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_getrow); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_12 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            __pyx_t_9 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_12, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_to_python); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            __pyx_t_5 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          if (1) {
            PyObject* sequence = __pyx_t_4;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 316, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_9);
            #else
            __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_9 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            #endif
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_11);
          __pyx_t_11 = 0;
          __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":319
 * 
 *                     # compute the center of the contour based on uniformly spaced points around the perimeter
 *                     center_vec = sec.contourcenter(sec.raw.getrow(0), sec.raw.getrow(1), sec.raw.getrow(2))             # <<<<<<<<<<<<<<
 *                     x0, y0, z0 = [center_vec.x[i] for i in xrange(3)]
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0, y0, z0, n_soma_step)
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_contourcenter); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_raw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getrow); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_11 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_5, __pyx_int_0) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_int_0);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_raw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getrow); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_10 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_5, __pyx_int_1) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_int_1);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_raw); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_getrow); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
            }
          }
          __pyx_t_12 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_5, __pyx_int_2) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_int_2);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 319, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_11, __pyx_t_10, __pyx_t_12};
            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[4] = {__pyx_t_13, __pyx_t_11, __pyx_t_10, __pyx_t_12};
            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 319, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_8, __pyx_t_12);
            __pyx_t_11 = 0;
            __pyx_t_10 = 0;
            __pyx_t_12 = 0;
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 319, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_center_vec, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":320
 *                     # compute the center of the contour based on uniformly spaced points around the perimeter
 *                     center_vec = sec.contourcenter(sec.raw.getrow(0), sec.raw.getrow(1), sec.raw.getrow(2))
 *                     x0, y0, z0 = [center_vec.x[i] for i in xrange(3)]             # <<<<<<<<<<<<<<
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0, y0, z0, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0)
 */
          __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 320, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
            __pyx_v_i = __pyx_t_8;
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_center_vec, __pyx_n_s_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_9, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          if (1) {
            PyObject* sequence = __pyx_t_4;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 320, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 2); 
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_12);
            #else
            __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_12 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 320, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            #endif
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_12); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_x0 = __pyx_t_14;
          __pyx_v_y0 = __pyx_t_15;
          __pyx_v_z0 = __pyx_t_16;

          /* "neuron/rxd/geometry3d/ctng.pyx":321
 *                     center_vec = sec.contourcenter(sec.raw.getrow(0), sec.raw.getrow(1), sec.raw.getrow(2))
 *                     x0, y0, z0 = [center_vec.x[i] for i in xrange(3)]
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0, y0, z0, n_soma_step)             # <<<<<<<<<<<<<<
 *                     soma_secs[sec] = (f_pts, z0)
 *                     soma_segment_dict.update(new_objects)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_soma_objects); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n_soma_step); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[9] = {__pyx_t_13, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_sec, __pyx_t_9, __pyx_t_5, __pyx_t_10, __pyx_t_11};
            __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_12)) {
            PyObject *__pyx_temp[9] = {__pyx_t_13, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_sec, __pyx_t_9, __pyx_t_5, __pyx_t_10, __pyx_t_11};
            __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_12, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_INCREF(__pyx_v_x);
            __Pyx_GIVEREF(__pyx_v_x);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_v_x);
            __Pyx_INCREF(__pyx_v_y);
            __Pyx_GIVEREF(__pyx_v_y);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_v_y);
            __Pyx_INCREF(__pyx_v_z);
            __Pyx_GIVEREF(__pyx_v_z);
            PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_8, __pyx_v_z);
            __Pyx_INCREF(__pyx_v_sec);
            __Pyx_GIVEREF(__pyx_v_sec);
            PyTuple_SET_ITEM(__pyx_t_17, 3+__pyx_t_8, __pyx_v_sec);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_17, 4+__pyx_t_8, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_17, 5+__pyx_t_8, __pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_17, 6+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_17, 7+__pyx_t_8, __pyx_t_11);
            __pyx_t_9 = 0;
            __pyx_t_5 = 0;
            __pyx_t_10 = 0;
            __pyx_t_11 = 0;
            __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_17, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
            PyObject* sequence = __pyx_t_4;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 321, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_17);
            #else
            __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            #endif
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 321, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_18 = Py_TYPE(__pyx_t_11)->tp_iternext;
            index = 0; __pyx_t_12 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_12)) goto __pyx_L13_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_12);
            index = 1; __pyx_t_17 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_17)) goto __pyx_L13_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_17);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_11), 2) < 0) __PYX_ERR(0, 321, __pyx_L1_error)
            __pyx_t_18 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L14_unpacking_done;
            __pyx_L13_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_18 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 321, __pyx_L1_error)
            __pyx_L14_unpacking_done:;
          }
          if (!(likely(PyList_CheckExact(__pyx_t_17))||((__pyx_t_17) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_17)->tp_name), 0))) __PYX_ERR(0, 321, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_new_objects, __pyx_t_12);
          __pyx_t_12 = 0;
          __Pyx_DECREF_SET(__pyx_v_f_pts, ((PyObject*)__pyx_t_17));
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":322
 *                     x0, y0, z0 = [center_vec.x[i] for i in xrange(3)]
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0, y0, z0, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0)             # <<<<<<<<<<<<<<
 *                     soma_segment_dict.update(new_objects)
 *                 else:
 */
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 322, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_17 = PyTuple_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 322, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_INCREF(__pyx_v_f_pts);
          __Pyx_GIVEREF(__pyx_v_f_pts);
          PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_v_f_pts);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_4);
          __pyx_t_4 = 0;
          if (unlikely(PyDict_SetItem(__pyx_v_soma_secs, __pyx_v_sec, __pyx_t_17) < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":323
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0, y0, z0, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0)
 *                     soma_segment_dict.update(new_objects)             # <<<<<<<<<<<<<<
 *                 else:
 *                     if sec.parentsec is not None:
 */
          __pyx_t_17 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_soma_segment_dict, __pyx_v_new_objects); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 323, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":315
 *             parent_sec_name = []
 *             for sec in cell.sections:
 *                 if sec.iscontour_:             # <<<<<<<<<<<<<<
 *                     x, y, z = [sec.raw.getrow(i).to_python() for i in xrange(3)]
 * 
 */
          goto __pyx_L8;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":325
 *                     soma_segment_dict.update(new_objects)
 *                 else:
 *                     if sec.parentsec is not None:             # <<<<<<<<<<<<<<
 *                         parent_sec_name.append(sec.parentsec.hname())
 *                     else:
 */
        /*else*/ {
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_parentsec); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 325, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_3 = (__pyx_t_17 != Py_None);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":326
 *                 else:
 *                     if sec.parentsec is not None:
 *                         parent_sec_name.append(sec.parentsec.hname())             # <<<<<<<<<<<<<<
 *                     else:
 *                         parent_sec_name.append(no_parent_count)
 */
            __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_parentsec); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 326, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_hname); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 326, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_4)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_4);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
              }
            }
            __pyx_t_17 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 326, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_parent_sec_name, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 326, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":325
 *                     soma_segment_dict.update(new_objects)
 *                 else:
 *                     if sec.parentsec is not None:             # <<<<<<<<<<<<<<
 *                         parent_sec_name.append(sec.parentsec.hname())
 *                     else:
 */
            goto __pyx_L15;
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":328
 *                         parent_sec_name.append(sec.parentsec.hname())
 *                     else:
 *                         parent_sec_name.append(no_parent_count)             # <<<<<<<<<<<<<<
 *                         no_parent_count += 1
 *                     branches.append(sec)
 */
          /*else*/ {
            __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_v_no_parent_count); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_parent_sec_name, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 328, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":329
 *                     else:
 *                         parent_sec_name.append(no_parent_count)
 *                         no_parent_count += 1             # <<<<<<<<<<<<<<
 *                     branches.append(sec)
 * 
 */
            __pyx_v_no_parent_count = (__pyx_v_no_parent_count + 1);
          }
          __pyx_L15:;

          /* "neuron/rxd/geometry3d/ctng.pyx":330
 *                         parent_sec_name.append(no_parent_count)
 *                         no_parent_count += 1
 *                     branches.append(sec)             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_branches, __pyx_v_sec); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 330, __pyx_L1_error)
        }
        __pyx_L8:;

        /* "neuron/rxd/geometry3d/ctng.pyx":314
 *             branches = []
 *             parent_sec_name = []
 *             for sec in cell.sections:             # <<<<<<<<<<<<<<
 *                 if sec.iscontour_:
 *                     x, y, z = [sec.raw.getrow(i).to_python() for i in xrange(3)]
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":310
 *         if num_contours > 1:
 *             raise RxDException('more than one contour is not currently supported')
 *         if num_contours <= 1:             # <<<<<<<<<<<<<<
 *             # CTNG:soma
 *             branches = []
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":303
 *     num_contours = None
 *     # TODO: come up with a better way of checking type
 *     if hasattr(source, 'sections'):             # <<<<<<<<<<<<<<
 *         source_is_import3d = True
 *         cell = source
 */
    goto __pyx_L3;
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":333
 * 
 *     else:
 *         h.define_shape()             # <<<<<<<<<<<<<<
 *         branches = []
 *         for sec in source:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_h); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_define_shape); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    __pyx_t_1 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":334
 *     else:
 *         h.define_shape()
 *         branches = []             # <<<<<<<<<<<<<<
 *         for sec in source:
 *             # TODO: make this more general (support for 3D contour outline)
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_branches, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":335
 *         h.define_shape()
 *         branches = []
 *         for sec in source:             # <<<<<<<<<<<<<<
 *             # TODO: make this more general (support for 3D contour outline)
 *             if sec.hoc_internal_name() in neuron._sec_db:
 */
    if (likely(PyList_CheckExact(__pyx_v_source)) || PyTuple_CheckExact(__pyx_v_source)) {
      __pyx_t_1 = __pyx_v_source; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_source); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 335, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_12); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 335, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_12); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 335, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 335, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        }
      } else {
        __pyx_t_12 = __pyx_t_7(__pyx_t_1);
        if (unlikely(!__pyx_t_12)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 335, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_12);
      }
      __Pyx_XDECREF_SET(__pyx_v_sec, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":337
 *         for sec in source:
 *             # TODO: make this more general (support for 3D contour outline)
 *             if sec.hoc_internal_name() in neuron._sec_db:             # <<<<<<<<<<<<<<
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]
 *                 if not is_stack:
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_hoc_internal_name); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
        }
      }
      __pyx_t_12 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_neuron); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_sec_db); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_12, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "neuron/rxd/geometry3d/ctng.pyx":338
 *             # TODO: make this more general (support for 3D contour outline)
 *             if sec.hoc_internal_name() in neuron._sec_db:
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]             # <<<<<<<<<<<<<<
 *                 if not is_stack:
 *                     shift = []
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_neuron); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sec_db); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_hoc_internal_name); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_17, function);
          }
        }
        __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
          PyObject* sequence = __pyx_t_17;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 8)) {
            if (size > 8) __Pyx_RaiseTooManyValuesError(8);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 338, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 4); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
            __pyx_t_13 = PyTuple_GET_ITEM(sequence, 6); 
            __pyx_t_20 = PyTuple_GET_ITEM(sequence, 7); 
          } else {
            __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_5 = PyList_GET_ITEM(sequence, 4); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
            __pyx_t_13 = PyList_GET_ITEM(sequence, 6); 
            __pyx_t_20 = PyList_GET_ITEM(sequence, 7); 
          }
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(__pyx_t_20);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[8] = {&__pyx_t_4,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_5,&__pyx_t_9,&__pyx_t_13,&__pyx_t_20};
            for (i=0; i < 8; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 338, __pyx_L1_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[8] = {&__pyx_t_4,&__pyx_t_12,&__pyx_t_11,&__pyx_t_10,&__pyx_t_5,&__pyx_t_9,&__pyx_t_13,&__pyx_t_20};
          __pyx_t_21 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 338, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_21)->tp_iternext;
          for (index=0; index < 8; index++) {
            PyObject* item = __pyx_t_18(__pyx_t_21); if (unlikely(!item)) goto __pyx_L19_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_21), 8) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          goto __pyx_L20_unpacking_done;
          __pyx_L19_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 338, __pyx_L1_error)
          __pyx_L20_unpacking_done:;
        }
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF_SET(__pyx_v_is_stack, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_11);
        __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_10);
        __pyx_t_10 = 0;
        __pyx_v_x0 = __pyx_t_16;
        __pyx_v_y0 = __pyx_t_15;
        __pyx_v_z0 = __pyx_t_14;
        __Pyx_XDECREF_SET(__pyx_v_pts3d, __pyx_t_20);
        __pyx_t_20 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":339
 *             if sec.hoc_internal_name() in neuron._sec_db:
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]
 *                 if not is_stack:             # <<<<<<<<<<<<<<
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 */
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_is_stack); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 339, __pyx_L1_error)
        __pyx_t_2 = ((!__pyx_t_3) != 0);
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":340
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]
 *                 if not is_stack:
 *                     shift = []             # <<<<<<<<<<<<<<
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 *                         shift.append((sec.x3d(i) - orig_x,
 */
          __pyx_t_17 = PyList_New(0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 340, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_XDECREF_SET(__pyx_v_shift, ((PyObject*)__pyx_t_17));
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":341
 *                 if not is_stack:
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):             # <<<<<<<<<<<<<<
 *                         shift.append((sec.x3d(i) - orig_x,
 *                                       sec.y3d(i) - orig_y,
 */
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_n3d); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_13 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_20);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_20, function);
            }
          }
          __pyx_t_17 = (__pyx_t_13) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_13) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = __Pyx_PyInt_SubtractObjC(__pyx_t_17, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_INCREF(__pyx_int_0);
          __Pyx_GIVEREF(__pyx_int_0);
          PyList_SET_ITEM(__pyx_t_17, 0, __pyx_int_0);
          __Pyx_GIVEREF(__pyx_t_20);
          PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_20);
          __pyx_t_20 = 0;
          __pyx_t_20 = PyTuple_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_17);
          __Pyx_INCREF(__pyx_v_pts3d);
          __Pyx_GIVEREF(__pyx_v_pts3d);
          PyTuple_SET_ITEM(__pyx_t_20, 1, __pyx_v_pts3d);
          __pyx_t_17 = 0;
          __pyx_t_17 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_20, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (likely(PyList_CheckExact(__pyx_t_17)) || PyTuple_CheckExact(__pyx_t_17)) {
            __pyx_t_20 = __pyx_t_17; __Pyx_INCREF(__pyx_t_20); __pyx_t_22 = 0;
            __pyx_t_23 = NULL;
          } else {
            __pyx_t_22 = -1; __pyx_t_20 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 341, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_23 = Py_TYPE(__pyx_t_20)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 341, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          for (;;) {
            if (likely(!__pyx_t_23)) {
              if (likely(PyList_CheckExact(__pyx_t_20))) {
                if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_20)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_17 = PyList_GET_ITEM(__pyx_t_20, __pyx_t_22); __Pyx_INCREF(__pyx_t_17); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 341, __pyx_L1_error)
                #else
                __pyx_t_17 = PySequence_ITEM(__pyx_t_20, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
              } else {
                if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_20)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_17 = PyTuple_GET_ITEM(__pyx_t_20, __pyx_t_22); __Pyx_INCREF(__pyx_t_17); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 341, __pyx_L1_error)
                #else
                __pyx_t_17 = PySequence_ITEM(__pyx_t_20, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 341, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                #endif
              }
            } else {
              __pyx_t_17 = __pyx_t_23(__pyx_t_20);
              if (unlikely(!__pyx_t_17)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 341, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_17);
            }
            if ((likely(PyTuple_CheckExact(__pyx_t_17))) || (PyList_CheckExact(__pyx_t_17))) {
              PyObject* sequence = __pyx_t_17;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 2)) {
                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 341, __pyx_L1_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
              } else {
                __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
              }
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_9);
              #else
              __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_5 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_18 = Py_TYPE(__pyx_t_5)->tp_iternext;
              index = 0; __pyx_t_13 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_13)) goto __pyx_L24_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_13);
              index = 1; __pyx_t_9 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_9)) goto __pyx_L24_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_9);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_5), 2) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
              __pyx_t_18 = NULL;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L25_unpacking_done;
              __pyx_L24_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __pyx_t_18 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 341, __pyx_L1_error)
              __pyx_L25_unpacking_done:;
            }
            __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_13); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_v_i = __pyx_t_8;
            if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
              PyObject* sequence = __pyx_t_9;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 3)) {
                if (size > 3) __Pyx_RaiseTooManyValuesError(3);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 341, __pyx_L1_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
                __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
              } else {
                __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
                __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
              }
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              #else
              __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_12 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 341, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_18 = Py_TYPE(__pyx_t_12)->tp_iternext;
              index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_5)) goto __pyx_L26_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_5);
              index = 1; __pyx_t_10 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_10)) goto __pyx_L26_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_10);
              index = 2; __pyx_t_11 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_11)) goto __pyx_L26_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_11);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_12), 3) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
              __pyx_t_18 = NULL;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              goto __pyx_L27_unpacking_done;
              __pyx_L26_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              __pyx_t_18 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 341, __pyx_L1_error)
              __pyx_L27_unpacking_done:;
            }
            __Pyx_XDECREF_SET(__pyx_v_orig_x, __pyx_t_5);
            __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_orig_y, __pyx_t_10);
            __pyx_t_10 = 0;
            __Pyx_XDECREF_SET(__pyx_v_orig_z, __pyx_t_11);
            __pyx_t_11 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":342
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 *                         shift.append((sec.x3d(i) - orig_x,             # <<<<<<<<<<<<<<
 *                                       sec.y3d(i) - orig_y,
 *                                       sec.z3d(i) - orig_z))
 */
            __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_x3d); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_11 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
              __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
              if (likely(__pyx_t_11)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                __Pyx_INCREF(__pyx_t_11);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_9, function);
              }
            }
            __pyx_t_17 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_11, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_13);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_9 = PyNumber_Subtract(__pyx_t_17, __pyx_v_orig_x); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":343
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 *                         shift.append((sec.x3d(i) - orig_x,
 *                                       sec.y3d(i) - orig_y,             # <<<<<<<<<<<<<<
 *                                       sec.z3d(i) - orig_z))
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:
 */
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_y3d); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 343, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 343, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_10 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_13);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_13, function);
              }
            }
            __pyx_t_17 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_11);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 343, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = PyNumber_Subtract(__pyx_t_17, __pyx_v_orig_y); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 343, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":344
 *                         shift.append((sec.x3d(i) - orig_x,
 *                                       sec.y3d(i) - orig_y,
 *                                       sec.z3d(i) - orig_z))             # <<<<<<<<<<<<<<
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:
 *                         raise RxDException("soma rotation unsupported for voxelized somas")
 */
            __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_z3d); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_5 = NULL;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
              __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
              if (likely(__pyx_t_5)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                __Pyx_INCREF(__pyx_t_5);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_11, function);
              }
            }
            __pyx_t_17 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_5, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_10);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_11 = PyNumber_Subtract(__pyx_t_17, __pyx_v_orig_z); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 344, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":342
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 *                         shift.append((sec.x3d(i) - orig_x,             # <<<<<<<<<<<<<<
 *                                       sec.y3d(i) - orig_y,
 *                                       sec.z3d(i) - orig_z))
 */
            __pyx_t_17 = PyTuple_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_11);
            __pyx_t_9 = 0;
            __pyx_t_13 = 0;
            __pyx_t_11 = 0;
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_shift, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 342, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":341
 *                 if not is_stack:
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):             # <<<<<<<<<<<<<<
 *                         shift.append((sec.x3d(i) - orig_x,
 *                                       sec.y3d(i) - orig_y,
 */
          }
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":345
 *                                       sec.y3d(i) - orig_y,
 *                                       sec.z3d(i) - orig_z))
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:             # <<<<<<<<<<<<<<
 *                         raise RxDException("soma rotation unsupported for voxelized somas")
 *                     sx, sy, sz = shift[0]
 */
          __pyx_t_20 = PyList_New(0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_17 = PySequence_Tuple(__pyx_v_shift); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_17, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
            __pyx_t_17 = __pyx_t_11; __Pyx_INCREF(__pyx_t_17); __pyx_t_22 = 0;
            __pyx_t_23 = NULL;
          } else {
            __pyx_t_22 = -1; __pyx_t_17 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 345, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_23 = Py_TYPE(__pyx_t_17)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 345, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          for (;;) {
            if (likely(!__pyx_t_23)) {
              if (likely(PyList_CheckExact(__pyx_t_17))) {
                if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_17)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_22); __Pyx_INCREF(__pyx_t_11); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_17, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 345, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              } else {
                if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_17)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_17, __pyx_t_22); __Pyx_INCREF(__pyx_t_11); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
                #else
                __pyx_t_11 = PySequence_ITEM(__pyx_t_17, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 345, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                #endif
              }
            } else {
              __pyx_t_11 = __pyx_t_23(__pyx_t_17);
              if (unlikely(!__pyx_t_11)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 345, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_11);
            }
            if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
              PyObject* sequence = __pyx_t_11;
              Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
              if (unlikely(size != 2)) {
                if (size > 2) __Pyx_RaiseTooManyValuesError(2);
                else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
                __PYX_ERR(0, 345, __pyx_L1_error)
              }
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              if (likely(PyTuple_CheckExact(sequence))) {
                __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 
                __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
              } else {
                __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 
                __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
              }
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_9);
              #else
              __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 345, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            } else {
              Py_ssize_t index = -1;
              __pyx_t_10 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 345, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_18 = Py_TYPE(__pyx_t_10)->tp_iternext;
              index = 0; __pyx_t_13 = __pyx_t_18(__pyx_t_10); if (unlikely(!__pyx_t_13)) goto __pyx_L31_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_13);
              index = 1; __pyx_t_9 = __pyx_t_18(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L31_unpacking_failed;
              __Pyx_GOTREF(__pyx_t_9);
              if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_10), 2) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
              __pyx_t_18 = NULL;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              goto __pyx_L32_unpacking_done;
              __pyx_L31_unpacking_failed:;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __pyx_t_18 = NULL;
              if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
              __PYX_ERR(0, 345, __pyx_L1_error)
              __pyx_L32_unpacking_done:;
            }
            __Pyx_XDECREF_SET(__pyx_v_s0, __pyx_t_13);
            __pyx_t_13 = 0;
            __Pyx_XDECREF_SET(__pyx_v_s1, __pyx_t_9);
            __pyx_t_9 = 0;
            __pyx_t_11 = PyNumber_Subtract(__pyx_v_s0, __pyx_v_s1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 345, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_11); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_20, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 345, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = __Pyx_PyObject_CallOneArg(__pyx_builtin_sum, __pyx_t_20); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = PyFloat_FromDouble((__pyx_v_dx / 10.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_9 = PyObject_RichCompare(__pyx_t_17, __pyx_t_20, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 345, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(__pyx_t_2)) {

            /* "neuron/rxd/geometry3d/ctng.pyx":346
 *                                       sec.z3d(i) - orig_z))
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:
 *                         raise RxDException("soma rotation unsupported for voxelized somas")             # <<<<<<<<<<<<<<
 *                     sx, sy, sz = shift[0]
 *                     x = (x + sx).to_python()
 */
            __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_20);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_20, function);
              }
            }
            __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_17, __pyx_kp_s_soma_rotation_unsupported_for_vo) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_kp_s_soma_rotation_unsupported_for_vo);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 346, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_Raise(__pyx_t_9, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __PYX_ERR(0, 346, __pyx_L1_error)

            /* "neuron/rxd/geometry3d/ctng.pyx":345
 *                                       sec.y3d(i) - orig_y,
 *                                       sec.z3d(i) - orig_z))
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:             # <<<<<<<<<<<<<<
 *                         raise RxDException("soma rotation unsupported for voxelized somas")
 *                     sx, sy, sz = shift[0]
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":347
 *                     if sum([abs(s0 - s1) for s0,s1 in zip(*shift)]) > dx/10.0:
 *                         raise RxDException("soma rotation unsupported for voxelized somas")
 *                     sx, sy, sz = shift[0]             # <<<<<<<<<<<<<<
 *                     x = (x + sx).to_python()
 *                     y = (y + sy).to_python()
 */
          __pyx_t_9 = PyList_GET_ITEM(__pyx_v_shift, 0);
          __Pyx_INCREF(__pyx_t_9);
          if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
            PyObject* sequence = __pyx_t_9;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 3)) {
              if (size > 3) __Pyx_RaiseTooManyValuesError(3);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 347, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_20 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
              __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
            } else {
              __pyx_t_20 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
              __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
            }
            __Pyx_INCREF(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_11);
            #else
            __pyx_t_20 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_13 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 347, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_18 = Py_TYPE(__pyx_t_13)->tp_iternext;
            index = 0; __pyx_t_20 = __pyx_t_18(__pyx_t_13); if (unlikely(!__pyx_t_20)) goto __pyx_L33_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_20);
            index = 1; __pyx_t_17 = __pyx_t_18(__pyx_t_13); if (unlikely(!__pyx_t_17)) goto __pyx_L33_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_17);
            index = 2; __pyx_t_11 = __pyx_t_18(__pyx_t_13); if (unlikely(!__pyx_t_11)) goto __pyx_L33_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_11);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_13), 3) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
            __pyx_t_18 = NULL;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            goto __pyx_L34_unpacking_done;
            __pyx_L33_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_18 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 347, __pyx_L1_error)
            __pyx_L34_unpacking_done:;
          }
          __Pyx_XDECREF_SET(__pyx_v_sx, __pyx_t_20);
          __pyx_t_20 = 0;
          __Pyx_XDECREF_SET(__pyx_v_sy, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_sz, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":348
 *                         raise RxDException("soma rotation unsupported for voxelized somas")
 *                     sx, sy, sz = shift[0]
 *                     x = (x + sx).to_python()             # <<<<<<<<<<<<<<
 *                     y = (y + sy).to_python()
 *                     z = (z + sz).to_python()
 */
          __pyx_t_11 = PyNumber_Add(__pyx_v_x, __pyx_v_sx); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_to_python); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 348, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":349
 *                     sx, sy, sz = shift[0]
 *                     x = (x + sx).to_python()
 *                     y = (y + sy).to_python()             # <<<<<<<<<<<<<<
 *                     z = (z + sz).to_python()
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0 + sx, y0 + sy, z0 + sz, n_soma_step)
 */
          __pyx_t_17 = PyNumber_Add(__pyx_v_y, __pyx_v_sy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_to_python); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
            }
          }
          __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 349, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF_SET(__pyx_v_y, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":350
 *                     x = (x + sx).to_python()
 *                     y = (y + sy).to_python()
 *                     z = (z + sz).to_python()             # <<<<<<<<<<<<<<
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0 + sx, y0 + sy, z0 + sz, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0 + sz)
 */
          __pyx_t_11 = PyNumber_Add(__pyx_v_z, __pyx_v_sz); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 350, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_to_python); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 350, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_17);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 350, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF_SET(__pyx_v_z, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":351
 *                     y = (y + sy).to_python()
 *                     z = (z + sz).to_python()
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0 + sx, y0 + sy, z0 + sz, n_soma_step)             # <<<<<<<<<<<<<<
 *                     soma_secs[sec] = (f_pts, z0 + sz)
 *                     soma_segment_dict.update(new_objects)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_soma_objects); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_20 = PyNumber_Add(__pyx_t_11, __pyx_v_sx); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = PyNumber_Add(__pyx_t_11, __pyx_v_sy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_v_sz); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyInt_From_int(__pyx_v_n_soma_step); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_5 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[9] = {__pyx_t_5, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_sec, __pyx_t_20, __pyx_t_13, __pyx_t_10, __pyx_t_11};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[9] = {__pyx_t_5, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_sec, __pyx_t_20, __pyx_t_13, __pyx_t_10, __pyx_t_11};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_12 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            if (__pyx_t_5) {
              __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
            }
            __Pyx_INCREF(__pyx_v_x);
            __Pyx_GIVEREF(__pyx_v_x);
            PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_8, __pyx_v_x);
            __Pyx_INCREF(__pyx_v_y);
            __Pyx_GIVEREF(__pyx_v_y);
            PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_8, __pyx_v_y);
            __Pyx_INCREF(__pyx_v_z);
            __Pyx_GIVEREF(__pyx_v_z);
            PyTuple_SET_ITEM(__pyx_t_12, 2+__pyx_t_8, __pyx_v_z);
            __Pyx_INCREF(__pyx_v_sec);
            __Pyx_GIVEREF(__pyx_v_sec);
            PyTuple_SET_ITEM(__pyx_t_12, 3+__pyx_t_8, __pyx_v_sec);
            __Pyx_GIVEREF(__pyx_t_20);
            PyTuple_SET_ITEM(__pyx_t_12, 4+__pyx_t_8, __pyx_t_20);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_12, 5+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_12, 6+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_12, 7+__pyx_t_8, __pyx_t_11);
            __pyx_t_20 = 0;
            __pyx_t_13 = 0;
            __pyx_t_10 = 0;
            __pyx_t_11 = 0;
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_12, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
            PyObject* sequence = __pyx_t_9;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 351, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            if (likely(PyTuple_CheckExact(sequence))) {
              __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
              __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
            } else {
              __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
              __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
            }
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(__pyx_t_12);
            #else
            __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            #endif
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          } else {
            Py_ssize_t index = -1;
            __pyx_t_11 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 351, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __pyx_t_18 = Py_TYPE(__pyx_t_11)->tp_iternext;
            index = 0; __pyx_t_17 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_17)) goto __pyx_L35_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_17);
            index = 1; __pyx_t_12 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_12)) goto __pyx_L35_unpacking_failed;
            __Pyx_GOTREF(__pyx_t_12);
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_11), 2) < 0) __PYX_ERR(0, 351, __pyx_L1_error)
            __pyx_t_18 = NULL;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            goto __pyx_L36_unpacking_done;
            __pyx_L35_unpacking_failed:;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __pyx_t_18 = NULL;
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
            __PYX_ERR(0, 351, __pyx_L1_error)
            __pyx_L36_unpacking_done:;
          }
          if (!(likely(PyList_CheckExact(__pyx_t_12))||((__pyx_t_12) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_12)->tp_name), 0))) __PYX_ERR(0, 351, __pyx_L1_error)
          __Pyx_XDECREF_SET(__pyx_v_new_objects, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_DECREF_SET(__pyx_v_f_pts, ((PyObject*)__pyx_t_12));
          __pyx_t_12 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":352
 *                     z = (z + sz).to_python()
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0 + sx, y0 + sy, z0 + sz, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0 + sz)             # <<<<<<<<<<<<<<
 *                     soma_segment_dict.update(new_objects)
 *                 else:
 */
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_12 = PyNumber_Add(__pyx_t_9, __pyx_v_sz); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_v_f_pts);
          __Pyx_GIVEREF(__pyx_v_f_pts);
          PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_f_pts);
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_12);
          __pyx_t_12 = 0;
          if (unlikely(PyDict_SetItem(__pyx_v_soma_secs, __pyx_v_sec, __pyx_t_9) < 0)) __PYX_ERR(0, 352, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":353
 *                     new_objects, f_pts = soma_objects(x, y, z, sec, x0 + sx, y0 + sy, z0 + sz, n_soma_step)
 *                     soma_secs[sec] = (f_pts, z0 + sz)
 *                     soma_segment_dict.update(new_objects)             # <<<<<<<<<<<<<<
 *                 else:
 *                     import warnings
 */
          __pyx_t_9 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_soma_segment_dict, __pyx_v_new_objects); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 353, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":339
 *             if sec.hoc_internal_name() in neuron._sec_db:
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]
 *                 if not is_stack:             # <<<<<<<<<<<<<<
 *                     shift = []
 *                     for i, (orig_x, orig_y, orig_z) in zip([0, sec.n3d()-1], pts3d):
 */
          goto __pyx_L21;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":355
 *                     soma_segment_dict.update(new_objects)
 *                 else:
 *                     import warnings             # <<<<<<<<<<<<<<
 *                     warnings.warn('soma stack ignored; using centroid instead')
 *                     branches.append(sec)
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 355, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_XDECREF_SET(__pyx_v_warnings, __pyx_t_9);
          __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":356
 *                 else:
 *                     import warnings
 *                     warnings.warn('soma stack ignored; using centroid instead')             # <<<<<<<<<<<<<<
 *                     branches.append(sec)
 *                     parent_sec_name.append(None)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_warnings, __pyx_n_s_warn); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 356, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_12, __pyx_t_17, __pyx_kp_s_soma_stack_ignored_using_centroi) : __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_kp_s_soma_stack_ignored_using_centroi);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 356, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":357
 *                     import warnings
 *                     warnings.warn('soma stack ignored; using centroid instead')
 *                     branches.append(sec)             # <<<<<<<<<<<<<<
 *                     parent_sec_name.append(None)
 *             else:
 */
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_branches, __pyx_v_sec); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 357, __pyx_L1_error)

          /* "neuron/rxd/geometry3d/ctng.pyx":358
 *                     warnings.warn('soma stack ignored; using centroid instead')
 *                     branches.append(sec)
 *                     parent_sec_name.append(None)             # <<<<<<<<<<<<<<
 *             else:
 *                 branches.append(sec)
 */
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_parent_sec_name, Py_None); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 358, __pyx_L1_error)
        }
        __pyx_L21:;

        /* "neuron/rxd/geometry3d/ctng.pyx":337
 *         for sec in source:
 *             # TODO: make this more general (support for 3D contour outline)
 *             if sec.hoc_internal_name() in neuron._sec_db:             # <<<<<<<<<<<<<<
 *                 is_stack, x, y, z, x0, y0, z0, pts3d = neuron._sec_db[sec.hoc_internal_name()]
 *                 if not is_stack:
 */
        goto __pyx_L18;
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":360
 *                     parent_sec_name.append(None)
 *             else:
 *                 branches.append(sec)             # <<<<<<<<<<<<<<
 *                 if sec.trueparentseg():
 *                     parent_sec_name.append(sec.trueparentseg().sec)
 */
      /*else*/ {
        __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_branches, __pyx_v_sec); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 360, __pyx_L1_error)

        /* "neuron/rxd/geometry3d/ctng.pyx":361
 *             else:
 *                 branches.append(sec)
 *                 if sec.trueparentseg():             # <<<<<<<<<<<<<<
 *                     parent_sec_name.append(sec.trueparentseg().sec)
 *                 else:
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_trueparentseg); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 361, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":362
 *                 branches.append(sec)
 *                 if sec.trueparentseg():
 *                     parent_sec_name.append(sec.trueparentseg().sec)             # <<<<<<<<<<<<<<
 *                 else:
 *                     parent_sec_name.append(None)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_trueparentseg); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_17 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          __pyx_t_9 = (__pyx_t_17) ? __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_17) : __Pyx_PyObject_CallNoArg(__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sec); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_parent_sec_name, __pyx_t_12); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 362, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":361
 *             else:
 *                 branches.append(sec)
 *                 if sec.trueparentseg():             # <<<<<<<<<<<<<<
 *                     parent_sec_name.append(sec.trueparentseg().sec)
 *                 else:
 */
          goto __pyx_L37;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":364
 *                     parent_sec_name.append(sec.trueparentseg().sec)
 *                 else:
 *                     parent_sec_name.append(None)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        /*else*/ {
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_parent_sec_name, Py_None); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 364, __pyx_L1_error)
        }
        __pyx_L37:;
      }
      __pyx_L18:;

      /* "neuron/rxd/geometry3d/ctng.pyx":335
 *         h.define_shape()
 *         branches = []
 *         for sec in source:             # <<<<<<<<<<<<<<
 *             # TODO: make this more general (support for 3D contour outline)
 *             if sec.hoc_internal_name() in neuron._sec_db:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "neuron/rxd/geometry3d/ctng.pyx":372
 *     #
 *     #####################################################################
 *     cdef dict diam_corrections = {None: None}             # <<<<<<<<<<<<<<
 *     cdef dict clip_copying = {}
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, Py_None, Py_None) < 0) __PYX_ERR(0, 372, __pyx_L1_error)
  __pyx_v_diam_corrections = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":373
 *     #####################################################################
 *     cdef dict diam_corrections = {None: None}
 *     cdef dict clip_copying = {}             # <<<<<<<<<<<<<<
 * 
 *     while diam_corrections:
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_clip_copying = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":375
 *     cdef dict clip_copying = {}
 * 
 *     while diam_corrections:             # <<<<<<<<<<<<<<
 *         all_cones = []
 *         pts_cones_db = {}
 */
  while (1) {
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_diam_corrections); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 375, __pyx_L1_error)
    if (!__pyx_t_2) break;

    /* "neuron/rxd/geometry3d/ctng.pyx":376
 * 
 *     while diam_corrections:
 *         all_cones = []             # <<<<<<<<<<<<<<
 *         pts_cones_db = {}
 *         diam_db = {}
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_all_cones, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":377
 *     while diam_corrections:
 *         all_cones = []
 *         pts_cones_db = {}             # <<<<<<<<<<<<<<
 *         diam_db = {}
 * 
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_pts_cones_db, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":378
 *         all_cones = []
 *         pts_cones_db = {}
 *         diam_db = {}             # <<<<<<<<<<<<<<
 * 
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_diam_db, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":380
 *         diam_db = {}
 * 
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):             # <<<<<<<<<<<<<<
 *             if source_is_import3d:
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_enumerate, __pyx_v_branches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_parent_sec_name);
    __Pyx_GIVEREF(__pyx_v_parent_sec_name);
    PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_parent_sec_name);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_12 = __pyx_t_1; __Pyx_INCREF(__pyx_t_12); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_7 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 380, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 380, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_12, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_7(__pyx_t_12);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 380, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 380, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_17 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_17);
        #else
        __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_11 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_11)->tp_iternext;
        index = 0; __pyx_t_9 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_9)) goto __pyx_L42_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_9);
        index = 1; __pyx_t_17 = __pyx_t_18(__pyx_t_11); if (unlikely(!__pyx_t_17)) goto __pyx_L42_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_17);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_11), 2) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L43_unpacking_done;
        __pyx_L42_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 380, __pyx_L1_error)
        __pyx_L43_unpacking_done:;
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
        PyObject* sequence = __pyx_t_9;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 380, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_10);
        #else
        __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        #endif
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_13 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_13)->tp_iternext;
        index = 0; __pyx_t_11 = __pyx_t_18(__pyx_t_13); if (unlikely(!__pyx_t_11)) goto __pyx_L44_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        index = 1; __pyx_t_10 = __pyx_t_18(__pyx_t_13); if (unlikely(!__pyx_t_10)) goto __pyx_L44_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_10);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_13), 2) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L45_unpacking_done;
        __pyx_L44_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 380, __pyx_L1_error)
        __pyx_L45_unpacking_done:;
      }
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_11); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_k = __pyx_t_8;
      __Pyx_XDECREF_SET(__pyx_v_branch, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_XDECREF_SET(__pyx_v_psec, __pyx_t_17);
      __pyx_t_17 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":381
 * 
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):
 *             if source_is_import3d:             # <<<<<<<<<<<<<<
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]
 *                 d = branch.d.to_python()
 */
      __pyx_t_2 = (__pyx_v_source_is_import3d != 0);
      if (__pyx_t_2) {

        /* "neuron/rxd/geometry3d/ctng.pyx":382
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):
 *             if source_is_import3d:
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]             # <<<<<<<<<<<<<<
 *                 d = branch.d.to_python()
 *             else:
 */
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
          __pyx_v_i = __pyx_t_8;
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_raw); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_getrow); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_20);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_20, function);
            }
          }
          __pyx_t_11 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_20, __pyx_t_5, __pyx_t_13) : __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_13);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_to_python); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_20);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_20, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_11) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_17 = (__pyx_t_20) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_20, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9);
          __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        }
        if (1) {
          PyObject* sequence = __pyx_t_1;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 3)) {
            if (size > 3) __Pyx_RaiseTooManyValuesError(3);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 382, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          #else
          __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_10 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 382, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":383
 *             if source_is_import3d:
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]
 *                 d = branch.d.to_python()             # <<<<<<<<<<<<<<
 *             else:
 *                 #################### modified from geometry.py ##################
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_d); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_to_python); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":381
 * 
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):
 *             if source_is_import3d:             # <<<<<<<<<<<<<<
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]
 *                 d = branch.d.to_python()
 */
        goto __pyx_L46;
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":387
 *                 #################### modified from geometry.py ##################
 *                 # make sure cones split across electrical segments
 *                 if relevant_pts:             # <<<<<<<<<<<<<<
 *                     rng = relevant_pts[k]
 *                 else:
 */
      /*else*/ {
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_relevant_pts); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 387, __pyx_L1_error)
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":388
 *                 # make sure cones split across electrical segments
 *                 if relevant_pts:
 *                     rng = relevant_pts[k]             # <<<<<<<<<<<<<<
 *                 else:
 *                     rng = range(branch.n3d())
 */
          __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_relevant_pts, __pyx_v_k, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_v_rng, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":387
 *                 #################### modified from geometry.py ##################
 *                 # make sure cones split across electrical segments
 *                 if relevant_pts:             # <<<<<<<<<<<<<<
 *                     rng = relevant_pts[k]
 *                 else:
 */
          goto __pyx_L49;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":390
 *                     rng = relevant_pts[k]
 *                 else:
 *                     rng = range(branch.n3d())             # <<<<<<<<<<<<<<
 * 
 *                 arc3d = ([branch.arc3d(i) for i in rng])
 */
        /*else*/ {
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_n3d); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 390, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_9 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_9)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_9);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
            }
          }
          __pyx_t_1 = (__pyx_t_9) ? __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_9) : __Pyx_PyObject_CallNoArg(__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_range, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 390, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF_SET(__pyx_v_rng, __pyx_t_10);
          __pyx_t_10 = 0;
        }
        __pyx_L49:;

        /* "neuron/rxd/geometry3d/ctng.pyx":392
 *                     rng = range(branch.n3d())
 * 
 *                 arc3d = ([branch.arc3d(i) for i in rng])             # <<<<<<<<<<<<<<
 *                 diam3d = ([branch.diam3d(i) for i in rng])
 *                 x3d = ([branch.x3d(i) for i in rng])
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 392, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_v_rng)) || PyTuple_CheckExact(__pyx_v_rng)) {
          __pyx_t_1 = __pyx_v_rng; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 392, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 392, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 392, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 392, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 392, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 392, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_i = __pyx_t_8;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_arc3d); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 392, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_arc3d, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":393
 * 
 *                 arc3d = ([branch.arc3d(i) for i in rng])
 *                 diam3d = ([branch.diam3d(i) for i in rng])             # <<<<<<<<<<<<<<
 *                 x3d = ([branch.x3d(i) for i in rng])
 *                 y3d = ([branch.y3d(i) for i in rng])
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_v_rng)) || PyTuple_CheckExact(__pyx_v_rng)) {
          __pyx_t_1 = __pyx_v_rng; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 393, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 393, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 393, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 393, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 393, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_i = __pyx_t_8;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_diam3d); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 393, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_diam3d, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":394
 *                 arc3d = ([branch.arc3d(i) for i in rng])
 *                 diam3d = ([branch.diam3d(i) for i in rng])
 *                 x3d = ([branch.x3d(i) for i in rng])             # <<<<<<<<<<<<<<
 *                 y3d = ([branch.y3d(i) for i in rng])
 *                 z3d = ([branch.z3d(i) for i in rng])
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 394, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_v_rng)) || PyTuple_CheckExact(__pyx_v_rng)) {
          __pyx_t_1 = __pyx_v_rng; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 394, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 394, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 394, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 394, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 394, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 394, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_i = __pyx_t_8;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_x3d); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 394, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x3d, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":395
 *                 diam3d = ([branch.diam3d(i) for i in rng])
 *                 x3d = ([branch.x3d(i) for i in rng])
 *                 y3d = ([branch.y3d(i) for i in rng])             # <<<<<<<<<<<<<<
 *                 z3d = ([branch.z3d(i) for i in rng])
 * 
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_v_rng)) || PyTuple_CheckExact(__pyx_v_rng)) {
          __pyx_t_1 = __pyx_v_rng; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 395, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 395, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 395, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 395, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 395, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 395, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_i = __pyx_t_8;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_y3d); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 395, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y3d, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":396
 *                 x3d = ([branch.x3d(i) for i in rng])
 *                 y3d = ([branch.y3d(i) for i in rng])
 *                 z3d = ([branch.z3d(i) for i in rng])             # <<<<<<<<<<<<<<
 * 
 *                 x = numpy.array([])
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 396, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        if (likely(PyList_CheckExact(__pyx_v_rng)) || PyTuple_CheckExact(__pyx_v_rng)) {
          __pyx_t_1 = __pyx_v_rng; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_rng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 396, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_9); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 396, __pyx_L1_error)
              #else
              __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 396, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              #endif
            }
          } else {
            __pyx_t_9 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_9)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 396, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_9);
          }
          __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_v_i = __pyx_t_8;
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_z3d); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_20);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 396, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z3d, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":398
 *                 z3d = ([branch.z3d(i) for i in rng])
 * 
 *                 x = numpy.array([])             # <<<<<<<<<<<<<<
 *                 y = numpy.array([])
 *                 z = numpy.array([])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_17, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 398, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":399
 * 
 *                 x = numpy.array([])
 *                 y = numpy.array([])             # <<<<<<<<<<<<<<
 *                 z = numpy.array([])
 *                 d = numpy.array([])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_17, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_y, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":400
 *                 x = numpy.array([])
 *                 y = numpy.array([])
 *                 z = numpy.array([])             # <<<<<<<<<<<<<<
 *                 d = numpy.array([])
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_17, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_1);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 400, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_z, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":401
 *                 y = numpy.array([])
 *                 z = numpy.array([])
 *                 d = numpy.array([])             # <<<<<<<<<<<<<<
 * 
 *                 dx = branch.L / branch.nseg
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_17)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_17);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_10 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_17, __pyx_t_9) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_9);
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":403
 *                 d = numpy.array([])
 * 
 *                 dx = branch.L / branch.nseg             # <<<<<<<<<<<<<<
 *                 for iseg, seg in enumerate(branch):
 *                     # get a list of all pts in the segment, including end points
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_L); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_nseg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_10, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_v_dx = __pyx_t_14;

        /* "neuron/rxd/geometry3d/ctng.pyx":404
 * 
 *                 dx = branch.L / branch.nseg
 *                 for iseg, seg in enumerate(branch):             # <<<<<<<<<<<<<<
 *                     # get a list of all pts in the segment, including end points
 *                     lo = iseg * dx
 */
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_9 = __pyx_int_0;
        if (likely(PyList_CheckExact(__pyx_v_branch)) || PyTuple_CheckExact(__pyx_v_branch)) {
          __pyx_t_1 = __pyx_v_branch; __Pyx_INCREF(__pyx_t_1); __pyx_t_22 = 0;
          __pyx_t_23 = NULL;
        } else {
          __pyx_t_22 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_branch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_23 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 404, __pyx_L1_error)
        }
        for (;;) {
          if (likely(!__pyx_t_23)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_10); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 404, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            } else {
              if (__pyx_t_22 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_22); __Pyx_INCREF(__pyx_t_10); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 404, __pyx_L1_error)
              #else
              __pyx_t_10 = PySequence_ITEM(__pyx_t_1, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 404, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              #endif
            }
          } else {
            __pyx_t_10 = __pyx_t_23(__pyx_t_1);
            if (unlikely(!__pyx_t_10)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 404, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_10);
          }
          __Pyx_XDECREF_SET(__pyx_v_seg, __pyx_t_10);
          __pyx_t_10 = 0;
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_XDECREF_SET(__pyx_v_iseg, __pyx_t_9);
          __pyx_t_10 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 404, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9);
          __pyx_t_9 = __pyx_t_10;
          __pyx_t_10 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":406
 *                 for iseg, seg in enumerate(branch):
 *                     # get a list of all pts in the segment, including end points
 *                     lo = iseg * dx             # <<<<<<<<<<<<<<
 *                     hi = (iseg + 1) * dx
 * 
 */
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_dx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = PyNumber_Multiply(__pyx_v_iseg, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 406, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_lo, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":407
 *                     # get a list of all pts in the segment, including end points
 *                     lo = iseg * dx
 *                     hi = (iseg + 1) * dx             # <<<<<<<<<<<<<<
 * 
 *                     pts = [lo] + [arc for arc in arc3d if lo < arc < hi] + [hi]
 */
          __pyx_t_17 = __Pyx_PyInt_AddObjC(__pyx_v_iseg, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_dx); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_20 = PyNumber_Multiply(__pyx_t_17, __pyx_t_10); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 407, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_hi, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":409
 *                     hi = (iseg + 1) * dx
 * 
 *                     pts = [lo] + [arc for arc in arc3d if lo < arc < hi] + [hi]             # <<<<<<<<<<<<<<
 * 
 *                     diams = numpy.interp(pts, arc3d, diam3d)
 */
          __pyx_t_20 = PyList_New(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_INCREF(__pyx_v_lo);
          __Pyx_GIVEREF(__pyx_v_lo);
          PyList_SET_ITEM(__pyx_t_20, 0, __pyx_v_lo);
          __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = __pyx_v_arc3d; __Pyx_INCREF(__pyx_t_17); __pyx_t_24 = 0;
          for (;;) {
            if (__pyx_t_24 >= PyList_GET_SIZE(__pyx_t_17)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_11 = PyList_GET_ITEM(__pyx_t_17, __pyx_t_24); __Pyx_INCREF(__pyx_t_11); __pyx_t_24++; if (unlikely(0 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
            #else
            __pyx_t_11 = PySequence_ITEM(__pyx_t_17, __pyx_t_24); __pyx_t_24++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 409, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            #endif
            __Pyx_XDECREF_SET(__pyx_v_arc, __pyx_t_11);
            __pyx_t_11 = 0;
            __pyx_t_11 = PyObject_RichCompare(__pyx_v_lo, __pyx_v_arc, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 409, __pyx_L1_error)
            if (__Pyx_PyObject_IsTrue(__pyx_t_11)) {
              __Pyx_DECREF(__pyx_t_11);
              __pyx_t_11 = PyObject_RichCompare(__pyx_v_arc, __pyx_v_hi, Py_LT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 409, __pyx_L1_error)
            }
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (__pyx_t_2) {
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_v_arc))) __PYX_ERR(0, 409, __pyx_L1_error)
            }
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyNumber_Add(__pyx_t_20, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyList_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_INCREF(__pyx_v_hi);
          __Pyx_GIVEREF(__pyx_v_hi);
          PyList_SET_ITEM(__pyx_t_10, 0, __pyx_v_hi);
          __pyx_t_20 = PyNumber_Add(__pyx_t_17, __pyx_t_10); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_pts, ((PyObject*)__pyx_t_20));
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":411
 *                     pts = [lo] + [arc for arc in arc3d if lo < arc < hi] + [hi]
 * 
 *                     diams = numpy.interp(pts, arc3d, diam3d)             # <<<<<<<<<<<<<<
 *                     xcoords = numpy.interp(pts, arc3d, x3d)
 *                     ycoords = numpy.interp(pts, arc3d, y3d)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_interp); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 411, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_diam3d};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_diam3d};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          {
            __pyx_t_11 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (__pyx_t_10) {
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
            }
            __Pyx_INCREF(__pyx_v_pts);
            __Pyx_GIVEREF(__pyx_v_pts);
            PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_8, __pyx_v_pts);
            __Pyx_INCREF(__pyx_v_arc3d);
            __Pyx_GIVEREF(__pyx_v_arc3d);
            PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_8, __pyx_v_arc3d);
            __Pyx_INCREF(__pyx_v_diam3d);
            __Pyx_GIVEREF(__pyx_v_diam3d);
            PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_8, __pyx_v_diam3d);
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_11, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 411, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_diams, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":412
 * 
 *                     diams = numpy.interp(pts, arc3d, diam3d)
 *                     xcoords = numpy.interp(pts, arc3d, x3d)             # <<<<<<<<<<<<<<
 *                     ycoords = numpy.interp(pts, arc3d, y3d)
 *                     zcoords = numpy.interp(pts, arc3d, z3d)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_numpy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_interp); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_17, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_x3d};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 412, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[4] = {__pyx_t_17, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_x3d};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 412, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_INCREF(__pyx_v_pts);
            __Pyx_GIVEREF(__pyx_v_pts);
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_v_pts);
            __Pyx_INCREF(__pyx_v_arc3d);
            __Pyx_GIVEREF(__pyx_v_arc3d);
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_v_arc3d);
            __Pyx_INCREF(__pyx_v_x3d);
            __Pyx_GIVEREF(__pyx_v_x3d);
            PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_8, __pyx_v_x3d);
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_10, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 412, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XDECREF_SET(__pyx_v_xcoords, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":413
 *                     diams = numpy.interp(pts, arc3d, diam3d)
 *                     xcoords = numpy.interp(pts, arc3d, x3d)
 *                     ycoords = numpy.interp(pts, arc3d, y3d)             # <<<<<<<<<<<<<<
 *                     zcoords = numpy.interp(pts, arc3d, z3d)
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 413, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_interp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 413, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_y3d};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[4] = {__pyx_t_11, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_y3d};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_11); __pyx_t_11 = NULL;
            }
            __Pyx_INCREF(__pyx_v_pts);
            __Pyx_GIVEREF(__pyx_v_pts);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_v_pts);
            __Pyx_INCREF(__pyx_v_arc3d);
            __Pyx_GIVEREF(__pyx_v_arc3d);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_v_arc3d);
            __Pyx_INCREF(__pyx_v_y3d);
            __Pyx_GIVEREF(__pyx_v_y3d);
            PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_8, __pyx_v_y3d);
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 413, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_XDECREF_SET(__pyx_v_ycoords, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":414
 *                     xcoords = numpy.interp(pts, arc3d, x3d)
 *                     ycoords = numpy.interp(pts, arc3d, y3d)
 *                     zcoords = numpy.interp(pts, arc3d, z3d)             # <<<<<<<<<<<<<<
 * 
 *                     end = len(pts)-1
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_interp); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 414, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_z3d};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 414, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[4] = {__pyx_t_10, __pyx_v_pts, __pyx_v_arc3d, __pyx_v_z3d};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 3+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 414, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
          } else
          #endif
          {
            __pyx_t_11 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 414, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (__pyx_t_10) {
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
            }
            __Pyx_INCREF(__pyx_v_pts);
            __Pyx_GIVEREF(__pyx_v_pts);
            PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_8, __pyx_v_pts);
            __Pyx_INCREF(__pyx_v_arc3d);
            __Pyx_GIVEREF(__pyx_v_arc3d);
            PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_8, __pyx_v_arc3d);
            __Pyx_INCREF(__pyx_v_z3d);
            __Pyx_GIVEREF(__pyx_v_z3d);
            PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_8, __pyx_v_z3d);
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_11, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 414, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_zcoords, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":416
 *                     zcoords = numpy.interp(pts, arc3d, z3d)
 * 
 *                     end = len(pts)-1             # <<<<<<<<<<<<<<
 *                     if iseg == branch.nseg-1:
 *                         end = len(pts)
 */
          __pyx_t_24 = PyList_GET_SIZE(__pyx_v_pts); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 416, __pyx_L1_error)
          __pyx_v_end = (__pyx_t_24 - 1);

          /* "neuron/rxd/geometry3d/ctng.pyx":417
 * 
 *                     end = len(pts)-1
 *                     if iseg == branch.nseg-1:             # <<<<<<<<<<<<<<
 *                         end = len(pts)
 * 
 */
          __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_branch, __pyx_n_s_nseg); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 417, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_17 = __Pyx_PyInt_SubtractObjC(__pyx_t_20, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 417, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = PyObject_RichCompare(__pyx_v_iseg, __pyx_t_17, Py_EQ); __Pyx_XGOTREF(__pyx_t_20); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 417, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_20); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 417, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":418
 *                     end = len(pts)-1
 *                     if iseg == branch.nseg-1:
 *                         end = len(pts)             # <<<<<<<<<<<<<<
 * 
 *                     x = numpy.append(x, xcoords[0:end])
 */
            __pyx_t_24 = PyList_GET_SIZE(__pyx_v_pts); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 418, __pyx_L1_error)
            __pyx_v_end = __pyx_t_24;

            /* "neuron/rxd/geometry3d/ctng.pyx":417
 * 
 *                     end = len(pts)-1
 *                     if iseg == branch.nseg-1:             # <<<<<<<<<<<<<<
 *                         end = len(pts)
 * 
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":420
 *                         end = len(pts)
 * 
 *                     x = numpy.append(x, xcoords[0:end])             # <<<<<<<<<<<<<<
 *                     y = numpy.append(y, ycoords[0:end])
 *                     z = numpy.append(z, zcoords[0:end])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_numpy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 420, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_append); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 420, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = __Pyx_PyObject_GetSlice(__pyx_v_xcoords, 0, __pyx_v_end, NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 420, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_x, __pyx_t_17};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 420, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[3] = {__pyx_t_10, __pyx_v_x, __pyx_t_17};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 420, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          } else
          #endif
          {
            __pyx_t_13 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 420, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            if (__pyx_t_10) {
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10); __pyx_t_10 = NULL;
            }
            __Pyx_INCREF(__pyx_v_x);
            __Pyx_GIVEREF(__pyx_v_x);
            PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_8, __pyx_v_x);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_8, __pyx_t_17);
            __pyx_t_17 = 0;
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 420, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF_SET(__pyx_v_x, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":421
 * 
 *                     x = numpy.append(x, xcoords[0:end])
 *                     y = numpy.append(y, ycoords[0:end])             # <<<<<<<<<<<<<<
 *                     z = numpy.append(z, zcoords[0:end])
 *                     d = numpy.append(d, diams[0:end])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_append); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetSlice(__pyx_v_ycoords, 0, __pyx_v_end, NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 421, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_17 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_13)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_y, __pyx_t_11};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 421, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_13)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_y, __pyx_t_11};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_13, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 421, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_10 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 421, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_INCREF(__pyx_v_y);
            __Pyx_GIVEREF(__pyx_v_y);
            PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_v_y);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_t_11);
            __pyx_t_11 = 0;
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_10, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 421, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF_SET(__pyx_v_y, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":422
 *                     x = numpy.append(x, xcoords[0:end])
 *                     y = numpy.append(y, ycoords[0:end])
 *                     z = numpy.append(z, zcoords[0:end])             # <<<<<<<<<<<<<<
 *                     d = numpy.append(d, diams[0:end])
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_numpy); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 422, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_append); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 422, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetSlice(__pyx_v_zcoords, 0, __pyx_v_end, NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 422, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_11 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_z, __pyx_t_13};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 422, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_10)) {
            PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_z, __pyx_t_13};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_10, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 422, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 422, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_11) {
              __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_11); __pyx_t_11 = NULL;
            }
            __Pyx_INCREF(__pyx_v_z);
            __Pyx_GIVEREF(__pyx_v_z);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_v_z);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_t_13);
            __pyx_t_13 = 0;
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_17, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 422, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF_SET(__pyx_v_z, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":423
 *                     y = numpy.append(y, ycoords[0:end])
 *                     z = numpy.append(z, zcoords[0:end])
 *                     d = numpy.append(d, diams[0:end])             # <<<<<<<<<<<<<<
 * 
 *                     for i in range(len(pts)-1):
 */
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_numpy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 423, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_append); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 423, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_diams, 0, __pyx_v_end, NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 423, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_13 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_d, __pyx_t_10};
            __pyx_t_20 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 423, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_13, __pyx_v_d, __pyx_t_10};
            __pyx_t_20 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 423, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          {
            __pyx_t_11 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 423, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            if (__pyx_t_13) {
              __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_13); __pyx_t_13 = NULL;
            }
            __Pyx_INCREF(__pyx_v_d);
            __Pyx_GIVEREF(__pyx_v_d);
            PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_8, __pyx_v_d);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_8, __pyx_t_10);
            __pyx_t_10 = 0;
            __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_11, NULL); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 423, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF_SET(__pyx_v_d, __pyx_t_20);
          __pyx_t_20 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":425
 *                     d = numpy.append(d, diams[0:end])
 * 
 *                     for i in range(len(pts)-1):             # <<<<<<<<<<<<<<
 *                         #find the cone and assign it to that segment
 *                         conecoords = (xcoords[i],ycoords[i],zcoords[i],xcoords[i+1],ycoords[i+1],zcoords[i+1])
 */
          __pyx_t_24 = PyList_GET_SIZE(__pyx_v_pts); if (unlikely(__pyx_t_24 == ((Py_ssize_t)-1))) __PYX_ERR(0, 425, __pyx_L1_error)
          __pyx_t_25 = (__pyx_t_24 - 1);
          __pyx_t_24 = __pyx_t_25;
          for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_24; __pyx_t_8+=1) {
            __pyx_v_i = __pyx_t_8;

            /* "neuron/rxd/geometry3d/ctng.pyx":427
 *                     for i in range(len(pts)-1):
 *                         #find the cone and assign it to that segment
 *                         conecoords = (xcoords[i],ycoords[i],zcoords[i],xcoords[i+1],ycoords[i+1],zcoords[i+1])             # <<<<<<<<<<<<<<
 *                         cone_segment_dict[conecoords] = seg
 *                 ##########################################################
 */
            __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_xcoords, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_ycoords, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_zcoords, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_26 = (__pyx_v_i + 1);
            __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_xcoords, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_26 = (__pyx_v_i + 1);
            __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_ycoords, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_26 = (__pyx_v_i + 1);
            __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_zcoords, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_4 = PyTuple_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_20);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_20);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_5);
            PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_5);
            __pyx_t_20 = 0;
            __pyx_t_17 = 0;
            __pyx_t_11 = 0;
            __pyx_t_10 = 0;
            __pyx_t_13 = 0;
            __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_conecoords, ((PyObject*)__pyx_t_4));
            __pyx_t_4 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":428
 *                         #find the cone and assign it to that segment
 *                         conecoords = (xcoords[i],ycoords[i],zcoords[i],xcoords[i+1],ycoords[i+1],zcoords[i+1])
 *                         cone_segment_dict[conecoords] = seg             # <<<<<<<<<<<<<<
 *                 ##########################################################
 * 
 */
            if (unlikely(PyDict_SetItem(__pyx_v_cone_segment_dict, __pyx_v_conecoords, __pyx_v_seg) < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":404
 * 
 *                 dx = branch.L / branch.nseg
 *                 for iseg, seg in enumerate(branch):             # <<<<<<<<<<<<<<
 *                     # get a list of all pts in the segment, including end points
 *                     lo = iseg * dx
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __pyx_L46:;

      /* "neuron/rxd/geometry3d/ctng.pyx":436
 *             # CTNG:connectdends
 * 
 *             if psec in soma_secs:             # <<<<<<<<<<<<<<
 *                 f_pts, somaz = soma_secs[psec]
 *                 pt = (x[1], y[1], z[1])
 */
      __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_psec, __pyx_v_soma_secs, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "neuron/rxd/geometry3d/ctng.pyx":437
 * 
 *             if psec in soma_secs:
 *                 f_pts, somaz = soma_secs[psec]             # <<<<<<<<<<<<<<
 *                 pt = (x[1], y[1], z[1])
 *                 cp = closest_pt(pt, f_pts, somaz)
 */
        __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_soma_secs, __pyx_v_psec); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 437, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if ((likely(PyTuple_CheckExact(__pyx_t_9))) || (PyList_CheckExact(__pyx_t_9))) {
          PyObject* sequence = __pyx_t_9;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 437, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          #else
          __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_1 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L69_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_1);
          index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L69_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_5), 2) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L70_unpacking_done;
          __pyx_L69_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 437, __pyx_L1_error)
          __pyx_L70_unpacking_done:;
        }
        if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "list", Py_TYPE(__pyx_t_1)->tp_name), 0))) __PYX_ERR(0, 437, __pyx_L1_error)
        __Pyx_DECREF_SET(__pyx_v_f_pts, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_somaz, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":438
 *             if psec in soma_secs:
 *                 f_pts, somaz = soma_secs[psec]
 *                 pt = (x[1], y[1], z[1])             # <<<<<<<<<<<<<<
 *                 cp = closest_pt(pt, f_pts, somaz)
 *                 # NEURON includes the wire point at the center; we want to connect
 */
        __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_x, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_y, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_z, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1);
        __pyx_t_9 = 0;
        __pyx_t_4 = 0;
        __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_pt, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":439
 *                 f_pts, somaz = soma_secs[psec]
 *                 pt = (x[1], y[1], z[1])
 *                 cp = closest_pt(pt, f_pts, somaz)             # <<<<<<<<<<<<<<
 *                 # NEURON includes the wire point at the center; we want to connect
 *                 # to the closest place on the soma's axis instead with full diameter
 */
        __pyx_t_5 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_closest_pt(__pyx_v_pt, __pyx_v_f_pts, __pyx_v_somaz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_cp, ((PyObject*)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":443
 *                 # to the closest place on the soma's axis instead with full diameter
 *                 # x, y, z, d = [cp[0]] + [X for X in x[1 :]], [cp[1]] + [Y for Y in y[1:]], [somaz] + [Z for Z in z[1:]], [d[1]] + [D for D in d[1 :]]
 *                 x[0], y[0] = cp             # <<<<<<<<<<<<<<
 *                 z[0] = somaz
 *                 d[0] = d[1]
 */
        if (likely(__pyx_v_cp != Py_None)) {
          PyObject* sequence = __pyx_v_cp;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 443, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_1);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 443, __pyx_L1_error)
        }
        if (unlikely(__Pyx_SetItemInt(__pyx_v_x, 0, __pyx_t_5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(__Pyx_SetItemInt(__pyx_v_y, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":444
 *                 # x, y, z, d = [cp[0]] + [X for X in x[1 :]], [cp[1]] + [Y for Y in y[1:]], [somaz] + [Z for Z in z[1:]], [d[1]] + [D for D in d[1 :]]
 *                 x[0], y[0] = cp
 *                 z[0] = somaz             # <<<<<<<<<<<<<<
 *                 d[0] = d[1]
 *                 if branch not in potential_soma_cones:
 */
        if (unlikely(__Pyx_SetItemInt(__pyx_v_z, 0, __pyx_v_somaz, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 444, __pyx_L1_error)

        /* "neuron/rxd/geometry3d/ctng.pyx":445
 *                 x[0], y[0] = cp
 *                 z[0] = somaz
 *                 d[0] = d[1]             # <<<<<<<<<<<<<<
 *                 if branch not in potential_soma_cones:
 *                     potential_soma_cones[branch] = []
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_d, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (unlikely(__Pyx_SetItemInt(__pyx_v_d, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0) < 0)) __PYX_ERR(0, 445, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":446
 *                 z[0] = somaz
 *                 d[0] = d[1]
 *                 if branch not in potential_soma_cones:             # <<<<<<<<<<<<<<
 *                     potential_soma_cones[branch] = []
 * 
 */
        __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_v_branch, __pyx_v_potential_soma_cones, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 446, __pyx_L1_error)
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":447
 *                 d[0] = d[1]
 *                 if branch not in potential_soma_cones:
 *                     potential_soma_cones[branch] = []             # <<<<<<<<<<<<<<
 * 
 *                 '''# cap this with a sphere for smooth joins
 */
          __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely(PyDict_SetItem(__pyx_v_potential_soma_cones, __pyx_v_branch, __pyx_t_1) < 0)) __PYX_ERR(0, 447, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":446
 *                 z[0] = somaz
 *                 d[0] = d[1]
 *                 if branch not in potential_soma_cones:             # <<<<<<<<<<<<<<
 *                     potential_soma_cones[branch] = []
 * 
 */
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":436
 *             # CTNG:connectdends
 * 
 *             if psec in soma_secs:             # <<<<<<<<<<<<<<
 *                 f_pts, somaz = soma_secs[psec]
 *                 pt = (x[1], y[1], z[1])
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":458
 * 
 * 
 *             for i in range(len(x) - 1):             # <<<<<<<<<<<<<<
 *                 d0, d1 = d[i : i + 2]
 *                 if (x[i] != x[i + 1] or y[i] != y[i + 1] or z[i] != z[i + 1]):
 */
      __pyx_t_22 = PyObject_Length(__pyx_v_x); if (unlikely(__pyx_t_22 == ((Py_ssize_t)-1))) __PYX_ERR(0, 458, __pyx_L1_error)
      __pyx_t_25 = (__pyx_t_22 - 1);
      __pyx_t_22 = __pyx_t_25;
      for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_22; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "neuron/rxd/geometry3d/ctng.pyx":459
 * 
 *             for i in range(len(x) - 1):
 *                 d0, d1 = d[i : i + 2]             # <<<<<<<<<<<<<<
 *                 if (x[i] != x[i + 1] or y[i] != y[i + 1] or z[i] != z[i + 1]):
 *                     # short section check
 */
        __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_d, __pyx_v_i, (__pyx_v_i + 2), NULL, NULL, NULL, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
          PyObject* sequence = __pyx_t_1;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 459, __pyx_L1_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          #else
          __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 459, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 459, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_9)->tp_iternext;
          index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_9); if (unlikely(!__pyx_t_5)) goto __pyx_L74_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_5);
          index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_9); if (unlikely(!__pyx_t_4)) goto __pyx_L74_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_4);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_9), 2) < 0) __PYX_ERR(0, 459, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L75_unpacking_done;
          __pyx_L74_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 459, __pyx_L1_error)
          __pyx_L75_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_d0, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_d1, __pyx_t_4);
        __pyx_t_4 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":460
 *             for i in range(len(x) - 1):
 *                 d0, d1 = d[i : i + 2]
 *                 if (x[i] != x[i + 1] or y[i] != y[i + 1] or z[i] != z[i + 1]):             # <<<<<<<<<<<<<<
 *                     # short section check
 *                     #if linalg.norm((x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i])) < (d1 + d0) * 0.5:
 */
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_26 = (__pyx_v_i + 1);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L77_bool_binop_done;
        }
        __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_26 = (__pyx_v_i + 1);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_y, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (!__pyx_t_3) {
        } else {
          __pyx_t_2 = __pyx_t_3;
          goto __pyx_L77_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_z, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_26 = (__pyx_v_i + 1);
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_z, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 460, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = __pyx_t_3;
        __pyx_L77_bool_binop_done:;
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":464
 *                     #if linalg.norm((x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i])) < (d1 + d0) * 0.5:
 *                     #    short_segs += 1
 *                     axisx, axisy, axisz, deltad = x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i], d1 - d0             # <<<<<<<<<<<<<<
 *                     axislength = (axisx ** 2 + axisy ** 2 + axisz ** 2) ** 0.5
 *                     axisx /= axislength; axisy /= axislength; axisz /= axislength; deltad /= axislength
 */
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_x, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = PyNumber_Subtract(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_y, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = PyNumber_Subtract(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_z, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_z, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = PyNumber_Subtract(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_Subtract(__pyx_v_d1, __pyx_v_d0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 464, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_axisx, __pyx_t_1);
          __pyx_t_1 = 0;
          __Pyx_XDECREF_SET(__pyx_v_axisy, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_axisz, __pyx_t_13);
          __pyx_t_13 = 0;
          __Pyx_XDECREF_SET(__pyx_v_deltad, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":465
 *                     #    short_segs += 1
 *                     axisx, axisy, axisz, deltad = x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i], d1 - d0
 *                     axislength = (axisx ** 2 + axisy ** 2 + axisz ** 2) ** 0.5             # <<<<<<<<<<<<<<
 *                     axisx /= axislength; axisy /= axislength; axisz /= axislength; deltad /= axislength
 *                     x0, y0, z0 = x[i], y[i], z[i]
 */
          __pyx_t_4 = PyNumber_Power(__pyx_v_axisx, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = PyNumber_Power(__pyx_v_axisy, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_9 = PyNumber_Add(__pyx_t_4, __pyx_t_13); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = PyNumber_Power(__pyx_v_axisz, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_4 = PyNumber_Add(__pyx_t_9, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = PyNumber_Power(__pyx_t_4, __pyx_float_0_5, Py_None); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 465, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF_SET(__pyx_v_axislength, __pyx_t_13);
          __pyx_t_13 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":466
 *                     axisx, axisy, axisz, deltad = x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i], d1 - d0
 *                     axislength = (axisx ** 2 + axisy ** 2 + axisz ** 2) ** 0.5
 *                     axisx /= axislength; axisy /= axislength; axisz /= axislength; deltad /= axislength             # <<<<<<<<<<<<<<
 *                     x0, y0, z0 = x[i], y[i], z[i]
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]
 */
          __pyx_t_13 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_axisx, __pyx_v_axislength); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 466, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF_SET(__pyx_v_axisx, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_axisy, __pyx_v_axislength); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 466, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF_SET(__pyx_v_axisy, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_axisz, __pyx_v_axislength); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 466, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF_SET(__pyx_v_axisz, __pyx_t_13);
          __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_deltad, __pyx_v_axislength); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 466, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF_SET(__pyx_v_deltad, __pyx_t_13);
          __pyx_t_13 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":467
 *                     axislength = (axisx ** 2 + axisy ** 2 + axisz ** 2) ** 0.5
 *                     axisx /= axislength; axisy /= axislength; axisz /= axislength; deltad /= axislength
 *                     x0, y0, z0 = x[i], y[i], z[i]             # <<<<<<<<<<<<<<
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]
 *                     if (x0, y0, z0) in diam_corrections:
 */
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_x, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_y, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_z, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_v_x0 = __pyx_t_14;
          __pyx_v_y0 = __pyx_t_15;
          __pyx_v_z0 = __pyx_t_16;

          /* "neuron/rxd/geometry3d/ctng.pyx":468
 *                     axisx /= axislength; axisy /= axislength; axisz /= axislength; deltad /= axislength
 *                     x0, y0, z0 = x[i], y[i], z[i]
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]             # <<<<<<<<<<<<<<
 *                     if (x0, y0, z0) in diam_corrections:
 *                         d0 = diam_corrections[(x0, y0, z0)]
 */
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_x, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_y, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_26 = (__pyx_v_i + 1);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_z, __pyx_t_26, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 468, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_v_x1 = __pyx_t_16;
          __pyx_v_y1 = __pyx_t_15;
          __pyx_v_z1 = __pyx_t_14;

          /* "neuron/rxd/geometry3d/ctng.pyx":469
 *                     x0, y0, z0 = x[i], y[i], z[i]
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]
 *                     if (x0, y0, z0) in diam_corrections:             # <<<<<<<<<<<<<<
 *                         d0 = diam_corrections[(x0, y0, z0)]
 *                     if (x1, y1, z1) in diam_corrections:
 */
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_9);
          __pyx_t_13 = 0;
          __pyx_t_4 = 0;
          __pyx_t_9 = 0;
          __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_diam_corrections, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 469, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = (__pyx_t_2 != 0);
          if (__pyx_t_3) {

            /* "neuron/rxd/geometry3d/ctng.pyx":470
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]
 *                     if (x0, y0, z0) in diam_corrections:
 *                         d0 = diam_corrections[(x0, y0, z0)]             # <<<<<<<<<<<<<<
 *                     if (x1, y1, z1) in diam_corrections:
 *                         d1 = diam_corrections[(x1, y1, z1)]
 */
            __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_4);
            PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_4);
            __pyx_t_1 = 0;
            __pyx_t_9 = 0;
            __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_diam_corrections, __pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 470, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF_SET(__pyx_v_d0, __pyx_t_4);
            __pyx_t_4 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":469
 *                     x0, y0, z0 = x[i], y[i], z[i]
 *                     x1, y1, z1 = x[i + 1], y[i + 1], z[i + 1]
 *                     if (x0, y0, z0) in diam_corrections:             # <<<<<<<<<<<<<<
 *                         d0 = diam_corrections[(x0, y0, z0)]
 *                     if (x1, y1, z1) in diam_corrections:
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":471
 *                     if (x0, y0, z0) in diam_corrections:
 *                         d0 = diam_corrections[(x0, y0, z0)]
 *                     if (x1, y1, z1) in diam_corrections:             # <<<<<<<<<<<<<<
 *                         d1 = diam_corrections[(x1, y1, z1)]
 * 
 */
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 471, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 471, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_9);
          __pyx_t_4 = 0;
          __pyx_t_13 = 0;
          __pyx_t_9 = 0;
          __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_t_1, __pyx_v_diam_corrections, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 471, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_2 = (__pyx_t_3 != 0);
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":472
 *                         d0 = diam_corrections[(x0, y0, z0)]
 *                     if (x1, y1, z1) in diam_corrections:
 *                         d1 = diam_corrections[(x1, y1, z1)]             # <<<<<<<<<<<<<<
 * 
 *                     if d0 != d1:
 */
            __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 472, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 472, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 472, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_13);
            __pyx_t_1 = 0;
            __pyx_t_9 = 0;
            __pyx_t_13 = 0;
            __pyx_t_13 = __Pyx_PyDict_GetItem(__pyx_v_diam_corrections, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 472, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF_SET(__pyx_v_d1, __pyx_t_13);
            __pyx_t_13 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":471
 *                     if (x0, y0, z0) in diam_corrections:
 *                         d0 = diam_corrections[(x0, y0, z0)]
 *                     if (x1, y1, z1) in diam_corrections:             # <<<<<<<<<<<<<<
 *                         d1 = diam_corrections[(x1, y1, z1)]
 * 
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":474
 *                         d1 = diam_corrections[(x1, y1, z1)]
 * 
 *                     if d0 != d1:             # <<<<<<<<<<<<<<
 *                         all_cones.append(Cone(x0, y0, z0, d0 * 0.5, x1, y1, z1, d1 * 0.5))
 *                     else:
 */
          __pyx_t_13 = PyObject_RichCompare(__pyx_v_d0, __pyx_v_d1, Py_NE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 474, __pyx_L1_error)
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 474, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":475
 * 
 *                     if d0 != d1:
 *                         all_cones.append(Cone(x0, y0, z0, d0 * 0.5, x1, y1, z1, d1 * 0.5))             # <<<<<<<<<<<<<<
 *                     else:
 *                         all_cones.append(Cylinder(x0, y0, z0, x1, y1, z1, d1 * 0.5))
 */
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Cone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_1 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_10 = PyNumber_Multiply(__pyx_v_d0, __pyx_float_0_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_17 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_20 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_21 = PyNumber_Multiply(__pyx_v_d1, __pyx_float_0_5); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_27 = NULL;
            __pyx_t_28 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_27)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_27);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_28 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[9] = {__pyx_t_27, __pyx_t_9, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_11, __pyx_t_17, __pyx_t_20, __pyx_t_21};
              __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_28, 8+__pyx_t_28); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 475, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[9] = {__pyx_t_27, __pyx_t_9, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_11, __pyx_t_17, __pyx_t_20, __pyx_t_21};
              __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_28, 8+__pyx_t_28); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 475, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            } else
            #endif
            {
              __pyx_t_29 = PyTuple_New(8+__pyx_t_28); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 475, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_29);
              if (__pyx_t_27) {
                __Pyx_GIVEREF(__pyx_t_27); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_27); __pyx_t_27 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_9);
              PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_28, __pyx_t_9);
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_28, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_29, 2+__pyx_t_28, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_29, 3+__pyx_t_28, __pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_29, 4+__pyx_t_28, __pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_29, 5+__pyx_t_28, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_20);
              PyTuple_SET_ITEM(__pyx_t_29, 6+__pyx_t_28, __pyx_t_20);
              __Pyx_GIVEREF(__pyx_t_21);
              PyTuple_SET_ITEM(__pyx_t_29, 7+__pyx_t_28, __pyx_t_21);
              __pyx_t_9 = 0;
              __pyx_t_1 = 0;
              __pyx_t_5 = 0;
              __pyx_t_10 = 0;
              __pyx_t_11 = 0;
              __pyx_t_17 = 0;
              __pyx_t_20 = 0;
              __pyx_t_21 = 0;
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_29, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 475, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_all_cones, __pyx_t_13); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 475, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":474
 *                         d1 = diam_corrections[(x1, y1, z1)]
 * 
 *                     if d0 != d1:             # <<<<<<<<<<<<<<
 *                         all_cones.append(Cone(x0, y0, z0, d0 * 0.5, x1, y1, z1, d1 * 0.5))
 *                     else:
 */
            goto __pyx_L82;
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":477
 *                         all_cones.append(Cone(x0, y0, z0, d0 * 0.5, x1, y1, z1, d1 * 0.5))
 *                     else:
 *                         all_cones.append(Cylinder(x0, y0, z0, x1, y1, z1, d1 * 0.5))             # <<<<<<<<<<<<<<
 *                     with cython.wraparound(True):
 *                         register(pts_cones_db, (x0, y0, z0), all_cones[-1])
 */
          /*else*/ {
            __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Cylinder); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_29 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_29);
            __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_20 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_20);
            __pyx_t_17 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_11 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_5 = PyNumber_Multiply(__pyx_v_d1, __pyx_float_0_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = NULL;
            __pyx_t_28 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_4, function);
                __pyx_t_28 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_t_29, __pyx_t_21, __pyx_t_20, __pyx_t_17, __pyx_t_11, __pyx_t_10, __pyx_t_5};
              __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_28, 7+__pyx_t_28); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 477, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
              PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_t_29, __pyx_t_21, __pyx_t_20, __pyx_t_17, __pyx_t_11, __pyx_t_10, __pyx_t_5};
              __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_28, 7+__pyx_t_28); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 477, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            } else
            #endif
            {
              __pyx_t_9 = PyTuple_New(7+__pyx_t_28); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              if (__pyx_t_1) {
                __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_29);
              PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_28, __pyx_t_29);
              __Pyx_GIVEREF(__pyx_t_21);
              PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_28, __pyx_t_21);
              __Pyx_GIVEREF(__pyx_t_20);
              PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_28, __pyx_t_20);
              __Pyx_GIVEREF(__pyx_t_17);
              PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_28, __pyx_t_17);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_28, __pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_10);
              PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_28, __pyx_t_10);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_9, 6+__pyx_t_28, __pyx_t_5);
              __pyx_t_29 = 0;
              __pyx_t_21 = 0;
              __pyx_t_20 = 0;
              __pyx_t_17 = 0;
              __pyx_t_11 = 0;
              __pyx_t_10 = 0;
              __pyx_t_5 = 0;
              __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_9, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 477, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_all_cones, __pyx_t_13); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 477, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __pyx_L82:;

          /* "neuron/rxd/geometry3d/ctng.pyx":479
 *                         all_cones.append(Cylinder(x0, y0, z0, x1, y1, z1, d1 * 0.5))
 *                     with cython.wraparound(True):
 *                         register(pts_cones_db, (x0, y0, z0), all_cones[-1])             # <<<<<<<<<<<<<<
 *                         register(pts_cones_db, (x1, y1, z1), all_cones[-1])
 *                         # if the cone is added to connect the dendrite to the soma
 */
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_9);
          __pyx_t_13 = 0;
          __pyx_t_4 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = __Pyx_GetItemInt_List(__pyx_v_all_cones, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_4 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(__pyx_v_pts_cones_db, ((PyObject*)__pyx_t_5), __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":480
 *                     with cython.wraparound(True):
 *                         register(pts_cones_db, (x0, y0, z0), all_cones[-1])
 *                         register(pts_cones_db, (x1, y1, z1), all_cones[-1])             # <<<<<<<<<<<<<<
 *                         # if the cone is added to connect the dendrite to the soma
 *                         # and it does not have corresponding segment
 */
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_5);
          __pyx_t_4 = 0;
          __pyx_t_9 = 0;
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_all_cones, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(__pyx_v_pts_cones_db, ((PyObject*)__pyx_t_13), __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 480, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":485
 *                         # keep track of them here and assign them to a soma
 *                         # segment later.
 *                         if branch in potential_soma_cones:             # <<<<<<<<<<<<<<
 *                             potential_soma_cones[branch].append(all_cones[-1])
 *                     register(diam_db, (x0, y0, z0), d0)
 */
          __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_branch, __pyx_v_potential_soma_cones, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 485, __pyx_L1_error)
          __pyx_t_3 = (__pyx_t_2 != 0);
          if (__pyx_t_3) {

            /* "neuron/rxd/geometry3d/ctng.pyx":486
 *                         # segment later.
 *                         if branch in potential_soma_cones:
 *                             potential_soma_cones[branch].append(all_cones[-1])             # <<<<<<<<<<<<<<
 *                     register(diam_db, (x0, y0, z0), d0)
 *                     register(diam_db, (x1, y1, z1), d1)
 */
            __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_potential_soma_cones, __pyx_v_branch); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 486, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_all_cones, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_19 = __Pyx_PyObject_Append(__pyx_t_9, __pyx_t_5); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 486, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":485
 *                         # keep track of them here and assign them to a soma
 *                         # segment later.
 *                         if branch in potential_soma_cones:             # <<<<<<<<<<<<<<
 *                             potential_soma_cones[branch].append(all_cones[-1])
 *                     register(diam_db, (x0, y0, z0), d0)
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":487
 *                         if branch in potential_soma_cones:
 *                             potential_soma_cones[branch].append(all_cones[-1])
 *                     register(diam_db, (x0, y0, z0), d0)             # <<<<<<<<<<<<<<
 *                     register(diam_db, (x1, y1, z1), d1)
 * 
 */
          __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_13);
          __pyx_t_5 = 0;
          __pyx_t_9 = 0;
          __pyx_t_13 = 0;
          __pyx_t_13 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(__pyx_v_diam_db, ((PyObject*)__pyx_t_4), __pyx_v_d0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 487, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":488
 *                             potential_soma_cones[branch].append(all_cones[-1])
 *                     register(diam_db, (x0, y0, z0), d0)
 *                     register(diam_db, (x1, y1, z1), d1)             # <<<<<<<<<<<<<<
 * 
 *         diam_corrections = {}
 */
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_13);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_9);
          PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_9);
          __pyx_t_13 = 0;
          __pyx_t_4 = 0;
          __pyx_t_9 = 0;
          __pyx_t_9 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_register(__pyx_v_diam_db, ((PyObject*)__pyx_t_5), __pyx_v_d1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 488, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":460
 *             for i in range(len(x) - 1):
 *                 d0, d1 = d[i : i + 2]
 *                 if (x[i] != x[i + 1] or y[i] != y[i + 1] or z[i] != z[i + 1]):             # <<<<<<<<<<<<<<
 *                     # short section check
 *                     #if linalg.norm((x[i + 1] - x[i], y[i + 1] - y[i], z[i + 1] - z[i])) < (d1 + d0) * 0.5:
 */
        }
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":380
 *         diam_db = {}
 * 
 *         for (k, branch), psec in zip(enumerate(branches), parent_sec_name):             # <<<<<<<<<<<<<<
 *             if source_is_import3d:
 *                 x, y, z = [numpy.array(branch.raw.getrow(i).to_python()) for i in range(3)]
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":490
 *                     register(diam_db, (x1, y1, z1), d1)
 * 
 *         diam_corrections = {}             # <<<<<<<<<<<<<<
 *         if not nouniform:
 *             # at join, should always be the size of the biggest branch
 */
    __pyx_t_12 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF_SET(__pyx_v_diam_corrections, ((PyObject*)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":491
 * 
 *         diam_corrections = {}
 *         if not nouniform:             # <<<<<<<<<<<<<<
 *             # at join, should always be the size of the biggest branch
 *             # this is different behavior than NEURON, which continues the size of the
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_nouniform); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 491, __pyx_L1_error)
    __pyx_t_2 = ((!__pyx_t_3) != 0);
    if (__pyx_t_2) {

      /* "neuron/rxd/geometry3d/ctng.pyx":495
 *             # this is different behavior than NEURON, which continues the size of the
 *             # first point away from the join to the join
 *             for pt in diam_db:             # <<<<<<<<<<<<<<
 *                 vals = diam_db[pt]
 *                 if max(vals) != min(vals):
 */
      __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_dict_iterator(__pyx_v_diam_db, 1, ((PyObject *)NULL), (&__pyx_t_25), (&__pyx_t_8)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 495, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_12);
      __pyx_t_12 = __pyx_t_9;
      __pyx_t_9 = 0;
      while (1) {
        __pyx_t_28 = __Pyx_dict_iter_next(__pyx_t_12, __pyx_t_25, &__pyx_t_6, &__pyx_t_9, NULL, NULL, __pyx_t_8);
        if (unlikely(__pyx_t_28 == 0)) break;
        if (unlikely(__pyx_t_28 == -1)) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (!(likely(PyTuple_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_9)->tp_name), 0))) __PYX_ERR(0, 495, __pyx_L1_error)
        __Pyx_XDECREF_SET(__pyx_v_pt, ((PyObject*)__pyx_t_9));
        __pyx_t_9 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":496
 *             # first point away from the join to the join
 *             for pt in diam_db:
 *                 vals = diam_db[pt]             # <<<<<<<<<<<<<<
 *                 if max(vals) != min(vals):
 *                     diam_corrections[pt] = max(vals)
 */
        __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_v_diam_db, __pyx_v_pt); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 496, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_XDECREF_SET(__pyx_v_vals, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":497
 *             for pt in diam_db:
 *                 vals = diam_db[pt]
 *                 if max(vals) != min(vals):             # <<<<<<<<<<<<<<
 *                     diam_corrections[pt] = max(vals)
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_vals); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_min, __pyx_v_vals); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyObject_RichCompare(__pyx_t_9, __pyx_t_5, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":498
 *                 vals = diam_db[pt]
 *                 if max(vals) != min(vals):
 *                     diam_corrections[pt] = max(vals)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_max, __pyx_v_vals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 498, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(PyDict_SetItem(__pyx_v_diam_corrections, __pyx_v_pt, __pyx_t_4) < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":497
 *             for pt in diam_db:
 *                 vals = diam_db[pt]
 *                 if max(vals) != min(vals):             # <<<<<<<<<<<<<<
 *                     diam_corrections[pt] = max(vals)
 * 
 */
        }
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":491
 * 
 *         diam_corrections = {}
 *         if not nouniform:             # <<<<<<<<<<<<<<
 *             # at join, should always be the size of the biggest branch
 *             # this is different behavior than NEURON, which continues the size of the
 */
    }
  }

  /* "neuron/rxd/geometry3d/ctng.pyx":502
 * 
 * 
 *     cdef dict cone_clip_db = {cone: [] for cone in all_cones}             # <<<<<<<<<<<<<<
 *     cdef bint sharp_turn
 * #    cdef dict join_counts = {'2m': 0, '2s': 0, '3m': 0, '3s': 0, '4m': 0, '4s': 0, '0m': 0, '0s': 0, '1m': 0, '1s': 0}
 */
  { /* enter inner scope */
    __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 502, __pyx_L90_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (unlikely(!__pyx_v_all_cones)) { __Pyx_RaiseUnboundLocalError("all_cones"); __PYX_ERR(0, 502, __pyx_L90_error) }
    __pyx_t_4 = __pyx_v_all_cones; __Pyx_INCREF(__pyx_t_4); __pyx_t_25 = 0;
    for (;;) {
      if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_5); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 502, __pyx_L90_error)
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L90_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_cone, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 502, __pyx_L90_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(PyDict_SetItem(__pyx_t_12, (PyObject*)__pyx_8genexpr1__pyx_v_cone, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 502, __pyx_L90_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_cone); __pyx_8genexpr1__pyx_v_cone = 0;
    goto __pyx_L93_exit_scope;
    __pyx_L90_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_cone); __pyx_8genexpr1__pyx_v_cone = 0;
    goto __pyx_L1_error;
    __pyx_L93_exit_scope:;
  } /* exit inner scope */
  __pyx_v_cone_clip_db = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":505
 *     cdef bint sharp_turn
 * #    cdef dict join_counts = {'2m': 0, '2s': 0, '3m': 0, '3s': 0, '4m': 0, '4s': 0, '0m': 0, '0s': 0, '1m': 0, '1s': 0}
 *     join_items_needing_clipped = []             # <<<<<<<<<<<<<<
 *     for cone in all_cones:
 *         joingroup = []
 */
  __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_v_join_items_needing_clipped = ((PyObject*)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":506
 * #    cdef dict join_counts = {'2m': 0, '2s': 0, '3m': 0, '3s': 0, '4m': 0, '4s': 0, '0m': 0, '0s': 0, '1m': 0, '1s': 0}
 *     join_items_needing_clipped = []
 *     for cone in all_cones:             # <<<<<<<<<<<<<<
 *         joingroup = []
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0
 */
  if (unlikely(!__pyx_v_all_cones)) { __Pyx_RaiseUnboundLocalError("all_cones"); __PYX_ERR(0, 506, __pyx_L1_error) }
  __pyx_t_12 = __pyx_v_all_cones; __Pyx_INCREF(__pyx_t_12); __pyx_t_25 = 0;
  for (;;) {
    if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_12)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_25); __Pyx_INCREF(__pyx_t_4); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 506, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_12, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_cone, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":507
 *     join_items_needing_clipped = []
 *     for cone in all_cones:
 *         joingroup = []             # <<<<<<<<<<<<<<
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0
 *         x2, y2, z2, r2 = cone._x1, cone._y1, cone._z1, cone._r1
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_joingroup, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":508
 *     for cone in all_cones:
 *         joingroup = []
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0             # <<<<<<<<<<<<<<
 *         x2, y2, z2, r2 = cone._x1, cone._y1, cone._z1, cone._r1
 *         pt1 = numpy.array([x1, y1, z1])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x0_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y0_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z0_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_r0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_x1 = __pyx_t_14;
    __pyx_v_y1 = __pyx_t_15;
    __pyx_v_z1 = __pyx_t_16;
    __pyx_v_r1 = __pyx_t_30;

    /* "neuron/rxd/geometry3d/ctng.pyx":509
 *         joingroup = []
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0
 *         x2, y2, z2, r2 = cone._x1, cone._y1, cone._z1, cone._r1             # <<<<<<<<<<<<<<
 *         pt1 = numpy.array([x1, y1, z1])
 *         pt2 = numpy.array([x2, y2, z2])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_r1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_x2 = __pyx_t_30;
    __pyx_v_y2 = __pyx_t_16;
    __pyx_v_z2 = __pyx_t_15;
    __pyx_v_r2 = __pyx_t_14;

    /* "neuron/rxd/geometry3d/ctng.pyx":510
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0
 *         x2, y2, z2, r2 = cone._x1, cone._y1, cone._z1, cone._r1
 *         pt1 = numpy.array([x1, y1, z1])             # <<<<<<<<<<<<<<
 *         pt2 = numpy.array([x2, y2, z2])
 *         axis = (pt2 - pt1) / linalg.norm(pt2 - pt1)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
    __pyx_t_5 = 0;
    __pyx_t_13 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_4 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt1, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":511
 *         x2, y2, z2, r2 = cone._x1, cone._y1, cone._z1, cone._r1
 *         pt1 = numpy.array([x1, y1, z1])
 *         pt2 = numpy.array([x2, y2, z2])             # <<<<<<<<<<<<<<
 *         axis = (pt2 - pt1) / linalg.norm(pt2 - pt1)
 *         left_neighbors = list(pts_cones_db[(x1, y1, z1)])
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_numpy); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_9);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_13);
    PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_13);
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    __pyx_t_13 = 0;
    __pyx_t_13 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_13)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_13);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_13) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_13, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt2, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":512
 *         pt1 = numpy.array([x1, y1, z1])
 *         pt2 = numpy.array([x2, y2, z2])
 *         axis = (pt2 - pt1) / linalg.norm(pt2 - pt1)             # <<<<<<<<<<<<<<
 *         left_neighbors = list(pts_cones_db[(x1, y1, z1)])
 * 
 */
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_pt2, __pyx_v_pt1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_linalg); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_norm); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_pt2, __pyx_v_pt1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_11 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_10, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_axis, __pyx_t_13);
    __pyx_t_13 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":513
 *         pt2 = numpy.array([x2, y2, z2])
 *         axis = (pt2 - pt1) / linalg.norm(pt2 - pt1)
 *         left_neighbors = list(pts_cones_db[(x1, y1, z1)])             # <<<<<<<<<<<<<<
 * 
 *         right_neighbors = list(pts_cones_db[(x2, y2, z2)])
 */
    if (unlikely(!__pyx_v_pts_cones_db)) { __Pyx_RaiseUnboundLocalError("pts_cones_db"); __PYX_ERR(0, 513, __pyx_L1_error) }
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
    __pyx_t_13 = 0;
    __pyx_t_11 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_pts_cones_db, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PySequence_List(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_left_neighbors, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":515
 *         left_neighbors = list(pts_cones_db[(x1, y1, z1)])
 * 
 *         right_neighbors = list(pts_cones_db[(x2, y2, z2)])             # <<<<<<<<<<<<<<
 *         left_neighbors.remove(cone)
 *         right_neighbors.remove(cone)
 */
    if (unlikely(!__pyx_v_pts_cones_db)) { __Pyx_RaiseUnboundLocalError("pts_cones_db"); __PYX_ERR(0, 515, __pyx_L1_error) }
    __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_11);
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_pts_cones_db, __pyx_t_13); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PySequence_List(__pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_right_neighbors, ((PyObject*)__pyx_t_13));
    __pyx_t_13 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":516
 * 
 *         right_neighbors = list(pts_cones_db[(x2, y2, z2)])
 *         left_neighbors.remove(cone)             # <<<<<<<<<<<<<<
 *         right_neighbors.remove(cone)
 *         if not left_neighbors:
 */
    __pyx_t_13 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_remove, __pyx_v_left_neighbors, __pyx_v_cone); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":517
 *         right_neighbors = list(pts_cones_db[(x2, y2, z2)])
 *         left_neighbors.remove(cone)
 *         right_neighbors.remove(cone)             # <<<<<<<<<<<<<<
 *         if not left_neighbors:
 *             left_neighbors = [None]
 */
    __pyx_t_13 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyList_Type_remove, __pyx_v_right_neighbors, __pyx_v_cone); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":518
 *         left_neighbors.remove(cone)
 *         right_neighbors.remove(cone)
 *         if not left_neighbors:             # <<<<<<<<<<<<<<
 *             left_neighbors = [None]
 *         else:
 */
    __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_left_neighbors) != 0);
    __pyx_t_3 = ((!__pyx_t_2) != 0);
    if (__pyx_t_3) {

      /* "neuron/rxd/geometry3d/ctng.pyx":519
 *         right_neighbors.remove(cone)
 *         if not left_neighbors:
 *             left_neighbors = [None]             # <<<<<<<<<<<<<<
 *         else:
 *             joingroup.append(cone)
 */
      __pyx_t_13 = PyList_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_13, 0, Py_None);
      __Pyx_DECREF_SET(__pyx_v_left_neighbors, ((PyObject*)__pyx_t_13));
      __pyx_t_13 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":518
 *         left_neighbors.remove(cone)
 *         right_neighbors.remove(cone)
 *         if not left_neighbors:             # <<<<<<<<<<<<<<
 *             left_neighbors = [None]
 *         else:
 */
      goto __pyx_L96;
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":521
 *             left_neighbors = [None]
 *         else:
 *             joingroup.append(cone)             # <<<<<<<<<<<<<<
 *             for neighbor in left_neighbors:
 *                 joingroup.append(neighbor)
 */
    /*else*/ {
      __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_v_cone); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 521, __pyx_L1_error)

      /* "neuron/rxd/geometry3d/ctng.pyx":522
 *         else:
 *             joingroup.append(cone)
 *             for neighbor in left_neighbors:             # <<<<<<<<<<<<<<
 *                 joingroup.append(neighbor)
 *         if not right_neighbors: right_neighbors = [None]
 */
      __pyx_t_13 = __pyx_v_left_neighbors; __Pyx_INCREF(__pyx_t_13); __pyx_t_6 = 0;
      for (;;) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_13)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_13, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 522, __pyx_L1_error)
        #else
        __pyx_t_11 = PySequence_ITEM(__pyx_t_13, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 522, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_XDECREF_SET(__pyx_v_neighbor, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":523
 *             joingroup.append(cone)
 *             for neighbor in left_neighbors:
 *                 joingroup.append(neighbor)             # <<<<<<<<<<<<<<
 *         if not right_neighbors: right_neighbors = [None]
 *         for neighbor_left, neighbor_right in itertools.product(left_neighbors, right_neighbors):
 */
        __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_v_neighbor); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 523, __pyx_L1_error)

        /* "neuron/rxd/geometry3d/ctng.pyx":522
 *         else:
 *             joingroup.append(cone)
 *             for neighbor in left_neighbors:             # <<<<<<<<<<<<<<
 *                 joingroup.append(neighbor)
 *         if not right_neighbors: right_neighbors = [None]
 */
      }
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __pyx_L96:;

    /* "neuron/rxd/geometry3d/ctng.pyx":524
 *             for neighbor in left_neighbors:
 *                 joingroup.append(neighbor)
 *         if not right_neighbors: right_neighbors = [None]             # <<<<<<<<<<<<<<
 *         for neighbor_left, neighbor_right in itertools.product(left_neighbors, right_neighbors):
 *             clips = []
 */
    __pyx_t_3 = (PyList_GET_SIZE(__pyx_v_right_neighbors) != 0);
    __pyx_t_2 = ((!__pyx_t_3) != 0);
    if (__pyx_t_2) {
      __pyx_t_13 = PyList_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 524, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      PyList_SET_ITEM(__pyx_t_13, 0, Py_None);
      __Pyx_DECREF_SET(__pyx_v_right_neighbors, ((PyObject*)__pyx_t_13));
      __pyx_t_13 = 0;
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":525
 *                 joingroup.append(neighbor)
 *         if not right_neighbors: right_neighbors = [None]
 *         for neighbor_left, neighbor_right in itertools.product(left_neighbors, right_neighbors):             # <<<<<<<<<<<<<<
 *             clips = []
 *             # if any join needs to be subject to clips, it goes here
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_itertools); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_product); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_left_neighbors, __pyx_v_right_neighbors};
      __pyx_t_13 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_v_left_neighbors, __pyx_v_right_neighbors};
      __pyx_t_13 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_GOTREF(__pyx_t_13);
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_11) {
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_11); __pyx_t_11 = NULL;
      }
      __Pyx_INCREF(__pyx_v_left_neighbors);
      __Pyx_GIVEREF(__pyx_v_left_neighbors);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_v_left_neighbors);
      __Pyx_INCREF(__pyx_v_right_neighbors);
      __Pyx_GIVEREF(__pyx_v_right_neighbors);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_v_right_neighbors);
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_13)) || PyTuple_CheckExact(__pyx_t_13)) {
      __pyx_t_4 = __pyx_t_13; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 525, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 525, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_13 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_13); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 525, __pyx_L1_error)
          #else
          __pyx_t_13 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 525, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          #endif
        }
      } else {
        __pyx_t_13 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_13)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 525, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_13);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_13))) || (PyList_CheckExact(__pyx_t_13))) {
        PyObject* sequence = __pyx_t_13;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 525, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_11);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        #endif
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_10 = PyObject_GetIter(__pyx_t_13); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 525, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_10)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_10); if (unlikely(!__pyx_t_5)) goto __pyx_L102_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_11 = __pyx_t_18(__pyx_t_10); if (unlikely(!__pyx_t_11)) goto __pyx_L102_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_11);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_10), 2) < 0) __PYX_ERR(0, 525, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L103_unpacking_done;
        __pyx_L102_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 525, __pyx_L1_error)
        __pyx_L103_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_neighbor_left, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_neighbor_right, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":526
 *         if not right_neighbors: right_neighbors = [None]
 *         for neighbor_left, neighbor_right in itertools.product(left_neighbors, right_neighbors):
 *             clips = []             # <<<<<<<<<<<<<<
 *             # if any join needs to be subject to clips, it goes here
 *             join_item = None
 */
      __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_XDECREF_SET(__pyx_v_clips, ((PyObject*)__pyx_t_13));
      __pyx_t_13 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":528
 *             clips = []
 *             # if any join needs to be subject to clips, it goes here
 *             join_item = None             # <<<<<<<<<<<<<<
 *             # process the join on the "left" (end 1)
 *             if neighbor_left is not None:
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_join_item, Py_None);

      /* "neuron/rxd/geometry3d/ctng.pyx":530
 *             join_item = None
 *             # process the join on the "left" (end 1)
 *             if neighbor_left is not None:             # <<<<<<<<<<<<<<
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0
 */
      __pyx_t_2 = (__pyx_v_neighbor_left != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "neuron/rxd/geometry3d/ctng.pyx":532
 *             if neighbor_left is not None:
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0             # <<<<<<<<<<<<<<
 *                 if x0 == x1 and y0 == y1 and z0 == z1:
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_x0_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_y0_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_z0_2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_r0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 532, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_v_x0 = __pyx_t_14;
        __pyx_v_y0 = __pyx_t_15;
        __pyx_v_z0 = __pyx_t_16;
        __pyx_v_r0 = __pyx_t_30;

        /* "neuron/rxd/geometry3d/ctng.pyx":533
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0
 *                 if x0 == x1 and y0 == y1 and z0 == z1:             # <<<<<<<<<<<<<<
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1
 *                 pt0 = numpy.array([x0, y0, z0])
 */
        __pyx_t_2 = ((__pyx_v_x0 == __pyx_v_x1) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L106_bool_binop_done;
        }
        __pyx_t_2 = ((__pyx_v_y0 == __pyx_v_y1) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L106_bool_binop_done;
        }
        __pyx_t_2 = ((__pyx_v_z0 == __pyx_v_z1) != 0);
        __pyx_t_3 = __pyx_t_2;
        __pyx_L106_bool_binop_done:;
        if (__pyx_t_3) {

          /* "neuron/rxd/geometry3d/ctng.pyx":534
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0
 *                 if x0 == x1 and y0 == y1 and z0 == z1:
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1             # <<<<<<<<<<<<<<
 *                 pt0 = numpy.array([x0, y0, z0])
 *                 naxis = (pt1 - pt0) / linalg.norm(pt1 - pt0)
 */
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_z1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_left, __pyx_n_s_r1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 534, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_v_x0 = __pyx_t_30;
          __pyx_v_y0 = __pyx_t_16;
          __pyx_v_z0 = __pyx_t_15;
          __pyx_v_r0 = __pyx_t_14;

          /* "neuron/rxd/geometry3d/ctng.pyx":533
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0
 *                 if x0 == x1 and y0 == y1 and z0 == z1:             # <<<<<<<<<<<<<<
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1
 *                 pt0 = numpy.array([x0, y0, z0])
 */
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":535
 *                 if x0 == x1 and y0 == y1 and z0 == z1:
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1
 *                 pt0 = numpy.array([x0, y0, z0])             # <<<<<<<<<<<<<<
 *                 naxis = (pt1 - pt0) / linalg.norm(pt1 - pt0)
 *                 # no need to clip if the cones are perfectly aligned
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_numpy); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_11);
        PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_9);
        __pyx_t_11 = 0;
        __pyx_t_10 = 0;
        __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        __pyx_t_13 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_9, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_17);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 535, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_pt0, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":536
 *                     x0, y0, z0, r0 = neighbor_left._x1, neighbor_left._y1, neighbor_left._z1, neighbor_left._r1
 *                 pt0 = numpy.array([x0, y0, z0])
 *                 naxis = (pt1 - pt0) / linalg.norm(pt1 - pt0)             # <<<<<<<<<<<<<<
 *                 # no need to clip if the cones are perfectly aligned
 * 
 */
        __pyx_t_13 = PyNumber_Subtract(__pyx_v_pt1, __pyx_v_pt0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_linalg); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_norm); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = PyNumber_Subtract(__pyx_v_pt1, __pyx_v_pt0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_10 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
          }
        }
        __pyx_t_5 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_t_17) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_17);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_13, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 536, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_naxis, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":539
 *                 # no need to clip if the cones are perfectly aligned
 * 
 *                 if all(axis == naxis):             # <<<<<<<<<<<<<<
 *                     #parallel
 *                     sp = Sphere(x1, y1, z1, r1)
 */
        __pyx_t_9 = PyObject_RichCompare(__pyx_v_axis, __pyx_v_naxis, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 539, __pyx_L1_error)
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 539, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_3) {

          /* "neuron/rxd/geometry3d/ctng.pyx":541
 *                 if all(axis == naxis):
 *                     #parallel
 *                     sp = Sphere(x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_17 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 541, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_20 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[5] = {__pyx_t_20, __pyx_t_13, __pyx_t_17, __pyx_t_10, __pyx_t_11};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
            PyObject *__pyx_temp[5] = {__pyx_t_20, __pyx_t_13, __pyx_t_17, __pyx_t_10, __pyx_t_11};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          } else
          #endif
          {
            __pyx_t_21 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 541, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            if (__pyx_t_20) {
              __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_20); __pyx_t_20 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_8, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_21, 2+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_21, 3+__pyx_t_8, __pyx_t_11);
            __pyx_t_13 = 0;
            __pyx_t_17 = 0;
            __pyx_t_10 = 0;
            __pyx_t_11 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 541, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":542
 *                     #parallel
 *                     sp = Sphere(x1, y1, z1, r1)
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)             # <<<<<<<<<<<<<<
 * 
 *                     sp.set_clip([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])
 */
          __pyx_t_5 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_get_infinite_cones(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 542, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (likely(__pyx_t_5 != Py_None)) {
            PyObject* sequence = __pyx_t_5;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 542, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_21 = PyTuple_GET_ITEM(sequence, 1); 
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_21);
            #else
            __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 542, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __pyx_t_21 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 542, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 542, __pyx_L1_error)
          }
          __Pyx_XDECREF_SET(__pyx_v_c0, __pyx_t_9);
          __pyx_t_9 = 0;
          __Pyx_XDECREF_SET(__pyx_v_c1, __pyx_t_21);
          __pyx_t_21 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":544
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 * 
 *                     sp.set_clip([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])             # <<<<<<<<<<<<<<
 *                     objects.append(sp)
 *                     with cython.wraparound(True):
 */
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_17 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_29 = PyNumber_Negative(__pyx_t_20); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_1 = PyNumber_Negative(__pyx_t_20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_27 = PyNumber_Negative(__pyx_t_20); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          __pyx_t_20 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[7] = {__pyx_t_20, __pyx_t_10, __pyx_t_17, __pyx_t_13, __pyx_t_29, __pyx_t_1, __pyx_t_27};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[7] = {__pyx_t_20, __pyx_t_10, __pyx_t_17, __pyx_t_13, __pyx_t_29, __pyx_t_1, __pyx_t_27};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
          } else
          #endif
          {
            __pyx_t_31 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            if (__pyx_t_20) {
              __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_20); __pyx_t_20 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_31, 0+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_31, 1+__pyx_t_8, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_31, 2+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_29);
            PyTuple_SET_ITEM(__pyx_t_31, 3+__pyx_t_8, __pyx_t_29);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_31, 4+__pyx_t_8, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_27);
            PyTuple_SET_ITEM(__pyx_t_31, 5+__pyx_t_8, __pyx_t_27);
            __pyx_t_10 = 0;
            __pyx_t_17 = 0;
            __pyx_t_13 = 0;
            __pyx_t_29 = 0;
            __pyx_t_1 = 0;
            __pyx_t_27 = 0;
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_31, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Plane); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __pyx_t_27 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_29 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_17 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_20 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
            __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_31);
            if (likely(__pyx_t_20)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
              __Pyx_INCREF(__pyx_t_20);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_31, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_31)) {
            PyObject *__pyx_temp[7] = {__pyx_t_20, __pyx_t_27, __pyx_t_1, __pyx_t_29, __pyx_t_13, __pyx_t_17, __pyx_t_10};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
            PyObject *__pyx_temp[7] = {__pyx_t_20, __pyx_t_27, __pyx_t_1, __pyx_t_29, __pyx_t_13, __pyx_t_17, __pyx_t_10};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          } else
          #endif
          {
            __pyx_t_32 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            if (__pyx_t_20) {
              __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_20); __pyx_t_20 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_27);
            PyTuple_SET_ITEM(__pyx_t_32, 0+__pyx_t_8, __pyx_t_27);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_32, 1+__pyx_t_8, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_29);
            PyTuple_SET_ITEM(__pyx_t_32, 2+__pyx_t_8, __pyx_t_29);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_32, 3+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_17);
            PyTuple_SET_ITEM(__pyx_t_32, 4+__pyx_t_8, __pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_32, 5+__pyx_t_8, __pyx_t_10);
            __pyx_t_27 = 0;
            __pyx_t_1 = 0;
            __pyx_t_29 = 0;
            __pyx_t_13 = 0;
            __pyx_t_17 = 0;
            __pyx_t_10 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_32, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 544, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          }
          __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          __pyx_t_31 = PyList_New(4); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __Pyx_INCREF(__pyx_v_c0);
          __Pyx_GIVEREF(__pyx_v_c0);
          PyList_SET_ITEM(__pyx_t_31, 0, __pyx_v_c0);
          __Pyx_INCREF(__pyx_v_c1);
          __Pyx_GIVEREF(__pyx_v_c1);
          PyList_SET_ITEM(__pyx_t_31, 1, __pyx_v_c1);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_31, 2, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_11);
          PyList_SET_ITEM(__pyx_t_31, 3, __pyx_t_11);
          __pyx_t_9 = 0;
          __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_21))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_21);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_21, function);
            }
          }
          __pyx_t_5 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_11, __pyx_t_31) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_t_31);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 544, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":545
 * 
 *                     sp.set_clip([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])
 *                     objects.append(sp)             # <<<<<<<<<<<<<<
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])
 */
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 545, __pyx_L1_error)

          /* "neuron/rxd/geometry3d/ctng.pyx":547
 *                     objects.append(sp)
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                 elif r0 == r1 == r2:
 *                     # simplest join: two non-parallel cylinders (no need for all that nastiness below)
 */
          __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_5); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 547, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":539
 *                 # no need to clip if the cones are perfectly aligned
 * 
 *                 if all(axis == naxis):             # <<<<<<<<<<<<<<
 *                     #parallel
 *                     sp = Sphere(x1, y1, z1, r1)
 */
          goto __pyx_L109;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":548
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])
 *                 elif r0 == r1 == r2:             # <<<<<<<<<<<<<<
 *                     # simplest join: two non-parallel cylinders (no need for all that nastiness below)
 *                     sp = Sphere(x1, y1, z1, r1)
 */
        __pyx_t_3 = (__pyx_v_r0 == __pyx_v_r1);
        if (__pyx_t_3) {
          __pyx_t_3 = (__pyx_v_r1 == __pyx_v_r2);
        }
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {

          /* "neuron/rxd/geometry3d/ctng.pyx":550
 *                 elif r0 == r1 == r2:
 *                     # simplest join: two non-parallel cylinders (no need for all that nastiness below)
 *                     sp = Sphere(x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *                     sp.set_clip([Intersection([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_31 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __pyx_t_11 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_32 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 550, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_21);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_21, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_21)) {
            PyObject *__pyx_temp[5] = {__pyx_t_10, __pyx_t_31, __pyx_t_11, __pyx_t_9, __pyx_t_32};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_21)) {
            PyObject *__pyx_temp[5] = {__pyx_t_10, __pyx_t_31, __pyx_t_11, __pyx_t_9, __pyx_t_32};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 550, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_10) {
              __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_10); __pyx_t_10 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_31);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_t_31);
            __Pyx_GIVEREF(__pyx_t_11);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_9);
            PyTuple_SET_ITEM(__pyx_t_17, 2+__pyx_t_8, __pyx_t_9);
            __Pyx_GIVEREF(__pyx_t_32);
            PyTuple_SET_ITEM(__pyx_t_17, 3+__pyx_t_8, __pyx_t_32);
            __pyx_t_31 = 0;
            __pyx_t_11 = 0;
            __pyx_t_9 = 0;
            __pyx_t_32 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_17, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 550, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":551
 *                     # simplest join: two non-parallel cylinders (no need for all that nastiness below)
 *                     sp = Sphere(x1, y1, z1, r1)
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)             # <<<<<<<<<<<<<<
 *                     sp.set_clip([Intersection([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])])
 *                     objects.append(sp)
 */
          __pyx_t_5 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_get_infinite_cones(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 551, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (likely(__pyx_t_5 != Py_None)) {
            PyObject* sequence = __pyx_t_5;
            Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
            if (unlikely(size != 2)) {
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
              __PYX_ERR(0, 551, __pyx_L1_error)
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_21 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_17 = PyTuple_GET_ITEM(sequence, 1); 
            __Pyx_INCREF(__pyx_t_21);
            __Pyx_INCREF(__pyx_t_17);
            #else
            __pyx_t_21 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_17 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 551, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            #endif
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          } else {
            __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 551, __pyx_L1_error)
          }
          __Pyx_XDECREF_SET(__pyx_v_c0, __pyx_t_21);
          __pyx_t_21 = 0;
          __Pyx_XDECREF_SET(__pyx_v_c1, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":552
 *                     sp = Sphere(x1, y1, z1, r1)
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *                     sp.set_clip([Intersection([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])])             # <<<<<<<<<<<<<<
 *                     objects.append(sp)
 *                     with cython.wraparound(True):
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_31 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_13 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_29 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_1 = PyNumber_Negative(__pyx_t_29); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_29 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_27 = PyNumber_Negative(__pyx_t_29); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_29 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_29);
          __pyx_t_20 = PyNumber_Negative(__pyx_t_29); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
          __pyx_t_29 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_11);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_11, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[7] = {__pyx_t_29, __pyx_t_31, __pyx_t_10, __pyx_t_13, __pyx_t_1, __pyx_t_27, __pyx_t_20};
            __pyx_t_9 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
            PyObject *__pyx_temp[7] = {__pyx_t_29, __pyx_t_31, __pyx_t_10, __pyx_t_13, __pyx_t_1, __pyx_t_27, __pyx_t_20};
            __pyx_t_9 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
          } else
          #endif
          {
            __pyx_t_33 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_33);
            if (__pyx_t_29) {
              __Pyx_GIVEREF(__pyx_t_29); PyTuple_SET_ITEM(__pyx_t_33, 0, __pyx_t_29); __pyx_t_29 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_31);
            PyTuple_SET_ITEM(__pyx_t_33, 0+__pyx_t_8, __pyx_t_31);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_33, 1+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_33, 2+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_33, 3+__pyx_t_8, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_27);
            PyTuple_SET_ITEM(__pyx_t_33, 4+__pyx_t_8, __pyx_t_27);
            __Pyx_GIVEREF(__pyx_t_20);
            PyTuple_SET_ITEM(__pyx_t_33, 5+__pyx_t_8, __pyx_t_20);
            __pyx_t_31 = 0;
            __pyx_t_10 = 0;
            __pyx_t_13 = 0;
            __pyx_t_1 = 0;
            __pyx_t_27 = 0;
            __pyx_t_20 = 0;
            __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_33, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_9);
            __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_33, __pyx_n_s_Plane); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __pyx_t_20 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_20);
          __pyx_t_27 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_27);
          __pyx_t_1 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_31 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __pyx_t_29 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_33))) {
            __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_33);
            if (likely(__pyx_t_29)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_33);
              __Pyx_INCREF(__pyx_t_29);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_33, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_33)) {
            PyObject *__pyx_temp[7] = {__pyx_t_29, __pyx_t_20, __pyx_t_27, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_31};
            __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_33, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_33)) {
            PyObject *__pyx_temp[7] = {__pyx_t_29, __pyx_t_20, __pyx_t_27, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_31};
            __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_33, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          } else
          #endif
          {
            __pyx_t_34 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_34);
            if (__pyx_t_29) {
              __Pyx_GIVEREF(__pyx_t_29); PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_t_29); __pyx_t_29 = NULL;
            }
            __Pyx_GIVEREF(__pyx_t_20);
            PyTuple_SET_ITEM(__pyx_t_34, 0+__pyx_t_8, __pyx_t_20);
            __Pyx_GIVEREF(__pyx_t_27);
            PyTuple_SET_ITEM(__pyx_t_34, 1+__pyx_t_8, __pyx_t_27);
            __Pyx_GIVEREF(__pyx_t_1);
            PyTuple_SET_ITEM(__pyx_t_34, 2+__pyx_t_8, __pyx_t_1);
            __Pyx_GIVEREF(__pyx_t_13);
            PyTuple_SET_ITEM(__pyx_t_34, 3+__pyx_t_8, __pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_34, 4+__pyx_t_8, __pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_31);
            PyTuple_SET_ITEM(__pyx_t_34, 5+__pyx_t_8, __pyx_t_31);
            __pyx_t_20 = 0;
            __pyx_t_27 = 0;
            __pyx_t_1 = 0;
            __pyx_t_13 = 0;
            __pyx_t_10 = 0;
            __pyx_t_31 = 0;
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_33, __pyx_t_34, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 552, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
          }
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          __pyx_t_33 = PyList_New(4); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __Pyx_INCREF(__pyx_v_c0);
          __Pyx_GIVEREF(__pyx_v_c0);
          PyList_SET_ITEM(__pyx_t_33, 0, __pyx_v_c0);
          __Pyx_INCREF(__pyx_v_c1);
          __Pyx_GIVEREF(__pyx_v_c1);
          PyList_SET_ITEM(__pyx_t_33, 1, __pyx_v_c1);
          __Pyx_GIVEREF(__pyx_t_9);
          PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_9);
          __Pyx_GIVEREF(__pyx_t_11);
          PyList_SET_ITEM(__pyx_t_33, 3, __pyx_t_11);
          __pyx_t_9 = 0;
          __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_32);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_32, function);
            }
          }
          __pyx_t_21 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_32, __pyx_t_11, __pyx_t_33) : __Pyx_PyObject_CallOneArg(__pyx_t_32, __pyx_t_33);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = PyList_New(1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_GIVEREF(__pyx_t_21);
          PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_21);
          __pyx_t_21 = 0;
          __pyx_t_21 = NULL;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
            }
          }
          __pyx_t_5 = (__pyx_t_21) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_21, __pyx_t_32) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_32);
          __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 552, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":553
 *                     c0, c1 = get_infinite_cones(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2)
 *                     sp.set_clip([Intersection([c0, c1, Plane(x0, y0, z0, -naxis[0], -naxis[1], -naxis[2]), Plane(x2, y2, z2, axis[0], axis[1], axis[2])])])
 *                     objects.append(sp)             # <<<<<<<<<<<<<<
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])
 */
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 553, __pyx_L1_error)

          /* "neuron/rxd/geometry3d/ctng.pyx":555
 *                     objects.append(sp)
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                 else:
 *                     # is the turn sharp or not
 */
          __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_5); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 555, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":548
 *                     with cython.wraparound(True):
 *                         joingroup.append(objects[-1])
 *                 elif r0 == r1 == r2:             # <<<<<<<<<<<<<<
 *                     # simplest join: two non-parallel cylinders (no need for all that nastiness below)
 *                     sp = Sphere(x1, y1, z1, r1)
 */
          goto __pyx_L109;
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":559
 *                     # is the turn sharp or not
 *                     # CTNG:joinangle
 *                     sharp_turn = numpy.dot(axis, naxis) < 0             # <<<<<<<<<<<<<<
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)
 */
        /*else*/ {
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_numpy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_dot); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_32);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_32, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_32)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_32)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else
          #endif
          {
            __pyx_t_21 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 559, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_INCREF(__pyx_v_axis);
            __Pyx_GIVEREF(__pyx_v_axis);
            PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_8, __pyx_v_axis);
            __Pyx_INCREF(__pyx_v_naxis);
            __Pyx_GIVEREF(__pyx_v_naxis);
            PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_8, __pyx_v_naxis);
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_32, __pyx_t_21, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 559, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          }
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_32); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_32); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 559, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_v_sharp_turn = __pyx_t_2;

          /* "neuron/rxd/geometry3d/ctng.pyx":561
 *                     sharp_turn = numpy.dot(axis, naxis) < 0
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)             # <<<<<<<<<<<<<<
 *                     radial_vec = numpy.cross(plane_normal, axis)
 *                     nradial_vec = numpy.cross(plane_normal, naxis)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 561, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_cross); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 561, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_21);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_21, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_21)) {
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_32 = __Pyx_PyFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 561, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_21)) {
            PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_32 = __Pyx_PyCFunction_FastCall(__pyx_t_21, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 561, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          {
            __pyx_t_17 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 561, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            if (__pyx_t_5) {
              __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_5); __pyx_t_5 = NULL;
            }
            __Pyx_INCREF(__pyx_v_axis);
            __Pyx_GIVEREF(__pyx_v_axis);
            PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_v_axis);
            __Pyx_INCREF(__pyx_v_naxis);
            __Pyx_GIVEREF(__pyx_v_naxis);
            PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_v_naxis);
            __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_21, __pyx_t_17, NULL); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 561, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_XDECREF_SET(__pyx_v_plane_normal, __pyx_t_32);
          __pyx_t_32 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":562
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)
 *                     radial_vec = numpy.cross(plane_normal, axis)             # <<<<<<<<<<<<<<
 *                     nradial_vec = numpy.cross(plane_normal, naxis)
 *                     # normalize all of these
 */
          __Pyx_GetModuleGlobalName(__pyx_t_21, __pyx_n_s_numpy); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_21, __pyx_n_s_cross); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 562, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_21)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_21);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_v_plane_normal, __pyx_v_axis};
            __pyx_t_32 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 562, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_21, __pyx_v_plane_normal, __pyx_v_axis};
            __pyx_t_32 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 562, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          {
            __pyx_t_5 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 562, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            if (__pyx_t_21) {
              __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_21); __pyx_t_21 = NULL;
            }
            __Pyx_INCREF(__pyx_v_plane_normal);
            __Pyx_GIVEREF(__pyx_v_plane_normal);
            PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_v_plane_normal);
            __Pyx_INCREF(__pyx_v_axis);
            __Pyx_GIVEREF(__pyx_v_axis);
            PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_v_axis);
            __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_5, NULL); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 562, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_radial_vec, __pyx_t_32);
          __pyx_t_32 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":563
 *                     plane_normal = numpy.cross(axis, naxis)
 *                     radial_vec = numpy.cross(plane_normal, axis)
 *                     nradial_vec = numpy.cross(plane_normal, naxis)             # <<<<<<<<<<<<<<
 *                     # normalize all of these
 *                     radial_vec /= linalg.norm(radial_vec)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_numpy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_cross); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 563, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_plane_normal, __pyx_v_naxis};
            __pyx_t_32 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 563, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_plane_normal, __pyx_v_naxis};
            __pyx_t_32 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 563, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_32);
          } else
          #endif
          {
            __pyx_t_21 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 563, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_21, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_INCREF(__pyx_v_plane_normal);
            __Pyx_GIVEREF(__pyx_v_plane_normal);
            PyTuple_SET_ITEM(__pyx_t_21, 0+__pyx_t_8, __pyx_v_plane_normal);
            __Pyx_INCREF(__pyx_v_naxis);
            __Pyx_GIVEREF(__pyx_v_naxis);
            PyTuple_SET_ITEM(__pyx_t_21, 1+__pyx_t_8, __pyx_v_naxis);
            __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_21, NULL); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 563, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          }
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_XDECREF_SET(__pyx_v_nradial_vec, __pyx_t_32);
          __pyx_t_32 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":565
 *                     nradial_vec = numpy.cross(plane_normal, naxis)
 *                     # normalize all of these
 *                     radial_vec /= linalg.norm(radial_vec)             # <<<<<<<<<<<<<<
 *                     nradial_vec /= linalg.norm(nradial_vec)
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_linalg); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 565, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_norm); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 565, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_21))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_21);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_21);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_21, function);
            }
          }
          __pyx_t_32 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_21, __pyx_t_5, __pyx_v_radial_vec) : __Pyx_PyObject_CallOneArg(__pyx_t_21, __pyx_v_radial_vec);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 565, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_radial_vec, __pyx_t_32); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 565, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __Pyx_DECREF_SET(__pyx_v_radial_vec, __pyx_t_21);
          __pyx_t_21 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":566
 *                     # normalize all of these
 *                     radial_vec /= linalg.norm(radial_vec)
 *                     nradial_vec /= linalg.norm(nradial_vec)             # <<<<<<<<<<<<<<
 * 
 *                     # count the corners that are inside the other cone (for both ways)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_linalg); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_32)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_32);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
            }
          }
          __pyx_t_21 = (__pyx_t_32) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_32, __pyx_v_nradial_vec) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_nradial_vec);
          __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;
          if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_nradial_vec, __pyx_t_21); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __Pyx_DECREF_SET(__pyx_v_nradial_vec, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":570
 *                     # count the corners that are inside the other cone (for both ways)
 *                     # CTNG:outsidecorners
 *                     corner_pts = [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec, pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec]             # <<<<<<<<<<<<<<
 *                     my_corner_count = count_outside(neighbor_left, [corner_pts[0], corner_pts[1]], 0)
 *                     corner_count = my_corner_count + count_outside(cone, [corner_pts[2], corner_pts[3]], 0)
 */
          __pyx_t_5 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_21 = PyNumber_Multiply(__pyx_t_5, __pyx_v_radial_vec); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Add(__pyx_v_pt1, __pyx_t_21); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __pyx_t_32 = PyNumber_Multiply(__pyx_t_21, __pyx_v_radial_vec); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
          __pyx_t_21 = PyNumber_Subtract(__pyx_v_pt1, __pyx_t_32); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_21);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __pyx_t_17 = PyNumber_Multiply(__pyx_t_32, __pyx_v_nradial_vec); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = PyNumber_Add(__pyx_v_pt1, __pyx_t_17); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_33 = PyNumber_Multiply(__pyx_t_17, __pyx_v_nradial_vec); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyNumber_Subtract(__pyx_v_pt1, __pyx_t_33); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          __pyx_t_33 = PyList_New(4); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 570, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __Pyx_GIVEREF(__pyx_t_5);
          PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_21);
          PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_21);
          __Pyx_GIVEREF(__pyx_t_32);
          PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_32);
          __Pyx_GIVEREF(__pyx_t_17);
          PyList_SET_ITEM(__pyx_t_33, 3, __pyx_t_17);
          __pyx_t_5 = 0;
          __pyx_t_21 = 0;
          __pyx_t_32 = 0;
          __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_corner_pts, ((PyObject*)__pyx_t_33));
          __pyx_t_33 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":571
 *                     # CTNG:outsidecorners
 *                     corner_pts = [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec, pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec]
 *                     my_corner_count = count_outside(neighbor_left, [corner_pts[0], corner_pts[1]], 0)             # <<<<<<<<<<<<<<
 *                     corner_count = my_corner_count + count_outside(cone, [corner_pts[2], corner_pts[3]], 0)
 * 
 */
          __pyx_t_33 = PyList_New(2); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 571, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_corner_pts, 0));
          __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_corner_pts, 0));
          PyList_SET_ITEM(__pyx_t_33, 0, PyList_GET_ITEM(__pyx_v_corner_pts, 0));
          __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_corner_pts, 1));
          __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_corner_pts, 1));
          PyList_SET_ITEM(__pyx_t_33, 1, PyList_GET_ITEM(__pyx_v_corner_pts, 1));
          __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_neighbor_left, ((PyObject*)__pyx_t_33), 0.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 571, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          __Pyx_XDECREF_SET(__pyx_v_my_corner_count, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":572
 *                     corner_pts = [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec, pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec]
 *                     my_corner_count = count_outside(neighbor_left, [corner_pts[0], corner_pts[1]], 0)
 *                     corner_count = my_corner_count + count_outside(cone, [corner_pts[2], corner_pts[3]], 0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_corner_pts, 2));
          __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_corner_pts, 2));
          PyList_SET_ITEM(__pyx_t_17, 0, PyList_GET_ITEM(__pyx_v_corner_pts, 2));
          __Pyx_INCREF(PyList_GET_ITEM(__pyx_v_corner_pts, 3));
          __Pyx_GIVEREF(PyList_GET_ITEM(__pyx_v_corner_pts, 3));
          PyList_SET_ITEM(__pyx_t_17, 1, PyList_GET_ITEM(__pyx_v_corner_pts, 3));
          __pyx_t_33 = __Pyx_PyInt_From_int(__pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_cone, ((PyObject*)__pyx_t_17), 0.0)); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = PyNumber_Add(__pyx_v_my_corner_count, __pyx_t_33); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 572, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          __Pyx_XDECREF_SET(__pyx_v_corner_count, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":579
 *     #                if corner_count not in (1, 2, 3, 4):
 *     #                    print 'corner_count: ', corner_count, [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec] + [pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec]
 *                     if corner_count == 2:             # <<<<<<<<<<<<<<
 *                         # CTNG:2outside
 *                         # add clipped sphere; same rule if sharp or mild turn
 */
          __pyx_t_17 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 579, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":582
 *                         # CTNG:2outside
 *                         # add clipped sphere; same rule if sharp or mild turn
 *                         objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)             # <<<<<<<<<<<<<<
 *                         with cython.wraparound(True):
 *                             joingroup.append(objects[-1])
 */
            __pyx_t_17 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_join_outside(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2, __pyx_v_dx); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 582, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_33 = PyNumber_InPlaceAdd(__pyx_v_objects, __pyx_t_17); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 582, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_33);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_DECREF_SET(__pyx_v_objects, ((PyObject*)__pyx_t_33));
            __pyx_t_33 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":584
 *                         objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)
 *                         with cython.wraparound(True):
 *                             joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                             obj_pts_dict[objects[-1]] = corner_pts
 *                     elif corner_count == 3:
 */
            __pyx_t_33 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 584, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_33);
            __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_33); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 584, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":585
 *                         with cython.wraparound(True):
 *                             joingroup.append(objects[-1])
 *                             obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                     elif corner_count == 3:
 *                         sp = Sphere(x1, y1, z1, r1)
 */
            __pyx_t_33 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 585, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_33);
            if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_33, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 585, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":579
 *     #                if corner_count not in (1, 2, 3, 4):
 *     #                    print 'corner_count: ', corner_count, [pt1 + r1 * radial_vec, pt1 - r1 * radial_vec] + [pt1 + r1 * nradial_vec, pt1 - r1 * nradial_vec]
 *                     if corner_count == 2:             # <<<<<<<<<<<<<<
 *                         # CTNG:2outside
 *                         # add clipped sphere; same rule if sharp or mild turn
 */
            goto __pyx_L110;
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":586
 *                             joingroup.append(objects[-1])
 *                             obj_pts_dict[objects[-1]] = corner_pts
 *                     elif corner_count == 3:             # <<<<<<<<<<<<<<
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:
 */
          __pyx_t_33 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 586, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_33);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_33); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 586, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":587
 *                             obj_pts_dict[objects[-1]] = corner_pts
 *                     elif corner_count == 3:
 *                         sp = Sphere(x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *                         if sharp_turn:
 *                             # CTNG:3outobtuse
 */
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_32 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_21);
            __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_11 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 587, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_9 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_9)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_9);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_8 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_32, __pyx_t_21, __pyx_t_5, __pyx_t_11};
              __pyx_t_33 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 587, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_33);
              __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[5] = {__pyx_t_9, __pyx_t_32, __pyx_t_21, __pyx_t_5, __pyx_t_11};
              __pyx_t_33 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 587, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
              __Pyx_GOTREF(__pyx_t_33);
              __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            } else
            #endif
            {
              __pyx_t_34 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 587, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_34);
              if (__pyx_t_9) {
                __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_34, 0, __pyx_t_9); __pyx_t_9 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_32);
              PyTuple_SET_ITEM(__pyx_t_34, 0+__pyx_t_8, __pyx_t_32);
              __Pyx_GIVEREF(__pyx_t_21);
              PyTuple_SET_ITEM(__pyx_t_34, 1+__pyx_t_8, __pyx_t_21);
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_34, 2+__pyx_t_8, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_34, 3+__pyx_t_8, __pyx_t_11);
              __pyx_t_32 = 0;
              __pyx_t_21 = 0;
              __pyx_t_5 = 0;
              __pyx_t_11 = 0;
              __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_34, NULL); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 587, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_33);
            __pyx_t_33 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":588
 *                     elif corner_count == 3:
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:             # <<<<<<<<<<<<<<
 *                             # CTNG:3outobtuse
 *                             if my_corner_count == 1:
 */
            __pyx_t_2 = (__pyx_v_sharp_turn != 0);
            if (__pyx_t_2) {

              /* "neuron/rxd/geometry3d/ctng.pyx":590
 *                         if sharp_turn:
 *                             # CTNG:3outobtuse
 *                             if my_corner_count == 1:             # <<<<<<<<<<<<<<
 *                                 sp.set_clip([Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])
 *                             else:
 */
              __pyx_t_33 = __Pyx_PyInt_EqObjC(__pyx_v_my_corner_count, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 590, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_33); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 590, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
              if (__pyx_t_2) {

                /* "neuron/rxd/geometry3d/ctng.pyx":591
 *                             # CTNG:3outobtuse
 *                             if my_corner_count == 1:
 *                                 sp.set_clip([Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])             # <<<<<<<<<<<<<<
 *                             else:
 *                                 sp.set_clip([Plane(x1, y1, z1, axis[0], axis[1], axis[2])])
 */
                __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_32 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_31 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_10 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_13 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __pyx_t_9 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
                  __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_11);
                  if (likely(__pyx_t_9)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                    __Pyx_INCREF(__pyx_t_9);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_11, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_5, __pyx_t_21, __pyx_t_32, __pyx_t_31, __pyx_t_10, __pyx_t_13};
                  __pyx_t_34 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 591, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_5, __pyx_t_21, __pyx_t_32, __pyx_t_31, __pyx_t_10, __pyx_t_13};
                  __pyx_t_34 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 591, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                } else
                #endif
                {
                  __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  if (__pyx_t_9) {
                    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_9); __pyx_t_9 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_5);
                  PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_t_5);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_t_21);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_31);
                  PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_t_31);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, __pyx_t_13);
                  __pyx_t_5 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_31 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = 0;
                  __pyx_t_34 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 591, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                }
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __pyx_t_11 = PyList_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_34);
                PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_34);
                __pyx_t_34 = 0;
                __pyx_t_34 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                  __pyx_t_34 = PyMethod_GET_SELF(__pyx_t_17);
                  if (likely(__pyx_t_34)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                    __Pyx_INCREF(__pyx_t_34);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_17, function);
                  }
                }
                __pyx_t_33 = (__pyx_t_34) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_34, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_11);
                __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 591, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":590
 *                         if sharp_turn:
 *                             # CTNG:3outobtuse
 *                             if my_corner_count == 1:             # <<<<<<<<<<<<<<
 *                                 sp.set_clip([Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])
 *                             else:
 */
                goto __pyx_L112;
              }

              /* "neuron/rxd/geometry3d/ctng.pyx":593
 *                                 sp.set_clip([Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])
 *                             else:
 *                                 sp.set_clip([Plane(x1, y1, z1, axis[0], axis[1], axis[2])])             # <<<<<<<<<<<<<<
 *                             objects.append(sp)
 *                             with cython.wraparound(True):
 */
              /*else*/ {
                __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_GetModuleGlobalName(__pyx_t_34, __pyx_n_s_Plane); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_31 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_32 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_5 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_34))) {
                  __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_34);
                  if (likely(__pyx_t_5)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_34);
                    __Pyx_INCREF(__pyx_t_5);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_34, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_34)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_5, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_31, __pyx_t_32, __pyx_t_21};
                  __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_34, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 593, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_34)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_5, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_31, __pyx_t_32, __pyx_t_21};
                  __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_34, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 593, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                } else
                #endif
                {
                  __pyx_t_9 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 593, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_9);
                  if (__pyx_t_5) {
                    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_13);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_31);
                  PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_8, __pyx_t_31);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_8, __pyx_t_21);
                  __pyx_t_1 = 0;
                  __pyx_t_13 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_31 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_34, __pyx_t_9, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 593, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                }
                __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                __pyx_t_34 = PyList_New(1); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __Pyx_GIVEREF(__pyx_t_11);
                PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_11);
                __pyx_t_11 = 0;
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_17);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_17, function);
                  }
                }
                __pyx_t_33 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_11, __pyx_t_34) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_34);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 593, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
              }
              __pyx_L112:;

              /* "neuron/rxd/geometry3d/ctng.pyx":594
 *                             else:
 *                                 sp.set_clip([Plane(x1, y1, z1, axis[0], axis[1], axis[2])])
 *                             objects.append(sp)             # <<<<<<<<<<<<<<
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 */
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 594, __pyx_L1_error)

              /* "neuron/rxd/geometry3d/ctng.pyx":596
 *                             objects.append(sp)
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                         else:
 */
              __pyx_t_33 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 596, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_33); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 596, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":597
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                         else:
 *                             # CTNG:3outacute
 */
              __pyx_t_33 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 597, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_33, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 597, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":588
 *                     elif corner_count == 3:
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:             # <<<<<<<<<<<<<<
 *                             # CTNG:3outobtuse
 *                             if my_corner_count == 1:
 */
              goto __pyx_L111;
            }

            /* "neuron/rxd/geometry3d/ctng.pyx":600
 *                         else:
 *                             # CTNG:3outacute
 *                             objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)             # <<<<<<<<<<<<<<
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 */
            /*else*/ {
              __pyx_t_33 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_join_outside(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2, __pyx_v_dx); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 600, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __pyx_t_17 = PyNumber_InPlaceAdd(__pyx_v_objects, __pyx_t_33); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 600, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
              __Pyx_DECREF_SET(__pyx_v_objects, ((PyObject*)__pyx_t_17));
              __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":602
 *                             objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                                 if my_corner_count == 1:
 */
              __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 602, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 602, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":603
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                                 if my_corner_count == 1:
 *                                     objects.append(sp)
 */
              __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 603, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_17, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 603, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":604
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                                 if my_corner_count == 1:             # <<<<<<<<<<<<<<
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 */
              __pyx_t_17 = __Pyx_PyInt_EqObjC(__pyx_v_my_corner_count, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 604, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 604, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (__pyx_t_2) {

                /* "neuron/rxd/geometry3d/ctng.pyx":605
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                                 if my_corner_count == 1:
 *                                     objects.append(sp)             # <<<<<<<<<<<<<<
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])
 */
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 605, __pyx_L1_error)

                /* "neuron/rxd/geometry3d/ctng.pyx":606
 *                                 if my_corner_count == 1:
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])             # <<<<<<<<<<<<<<
 *                                     joingroup.append(objects[-1])
 *                                     obj_pts_dict[objects[-1]] = corner_pts
 */
                __pyx_t_33 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __pyx_t_34 = __Pyx_PyObject_GetAttrStr(__pyx_t_33, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_9 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_32 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_31 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_10 = PyNumber_Negative(__pyx_t_31); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __pyx_t_31 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_13 = PyNumber_Negative(__pyx_t_31); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __pyx_t_31 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_1 = PyNumber_Negative(__pyx_t_31); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __pyx_t_31 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
                  __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_11);
                  if (likely(__pyx_t_31)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                    __Pyx_INCREF(__pyx_t_31);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_11, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_31, __pyx_t_9, __pyx_t_21, __pyx_t_32, __pyx_t_10, __pyx_t_13, __pyx_t_1};
                  __pyx_t_33 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_GOTREF(__pyx_t_33);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_31, __pyx_t_9, __pyx_t_21, __pyx_t_32, __pyx_t_10, __pyx_t_13, __pyx_t_1};
                  __pyx_t_33 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_GOTREF(__pyx_t_33);
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                } else
                #endif
                {
                  __pyx_t_5 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  if (__pyx_t_31) {
                    __Pyx_GIVEREF(__pyx_t_31); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_31); __pyx_t_31 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_8, __pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_8, __pyx_t_21);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_5, 3+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_5, 4+__pyx_t_8, __pyx_t_13);
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_5, 5+__pyx_t_8, __pyx_t_1);
                  __pyx_t_9 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = 0;
                  __pyx_t_1 = 0;
                  __pyx_t_33 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_5, NULL); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_33);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                }
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Plane); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_13 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_32 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_31 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
                  __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_5);
                  if (likely(__pyx_t_31)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                    __Pyx_INCREF(__pyx_t_31);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_5, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_31, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_21, __pyx_t_9};
                  __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_31, __pyx_t_1, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_21, __pyx_t_9};
                  __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                } else
                #endif
                {
                  __pyx_t_27 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_27);
                  if (__pyx_t_31) {
                    __Pyx_GIVEREF(__pyx_t_31); PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_31); __pyx_t_31 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_27, 0+__pyx_t_8, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_27, 1+__pyx_t_8, __pyx_t_13);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_27, 2+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_27, 3+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_27, 4+__pyx_t_8, __pyx_t_21);
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_27, 5+__pyx_t_8, __pyx_t_9);
                  __pyx_t_1 = 0;
                  __pyx_t_13 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_9 = 0;
                  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_27, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 606, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                }
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_GIVEREF(__pyx_t_33);
                PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_33);
                __Pyx_GIVEREF(__pyx_t_11);
                PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_11);
                __pyx_t_33 = 0;
                __pyx_t_11 = 0;
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_34))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_34);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_34);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_34, function);
                  }
                }
                __pyx_t_17 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_34, __pyx_t_11, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_34, __pyx_t_5);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 606, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":607
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                     obj_pts_dict[objects[-1]] = corner_pts
 *                                 else:
 */
                __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 607, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 607, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":608
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])
 *                                     obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     objects.append(sp)
 */
                __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 608, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_17, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 608, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":604
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                                 if my_corner_count == 1:             # <<<<<<<<<<<<<<
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 */
                goto __pyx_L113;
              }

              /* "neuron/rxd/geometry3d/ctng.pyx":610
 *                                     obj_pts_dict[objects[-1]] = corner_pts
 *                                 else:
 *                                     objects.append(sp)             # <<<<<<<<<<<<<<
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])
 */
              /*else*/ {
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 610, __pyx_L1_error)

                /* "neuron/rxd/geometry3d/ctng.pyx":611
 *                                 else:
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])             # <<<<<<<<<<<<<<
 *                                     joingroup.append(objects[-1])
 *                                     obj_pts_dict[objects[-1]] = corner_pts
 */
                __pyx_t_34 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_34, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_33 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __pyx_t_27 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_32 = PyNumber_Negative(__pyx_t_21); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_10 = PyNumber_Negative(__pyx_t_21); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __pyx_t_21 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_13 = PyNumber_Negative(__pyx_t_21); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __pyx_t_21 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
                  __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_11);
                  if (likely(__pyx_t_21)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                    __Pyx_INCREF(__pyx_t_21);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_11, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_33, __pyx_t_27, __pyx_t_9, __pyx_t_32, __pyx_t_10, __pyx_t_13};
                  __pyx_t_34 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_33, __pyx_t_27, __pyx_t_9, __pyx_t_32, __pyx_t_10, __pyx_t_13};
                  __pyx_t_34 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                } else
                #endif
                {
                  __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  if (__pyx_t_21) {
                    __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_21); __pyx_t_21 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_33);
                  PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_t_33);
                  __Pyx_GIVEREF(__pyx_t_27);
                  PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_t_27);
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, __pyx_t_13);
                  __pyx_t_33 = 0;
                  __pyx_t_27 = 0;
                  __pyx_t_9 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_13 = 0;
                  __pyx_t_34 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_1, NULL); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_34);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                }
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_32 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_9);
                __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_t_33 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __pyx_t_21 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                  __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_1);
                  if (likely(__pyx_t_21)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                    __Pyx_INCREF(__pyx_t_21);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_1, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_9, __pyx_t_27, __pyx_t_33};
                  __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_9, __pyx_t_27, __pyx_t_33};
                  __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                } else
                #endif
                {
                  __pyx_t_31 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_31);
                  if (__pyx_t_21) {
                    __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_21); __pyx_t_21 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_13);
                  PyTuple_SET_ITEM(__pyx_t_31, 0+__pyx_t_8, __pyx_t_13);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_31, 1+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_32);
                  PyTuple_SET_ITEM(__pyx_t_31, 2+__pyx_t_8, __pyx_t_32);
                  __Pyx_GIVEREF(__pyx_t_9);
                  PyTuple_SET_ITEM(__pyx_t_31, 3+__pyx_t_8, __pyx_t_9);
                  __Pyx_GIVEREF(__pyx_t_27);
                  PyTuple_SET_ITEM(__pyx_t_31, 4+__pyx_t_8, __pyx_t_27);
                  __Pyx_GIVEREF(__pyx_t_33);
                  PyTuple_SET_ITEM(__pyx_t_31, 5+__pyx_t_8, __pyx_t_33);
                  __pyx_t_13 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_32 = 0;
                  __pyx_t_9 = 0;
                  __pyx_t_27 = 0;
                  __pyx_t_33 = 0;
                  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_31, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 611, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                }
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_34);
                PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_34);
                __Pyx_GIVEREF(__pyx_t_11);
                PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_11);
                __pyx_t_34 = 0;
                __pyx_t_11 = 0;
                __pyx_t_11 = NULL;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                  __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
                  if (likely(__pyx_t_11)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                    __Pyx_INCREF(__pyx_t_11);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_5, function);
                  }
                }
                __pyx_t_17 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_11, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
                __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 611, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":612
 *                                     objects.append(sp)
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                     obj_pts_dict[objects[-1]] = corner_pts
 * 
 */
                __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 612, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 612, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":613
 *                                     objects[-1].set_clip([Plane(x0, y0, z0, -axis[0], -axis[1], -axis[2]), Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2])])
 *                                     joingroup.append(objects[-1])
 *                                     obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 613, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_17, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 613, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              }
              __pyx_L113:;
            }
            __pyx_L111:;

            /* "neuron/rxd/geometry3d/ctng.pyx":586
 *                             joingroup.append(objects[-1])
 *                             obj_pts_dict[objects[-1]] = corner_pts
 *                     elif corner_count == 3:             # <<<<<<<<<<<<<<
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:
 */
            goto __pyx_L110;
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":617
 * 
 * 
 *                     elif corner_count == 4:             # <<<<<<<<<<<<<<
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:
 */
          __pyx_t_17 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 617, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          if (__pyx_t_2) {

            /* "neuron/rxd/geometry3d/ctng.pyx":618
 * 
 *                     elif corner_count == 4:
 *                         sp = Sphere(x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *                         if sharp_turn:
 *                             # CTNG:4outobtuse
 */
            __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_11 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __pyx_t_34 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_34);
            __pyx_t_31 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 618, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_33 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
              __pyx_t_33 = PyMethod_GET_SELF(__pyx_t_5);
              if (likely(__pyx_t_33)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                __Pyx_INCREF(__pyx_t_33);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_5, function);
                __pyx_t_8 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[5] = {__pyx_t_33, __pyx_t_1, __pyx_t_11, __pyx_t_34, __pyx_t_31};
              __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 618, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_33); __pyx_t_33 = 0;
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
              PyObject *__pyx_temp[5] = {__pyx_t_33, __pyx_t_1, __pyx_t_11, __pyx_t_34, __pyx_t_31};
              __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 4+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 618, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_33); __pyx_t_33 = 0;
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            } else
            #endif
            {
              __pyx_t_27 = PyTuple_New(4+__pyx_t_8); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 618, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_27);
              if (__pyx_t_33) {
                __Pyx_GIVEREF(__pyx_t_33); PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_33); __pyx_t_33 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_1);
              PyTuple_SET_ITEM(__pyx_t_27, 0+__pyx_t_8, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_11);
              PyTuple_SET_ITEM(__pyx_t_27, 1+__pyx_t_8, __pyx_t_11);
              __Pyx_GIVEREF(__pyx_t_34);
              PyTuple_SET_ITEM(__pyx_t_27, 2+__pyx_t_8, __pyx_t_34);
              __Pyx_GIVEREF(__pyx_t_31);
              PyTuple_SET_ITEM(__pyx_t_27, 3+__pyx_t_8, __pyx_t_31);
              __pyx_t_1 = 0;
              __pyx_t_11 = 0;
              __pyx_t_34 = 0;
              __pyx_t_31 = 0;
              __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_27, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 618, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
            }
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_sp, __pyx_t_17);
            __pyx_t_17 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":619
 *                     elif corner_count == 4:
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:             # <<<<<<<<<<<<<<
 *                             # CTNG:4outobtuse
 *                             # join with the portions of a sphere that are outside at least one of the planes
 */
            __pyx_t_2 = (__pyx_v_sharp_turn != 0);
            if (__pyx_t_2) {

              /* "neuron/rxd/geometry3d/ctng.pyx":622
 *                             # CTNG:4outobtuse
 *                             # join with the portions of a sphere that are outside at least one of the planes
 *                             sp.set_clip([Union([             # <<<<<<<<<<<<<<
 *                                 Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
              __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sp, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Union); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);

              /* "neuron/rxd/geometry3d/ctng.pyx":623
 *                             # join with the portions of a sphere that are outside at least one of the planes
 *                             sp.set_clip([Union([
 *                                 Plane(x1, y1, z1, axis[0], axis[1], axis[2]),             # <<<<<<<<<<<<<<
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *                             objects.append(sp)
 */
              __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Plane); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_33 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __pyx_t_9 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_32 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_32);
              __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 623, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_21 = NULL;
              __pyx_t_8 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
                __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_11);
                if (likely(__pyx_t_21)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                  __Pyx_INCREF(__pyx_t_21);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_11, function);
                  __pyx_t_8 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_11)) {
                PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_33, __pyx_t_9, __pyx_t_32, __pyx_t_10, __pyx_t_13};
                __pyx_t_34 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 623, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_GOTREF(__pyx_t_34);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
                PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_33, __pyx_t_9, __pyx_t_32, __pyx_t_10, __pyx_t_13};
                __pyx_t_34 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 623, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_GOTREF(__pyx_t_34);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
              } else
              #endif
              {
                __pyx_t_20 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 623, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_20);
                if (__pyx_t_21) {
                  __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_21); __pyx_t_21 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_1);
                PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_8, __pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_33);
                PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_8, __pyx_t_33);
                __Pyx_GIVEREF(__pyx_t_9);
                PyTuple_SET_ITEM(__pyx_t_20, 2+__pyx_t_8, __pyx_t_9);
                __Pyx_GIVEREF(__pyx_t_32);
                PyTuple_SET_ITEM(__pyx_t_20, 3+__pyx_t_8, __pyx_t_32);
                __Pyx_GIVEREF(__pyx_t_10);
                PyTuple_SET_ITEM(__pyx_t_20, 4+__pyx_t_8, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_13);
                PyTuple_SET_ITEM(__pyx_t_20, 5+__pyx_t_8, __pyx_t_13);
                __pyx_t_1 = 0;
                __pyx_t_33 = 0;
                __pyx_t_9 = 0;
                __pyx_t_32 = 0;
                __pyx_t_10 = 0;
                __pyx_t_13 = 0;
                __pyx_t_34 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_20, NULL); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 623, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              }
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":624
 *                             sp.set_clip([Union([
 *                                 Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])             # <<<<<<<<<<<<<<
 *                             objects.append(sp)
 *                             with cython.wraparound(True):
 */
              __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_n_s_Plane); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_13 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_13);
              __pyx_t_10 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_10);
              __pyx_t_32 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_32);
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_33 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_1 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_9);
              __pyx_t_21 = PyNumber_Negative(__pyx_t_9); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 624, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
              __pyx_t_9 = NULL;
              __pyx_t_8 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_20))) {
                __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_20);
                if (likely(__pyx_t_9)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
                  __Pyx_INCREF(__pyx_t_9);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_20, function);
                  __pyx_t_8 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_20)) {
                PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_33, __pyx_t_1, __pyx_t_21};
                __pyx_t_11 = __Pyx_PyFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 624, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_20)) {
                PyObject *__pyx_temp[7] = {__pyx_t_9, __pyx_t_13, __pyx_t_10, __pyx_t_32, __pyx_t_33, __pyx_t_1, __pyx_t_21};
                __pyx_t_11 = __Pyx_PyCFunction_FastCall(__pyx_t_20, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 624, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              } else
              #endif
              {
                __pyx_t_29 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 624, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_29);
                if (__pyx_t_9) {
                  __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_9); __pyx_t_9 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_13);
                PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_8, __pyx_t_13);
                __Pyx_GIVEREF(__pyx_t_10);
                PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_8, __pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_32);
                PyTuple_SET_ITEM(__pyx_t_29, 2+__pyx_t_8, __pyx_t_32);
                __Pyx_GIVEREF(__pyx_t_33);
                PyTuple_SET_ITEM(__pyx_t_29, 3+__pyx_t_8, __pyx_t_33);
                __Pyx_GIVEREF(__pyx_t_1);
                PyTuple_SET_ITEM(__pyx_t_29, 4+__pyx_t_8, __pyx_t_1);
                __Pyx_GIVEREF(__pyx_t_21);
                PyTuple_SET_ITEM(__pyx_t_29, 5+__pyx_t_8, __pyx_t_21);
                __pyx_t_13 = 0;
                __pyx_t_10 = 0;
                __pyx_t_32 = 0;
                __pyx_t_33 = 0;
                __pyx_t_1 = 0;
                __pyx_t_21 = 0;
                __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_20, __pyx_t_29, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 624, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
              }
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":622
 *                             # CTNG:4outobtuse
 *                             # join with the portions of a sphere that are outside at least one of the planes
 *                             sp.set_clip([Union([             # <<<<<<<<<<<<<<
 *                                 Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 */
              __pyx_t_20 = PyList_New(2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_20);
              __Pyx_GIVEREF(__pyx_t_34);
              PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_34);
              __Pyx_GIVEREF(__pyx_t_11);
              PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_11);
              __pyx_t_34 = 0;
              __pyx_t_11 = 0;
              __pyx_t_11 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_11)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_11);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                }
              }
              __pyx_t_27 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_11, __pyx_t_20) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_20);
              __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_27);
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              __pyx_t_31 = PyList_New(1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __Pyx_GIVEREF(__pyx_t_27);
              PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_27);
              __pyx_t_27 = 0;
              __pyx_t_27 = NULL;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
                __pyx_t_27 = PyMethod_GET_SELF(__pyx_t_5);
                if (likely(__pyx_t_27)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
                  __Pyx_INCREF(__pyx_t_27);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_5, function);
                }
              }
              __pyx_t_17 = (__pyx_t_27) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_27, __pyx_t_31) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_31);
              __Pyx_XDECREF(__pyx_t_27); __pyx_t_27 = 0;
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
              if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 622, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":625
 *                                 Plane(x1, y1, z1, axis[0], axis[1], axis[2]),
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2])])])
 *                             objects.append(sp)             # <<<<<<<<<<<<<<
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 */
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_objects, __pyx_v_sp); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 625, __pyx_L1_error)

              /* "neuron/rxd/geometry3d/ctng.pyx":627
 *                             objects.append(sp)
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                         else:
 */
              __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 627, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 627, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":628
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                         else:
 *                             # CTNG:4outacute (+ 1 more)
 */
              __pyx_t_17 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 628, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_17, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 628, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":619
 *                     elif corner_count == 4:
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:             # <<<<<<<<<<<<<<
 *                             # CTNG:4outobtuse
 *                             # join with the portions of a sphere that are outside at least one of the planes
 */
              goto __pyx_L114;
            }

            /* "neuron/rxd/geometry3d/ctng.pyx":632
 *                             # CTNG:4outacute (+ 1 more)
 *                             # join with the portions of a sphere that are outside both planes
 *                             objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)             # <<<<<<<<<<<<<<
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 */
            /*else*/ {
              __pyx_t_17 = __pyx_f_6neuron_3rxd_10geometry3d_4ctng_join_outside(__pyx_v_x0, __pyx_v_y0, __pyx_v_z0, __pyx_v_r0, __pyx_v_x1, __pyx_v_y1, __pyx_v_z1, __pyx_v_r1, __pyx_v_x2, __pyx_v_y2, __pyx_v_z2, __pyx_v_r2, __pyx_v_dx); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 632, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_objects, __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 632, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF_SET(__pyx_v_objects, ((PyObject*)__pyx_t_5));
              __pyx_t_5 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":634
 *                             objects += join_outside(x0, y0, z0, r0, x1, y1, z1, r1, x2, y2, z2, r2, dx)
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])             # <<<<<<<<<<<<<<
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                             # AND clip the cone to not extend pass the union of the neighbor's plane and the neighbor
 */
              __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_joingroup, __pyx_t_5); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 634, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":635
 *                             with cython.wraparound(True):
 *                                 joingroup.append(objects[-1])
 *                                 obj_pts_dict[objects[-1]] = corner_pts             # <<<<<<<<<<<<<<
 *                             # AND clip the cone to not extend pass the union of the neighbor's plane and the neighbor
 *                             if r0 == r1:
 */
              __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_objects, -1L, long, 1, __Pyx_PyInt_From_long, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              if (unlikely(PyDict_SetItem(__pyx_v_obj_pts_dict, __pyx_t_5, __pyx_v_corner_pts) < 0)) __PYX_ERR(0, 635, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":637
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                             # AND clip the cone to not extend pass the union of the neighbor's plane and the neighbor
 *                             if r0 == r1:             # <<<<<<<<<<<<<<
 *                                 neighbor_copy = Cylinder(x0, y0, z0, x1, y1, z1, r0)
 *                             else:
 */
              __pyx_t_2 = ((__pyx_v_r0 == __pyx_v_r1) != 0);
              if (__pyx_t_2) {

                /* "neuron/rxd/geometry3d/ctng.pyx":638
 *                             # AND clip the cone to not extend pass the union of the neighbor's plane and the neighbor
 *                             if r0 == r1:
 *                                 neighbor_copy = Cylinder(x0, y0, z0, x1, y1, z1, r0)             # <<<<<<<<<<<<<<
 *                             else:
 *                                 neighbor_copy = Cone(x0, y0, z0, r0, x1, y1, z1, r1)
 */
                __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Cylinder); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_31 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_27 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_t_20 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_34 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __pyx_t_29 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_29);
                __pyx_t_21 = PyFloat_FromDouble(__pyx_v_r0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 638, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_1 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
                  __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_17);
                  if (likely(__pyx_t_1)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                    __Pyx_INCREF(__pyx_t_1);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_17, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_17)) {
                  PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_t_31, __pyx_t_27, __pyx_t_20, __pyx_t_11, __pyx_t_34, __pyx_t_29, __pyx_t_21};
                  __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
                  PyObject *__pyx_temp[8] = {__pyx_t_1, __pyx_t_31, __pyx_t_27, __pyx_t_20, __pyx_t_11, __pyx_t_34, __pyx_t_29, __pyx_t_21};
                  __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                } else
                #endif
                {
                  __pyx_t_33 = PyTuple_New(7+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_33);
                  if (__pyx_t_1) {
                    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_33, 0, __pyx_t_1); __pyx_t_1 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_31);
                  PyTuple_SET_ITEM(__pyx_t_33, 0+__pyx_t_8, __pyx_t_31);
                  __Pyx_GIVEREF(__pyx_t_27);
                  PyTuple_SET_ITEM(__pyx_t_33, 1+__pyx_t_8, __pyx_t_27);
                  __Pyx_GIVEREF(__pyx_t_20);
                  PyTuple_SET_ITEM(__pyx_t_33, 2+__pyx_t_8, __pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_11);
                  PyTuple_SET_ITEM(__pyx_t_33, 3+__pyx_t_8, __pyx_t_11);
                  __Pyx_GIVEREF(__pyx_t_34);
                  PyTuple_SET_ITEM(__pyx_t_33, 4+__pyx_t_8, __pyx_t_34);
                  __Pyx_GIVEREF(__pyx_t_29);
                  PyTuple_SET_ITEM(__pyx_t_33, 5+__pyx_t_8, __pyx_t_29);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_33, 6+__pyx_t_8, __pyx_t_21);
                  __pyx_t_31 = 0;
                  __pyx_t_27 = 0;
                  __pyx_t_20 = 0;
                  __pyx_t_11 = 0;
                  __pyx_t_34 = 0;
                  __pyx_t_29 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_33, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                }
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_XDECREF_SET(__pyx_v_neighbor_copy, __pyx_t_5);
                __pyx_t_5 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":637
 *                                 obj_pts_dict[objects[-1]] = corner_pts
 *                             # AND clip the cone to not extend pass the union of the neighbor's plane and the neighbor
 *                             if r0 == r1:             # <<<<<<<<<<<<<<
 *                                 neighbor_copy = Cylinder(x0, y0, z0, x1, y1, z1, r0)
 *                             else:
 */
                goto __pyx_L115;
              }

              /* "neuron/rxd/geometry3d/ctng.pyx":640
 *                                 neighbor_copy = Cylinder(x0, y0, z0, x1, y1, z1, r0)
 *                             else:
 *                                 neighbor_copy = Cone(x0, y0, z0, r0, x1, y1, z1, r1)             # <<<<<<<<<<<<<<
 *                             clips.append(Union([
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2]),
 */
              /*else*/ {
                __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Cone); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __pyx_t_33 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_33);
                __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_29 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_29);
                __pyx_t_34 = PyFloat_FromDouble(__pyx_v_r0); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_34);
                __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_20 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_27 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_t_31 = PyFloat_FromDouble(__pyx_v_r1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 640, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_1 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
                  __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_17);
                  if (likely(__pyx_t_1)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                    __Pyx_INCREF(__pyx_t_1);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_17, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_17)) {
                  PyObject *__pyx_temp[9] = {__pyx_t_1, __pyx_t_33, __pyx_t_21, __pyx_t_29, __pyx_t_34, __pyx_t_11, __pyx_t_20, __pyx_t_27, __pyx_t_31};
                  __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
                  PyObject *__pyx_temp[9] = {__pyx_t_1, __pyx_t_33, __pyx_t_21, __pyx_t_29, __pyx_t_34, __pyx_t_11, __pyx_t_20, __pyx_t_27, __pyx_t_31};
                  __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                } else
                #endif
                {
                  __pyx_t_32 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 640, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_32);
                  if (__pyx_t_1) {
                    __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_1); __pyx_t_1 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_33);
                  PyTuple_SET_ITEM(__pyx_t_32, 0+__pyx_t_8, __pyx_t_33);
                  __Pyx_GIVEREF(__pyx_t_21);
                  PyTuple_SET_ITEM(__pyx_t_32, 1+__pyx_t_8, __pyx_t_21);
                  __Pyx_GIVEREF(__pyx_t_29);
                  PyTuple_SET_ITEM(__pyx_t_32, 2+__pyx_t_8, __pyx_t_29);
                  __Pyx_GIVEREF(__pyx_t_34);
                  PyTuple_SET_ITEM(__pyx_t_32, 3+__pyx_t_8, __pyx_t_34);
                  __Pyx_GIVEREF(__pyx_t_11);
                  PyTuple_SET_ITEM(__pyx_t_32, 4+__pyx_t_8, __pyx_t_11);
                  __Pyx_GIVEREF(__pyx_t_20);
                  PyTuple_SET_ITEM(__pyx_t_32, 5+__pyx_t_8, __pyx_t_20);
                  __Pyx_GIVEREF(__pyx_t_27);
                  PyTuple_SET_ITEM(__pyx_t_32, 6+__pyx_t_8, __pyx_t_27);
                  __Pyx_GIVEREF(__pyx_t_31);
                  PyTuple_SET_ITEM(__pyx_t_32, 7+__pyx_t_8, __pyx_t_31);
                  __pyx_t_33 = 0;
                  __pyx_t_21 = 0;
                  __pyx_t_29 = 0;
                  __pyx_t_34 = 0;
                  __pyx_t_11 = 0;
                  __pyx_t_20 = 0;
                  __pyx_t_27 = 0;
                  __pyx_t_31 = 0;
                  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_32, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                }
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_XDECREF_SET(__pyx_v_neighbor_copy, __pyx_t_5);
                __pyx_t_5 = 0;
              }
              __pyx_L115:;

              /* "neuron/rxd/geometry3d/ctng.pyx":641
 *                             else:
 *                                 neighbor_copy = Cone(x0, y0, z0, r0, x1, y1, z1, r1)
 *                             clips.append(Union([             # <<<<<<<<<<<<<<
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2]),
 *                                 Plane(x0, y0, z0, axis[0], axis[1], axis[2])]))
 */
              __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Union); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);

              /* "neuron/rxd/geometry3d/ctng.pyx":642
 *                                 neighbor_copy = Cone(x0, y0, z0, r0, x1, y1, z1, r1)
 *                             clips.append(Union([
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2]),             # <<<<<<<<<<<<<<
 *                                 Plane(x0, y0, z0, axis[0], axis[1], axis[2])]))
 * 
 */
              __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Plane); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              __pyx_t_27 = PyFloat_FromDouble(__pyx_v_x1); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_27);
              __pyx_t_20 = PyFloat_FromDouble(__pyx_v_y1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_11 = PyFloat_FromDouble(__pyx_v_z1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_34 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_34);
              __pyx_t_29 = PyNumber_Negative(__pyx_t_34); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_29);
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
              __pyx_t_34 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_34);
              __pyx_t_21 = PyNumber_Negative(__pyx_t_34); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
              __pyx_t_34 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_34)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_34);
              __pyx_t_33 = PyNumber_Negative(__pyx_t_34); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 642, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __Pyx_DECREF(__pyx_t_34); __pyx_t_34 = 0;
              __pyx_t_34 = NULL;
              __pyx_t_8 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
                __pyx_t_34 = PyMethod_GET_SELF(__pyx_t_31);
                if (likely(__pyx_t_34)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                  __Pyx_INCREF(__pyx_t_34);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_31, function);
                  __pyx_t_8 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[7] = {__pyx_t_34, __pyx_t_27, __pyx_t_20, __pyx_t_11, __pyx_t_29, __pyx_t_21, __pyx_t_33};
                __pyx_t_32 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 642, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_GOTREF(__pyx_t_32);
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                PyObject *__pyx_temp[7] = {__pyx_t_34, __pyx_t_27, __pyx_t_20, __pyx_t_11, __pyx_t_29, __pyx_t_21, __pyx_t_33};
                __pyx_t_32 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 642, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_GOTREF(__pyx_t_32);
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
              } else
              #endif
              {
                __pyx_t_1 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                if (__pyx_t_34) {
                  __Pyx_GIVEREF(__pyx_t_34); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_34); __pyx_t_34 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_27);
                PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_8, __pyx_t_27);
                __Pyx_GIVEREF(__pyx_t_20);
                PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_8, __pyx_t_20);
                __Pyx_GIVEREF(__pyx_t_11);
                PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_8, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_29);
                PyTuple_SET_ITEM(__pyx_t_1, 3+__pyx_t_8, __pyx_t_29);
                __Pyx_GIVEREF(__pyx_t_21);
                PyTuple_SET_ITEM(__pyx_t_1, 4+__pyx_t_8, __pyx_t_21);
                __Pyx_GIVEREF(__pyx_t_33);
                PyTuple_SET_ITEM(__pyx_t_1, 5+__pyx_t_8, __pyx_t_33);
                __pyx_t_27 = 0;
                __pyx_t_20 = 0;
                __pyx_t_11 = 0;
                __pyx_t_29 = 0;
                __pyx_t_21 = 0;
                __pyx_t_33 = 0;
                __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_1, NULL); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 642, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              }
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":643
 *                             clips.append(Union([
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2]),
 *                                 Plane(x0, y0, z0, axis[0], axis[1], axis[2])]))             # <<<<<<<<<<<<<<
 * 
 * #                        join_type = '%d%s' % (corner_count, 's' if sharp_turn else 'm')
 */
              __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Plane); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_33 = PyFloat_FromDouble(__pyx_v_x0); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_33);
              __pyx_t_21 = PyFloat_FromDouble(__pyx_v_y0); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_21);
              __pyx_t_29 = PyFloat_FromDouble(__pyx_v_z0); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_29);
              __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_axis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_axis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_axis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 643, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_27);
              __pyx_t_34 = NULL;
              __pyx_t_8 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                __pyx_t_34 = PyMethod_GET_SELF(__pyx_t_1);
                if (likely(__pyx_t_34)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                  __Pyx_INCREF(__pyx_t_34);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_1, function);
                  __pyx_t_8 = 1;
                }
              }
              #if CYTHON_FAST_PYCALL
              if (PyFunction_Check(__pyx_t_1)) {
                PyObject *__pyx_temp[7] = {__pyx_t_34, __pyx_t_33, __pyx_t_21, __pyx_t_29, __pyx_t_11, __pyx_t_20, __pyx_t_27};
                __pyx_t_31 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 643, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_GOTREF(__pyx_t_31);
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
              } else
              #endif
              #if CYTHON_FAST_PYCCALL
              if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
                PyObject *__pyx_temp[7] = {__pyx_t_34, __pyx_t_33, __pyx_t_21, __pyx_t_29, __pyx_t_11, __pyx_t_20, __pyx_t_27};
                __pyx_t_31 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 643, __pyx_L1_error)
                __Pyx_XDECREF(__pyx_t_34); __pyx_t_34 = 0;
                __Pyx_GOTREF(__pyx_t_31);
                __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
              } else
              #endif
              {
                __pyx_t_10 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 643, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                if (__pyx_t_34) {
                  __Pyx_GIVEREF(__pyx_t_34); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_34); __pyx_t_34 = NULL;
                }
                __Pyx_GIVEREF(__pyx_t_33);
                PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_8, __pyx_t_33);
                __Pyx_GIVEREF(__pyx_t_21);
                PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_8, __pyx_t_21);
                __Pyx_GIVEREF(__pyx_t_29);
                PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_8, __pyx_t_29);
                __Pyx_GIVEREF(__pyx_t_11);
                PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_8, __pyx_t_11);
                __Pyx_GIVEREF(__pyx_t_20);
                PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_8, __pyx_t_20);
                __Pyx_GIVEREF(__pyx_t_27);
                PyTuple_SET_ITEM(__pyx_t_10, 5+__pyx_t_8, __pyx_t_27);
                __pyx_t_33 = 0;
                __pyx_t_21 = 0;
                __pyx_t_29 = 0;
                __pyx_t_11 = 0;
                __pyx_t_20 = 0;
                __pyx_t_27 = 0;
                __pyx_t_31 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 643, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              }
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

              /* "neuron/rxd/geometry3d/ctng.pyx":641
 *                             else:
 *                                 neighbor_copy = Cone(x0, y0, z0, r0, x1, y1, z1, r1)
 *                             clips.append(Union([             # <<<<<<<<<<<<<<
 *                                 Plane(x1, y1, z1, -naxis[0], -naxis[1], -naxis[2]),
 *                                 Plane(x0, y0, z0, axis[0], axis[1], axis[2])]))
 */
              __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_32);
              PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_32);
              __Pyx_GIVEREF(__pyx_t_31);
              PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_31);
              __pyx_t_32 = 0;
              __pyx_t_31 = 0;
              __pyx_t_31 = NULL;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
                __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_17);
                if (likely(__pyx_t_31)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                  __Pyx_INCREF(__pyx_t_31);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_17, function);
                }
              }
              __pyx_t_5 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_31, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_1);
              __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_clips, __pyx_t_5); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 641, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            }
            __pyx_L114:;

            /* "neuron/rxd/geometry3d/ctng.pyx":617
 * 
 * 
 *                     elif corner_count == 4:             # <<<<<<<<<<<<<<
 *                         sp = Sphere(x1, y1, z1, r1)
 *                         if sharp_turn:
 */
          }
          __pyx_L110:;
        }
        __pyx_L109:;

        /* "neuron/rxd/geometry3d/ctng.pyx":530
 *             join_item = None
 *             # process the join on the "left" (end 1)
 *             if neighbor_left is not None:             # <<<<<<<<<<<<<<
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x0, y0, z0, r0 = neighbor_left._x0, neighbor_left._y0, neighbor_left._z0, neighbor_left._r0
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":652
 * 
 * 
 *             if neighbor_right is not None:             # <<<<<<<<<<<<<<
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0
 */
      __pyx_t_2 = (__pyx_v_neighbor_right != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {

        /* "neuron/rxd/geometry3d/ctng.pyx":654
 *             if neighbor_right is not None:
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0             # <<<<<<<<<<<<<<
 *                 if x2 == x3 and y2 == y3 and z2 == z3:
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_x0_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_y0_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_z0_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_r0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 654, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_v_x3 = __pyx_t_14;
        __pyx_v_y3 = __pyx_t_15;
        __Pyx_XDECREF_SET(__pyx_v_z3, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_r3, __pyx_t_17);
        __pyx_t_17 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":655
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0
 *                 if x2 == x3 and y2 == y3 and z2 == z3:             # <<<<<<<<<<<<<<
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1
 *                 pt3 = numpy.array([x3, y3, z3])
 */
        __pyx_t_2 = ((__pyx_v_x2 == __pyx_v_x3) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L118_bool_binop_done;
        }
        __pyx_t_2 = ((__pyx_v_y2 == __pyx_v_y3) != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L118_bool_binop_done;
        }
        __pyx_t_17 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 655, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_17, __pyx_v_z3, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 655, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 655, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_3 = __pyx_t_2;
        __pyx_L118_bool_binop_done:;
        if (__pyx_t_3) {

          /* "neuron/rxd/geometry3d/ctng.pyx":656
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0
 *                 if x2 == x3 and y2 == y3 and z2 == z3:
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1             # <<<<<<<<<<<<<<
 *                 pt3 = numpy.array([x3, y3, z3])
 *                 naxis = (pt3 - pt2) / linalg.norm(pt3 - pt2)
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_x1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_y1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_z1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_neighbor_right, __pyx_n_s_r1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 656, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_v_x3 = __pyx_t_15;
          __pyx_v_y3 = __pyx_t_14;
          __Pyx_DECREF_SET(__pyx_v_z3, __pyx_t_5);
          __pyx_t_5 = 0;
          __Pyx_DECREF_SET(__pyx_v_r3, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":655
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0
 *                 if x2 == x3 and y2 == y3 and z2 == z3:             # <<<<<<<<<<<<<<
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1
 *                 pt3 = numpy.array([x3, y3, z3])
 */
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":657
 *                 if x2 == x3 and y2 == y3 and z2 == z3:
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1
 *                 pt3 = numpy.array([x3, y3, z3])             # <<<<<<<<<<<<<<
 *                 naxis = (pt3 - pt2) / linalg.norm(pt3 - pt2)
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_numpy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyFloat_FromDouble(__pyx_v_x3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_31 = PyFloat_FromDouble(__pyx_v_y3); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_31);
        __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __Pyx_GIVEREF(__pyx_t_5);
        PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_31);
        PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_31);
        __Pyx_INCREF(__pyx_v_z3);
        __Pyx_GIVEREF(__pyx_v_z3);
        PyList_SET_ITEM(__pyx_t_32, 2, __pyx_v_z3);
        __pyx_t_5 = 0;
        __pyx_t_31 = 0;
        __pyx_t_31 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_31)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_31);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
          }
        }
        __pyx_t_17 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_31, __pyx_t_32) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_32);
        __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 657, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_pt3, __pyx_t_17);
        __pyx_t_17 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":658
 *                     x3, y3, z3, r3 = neighbor_right._x1, neighbor_right._y1, neighbor_right._z1, neighbor_right._r1
 *                 pt3 = numpy.array([x3, y3, z3])
 *                 naxis = (pt3 - pt2) / linalg.norm(pt3 - pt2)             # <<<<<<<<<<<<<<
 * 
 *                 # no need to clip if the cones are perfectly aligned
 */
        __pyx_t_17 = PyNumber_Subtract(__pyx_v_pt3, __pyx_v_pt2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_linalg); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_norm); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_31);
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_32 = PyNumber_Subtract(__pyx_v_pt3, __pyx_v_pt2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __pyx_t_5 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_31);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_31, function);
          }
        }
        __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_5, __pyx_t_32) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_32);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
        __pyx_t_31 = __Pyx_PyNumber_Divide(__pyx_t_17, __pyx_t_1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_31);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_naxis, __pyx_t_31);
        __pyx_t_31 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":661
 * 
 *                 # no need to clip if the cones are perfectly aligned
 *                 if any(axis != naxis):             # <<<<<<<<<<<<<<
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)
 */
        __pyx_t_31 = PyObject_RichCompare(__pyx_v_axis, __pyx_v_naxis, Py_NE); __Pyx_XGOTREF(__pyx_t_31); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 661, __pyx_L1_error)
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_any, __pyx_t_31); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
        __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_3) {

          /* "neuron/rxd/geometry3d/ctng.pyx":663
 *                 if any(axis != naxis):
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)             # <<<<<<<<<<<<<<
 *                     radial_vec = numpy.cross(plane_normal, axis)
 *                     radial_vec_norm = linalg.norm(radial_vec)
 */
          __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_numpy); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 663, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_cross); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 663, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          __pyx_t_31 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_31)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_31);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_31, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
            PyObject *__pyx_temp[3] = {__pyx_t_31, __pyx_v_axis, __pyx_v_naxis};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          {
            __pyx_t_32 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            if (__pyx_t_31) {
              __Pyx_GIVEREF(__pyx_t_31); PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_31); __pyx_t_31 = NULL;
            }
            __Pyx_INCREF(__pyx_v_axis);
            __Pyx_GIVEREF(__pyx_v_axis);
            PyTuple_SET_ITEM(__pyx_t_32, 0+__pyx_t_8, __pyx_v_axis);
            __Pyx_INCREF(__pyx_v_naxis);
            __Pyx_GIVEREF(__pyx_v_naxis);
            PyTuple_SET_ITEM(__pyx_t_32, 1+__pyx_t_8, __pyx_v_naxis);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 663, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          }
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF_SET(__pyx_v_plane_normal, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":664
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)
 *                     radial_vec = numpy.cross(plane_normal, axis)             # <<<<<<<<<<<<<<
 *                     radial_vec_norm = linalg.norm(radial_vec)
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_numpy); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_cross); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 664, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_32);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_32, function);
              __pyx_t_8 = 1;
            }
          }
          #if CYTHON_FAST_PYCALL
          if (PyFunction_Check(__pyx_t_32)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_plane_normal, __pyx_v_axis};
            __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          #if CYTHON_FAST_PYCCALL
          if (__Pyx_PyFastCFunction_Check(__pyx_t_32)) {
            PyObject *__pyx_temp[3] = {__pyx_t_17, __pyx_v_plane_normal, __pyx_v_axis};
            __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_GOTREF(__pyx_t_1);
          } else
          #endif
          {
            __pyx_t_31 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            if (__pyx_t_17) {
              __Pyx_GIVEREF(__pyx_t_17); PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_17); __pyx_t_17 = NULL;
            }
            __Pyx_INCREF(__pyx_v_plane_normal);
            __Pyx_GIVEREF(__pyx_v_plane_normal);
            PyTuple_SET_ITEM(__pyx_t_31, 0+__pyx_t_8, __pyx_v_plane_normal);
            __Pyx_INCREF(__pyx_v_axis);
            __Pyx_GIVEREF(__pyx_v_axis);
            PyTuple_SET_ITEM(__pyx_t_31, 1+__pyx_t_8, __pyx_v_axis);
            __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_32, __pyx_t_31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          }
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __Pyx_XDECREF_SET(__pyx_v_radial_vec, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":665
 *                     plane_normal = numpy.cross(axis, naxis)
 *                     radial_vec = numpy.cross(plane_normal, axis)
 *                     radial_vec_norm = linalg.norm(radial_vec)             # <<<<<<<<<<<<<<
 * 
 *                     # we check again because sometimes there are roundoff errors that this catches
 */
          __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_linalg); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 665, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_32, __pyx_n_s_norm); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 665, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_31);
          __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
          __pyx_t_32 = NULL;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
            __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_31);
            if (likely(__pyx_t_32)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
              __Pyx_INCREF(__pyx_t_32);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_31, function);
            }
          }
          __pyx_t_1 = (__pyx_t_32) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_32, __pyx_v_radial_vec) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_radial_vec);
          __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
          __Pyx_XDECREF_SET(__pyx_v_radial_vec_norm, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "neuron/rxd/geometry3d/ctng.pyx":668
 * 
 *                     # we check again because sometimes there are roundoff errors that this catches
 *                     if radial_vec_norm:             # <<<<<<<<<<<<<<
 * 
 *                         # is the turn sharp or not
 */
          __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_radial_vec_norm); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 668, __pyx_L1_error)
          if (__pyx_t_3) {

            /* "neuron/rxd/geometry3d/ctng.pyx":671
 * 
 *                         # is the turn sharp or not
 *                         sharp_turn = numpy.dot(axis, naxis) < 0             # <<<<<<<<<<<<<<
 * 
 *                         nradial_vec = numpy.cross(plane_normal, naxis)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_numpy); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_t_31, __pyx_n_s_dot); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __pyx_t_31 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
              __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_32);
              if (likely(__pyx_t_31)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
                __Pyx_INCREF(__pyx_t_31);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_32, function);
                __pyx_t_8 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_32)) {
              PyObject *__pyx_temp[3] = {__pyx_t_31, __pyx_v_axis, __pyx_v_naxis};
              __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_32)) {
              PyObject *__pyx_temp[3] = {__pyx_t_31, __pyx_v_axis, __pyx_v_naxis};
              __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
              __Pyx_GOTREF(__pyx_t_1);
            } else
            #endif
            {
              __pyx_t_17 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 671, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_17);
              if (__pyx_t_31) {
                __Pyx_GIVEREF(__pyx_t_31); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_31); __pyx_t_31 = NULL;
              }
              __Pyx_INCREF(__pyx_v_axis);
              __Pyx_GIVEREF(__pyx_v_axis);
              PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_8, __pyx_v_axis);
              __Pyx_INCREF(__pyx_v_naxis);
              __Pyx_GIVEREF(__pyx_v_naxis);
              PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_8, __pyx_v_naxis);
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_32, __pyx_t_17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            }
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __pyx_t_32 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_32); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_32); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __pyx_v_sharp_turn = __pyx_t_3;

            /* "neuron/rxd/geometry3d/ctng.pyx":673
 *                         sharp_turn = numpy.dot(axis, naxis) < 0
 * 
 *                         nradial_vec = numpy.cross(plane_normal, naxis)             # <<<<<<<<<<<<<<
 *                         # normalize all of these
 *                         radial_vec /= radial_vec_norm
 */
            __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_numpy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 673, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cross); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 673, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_17);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_17, function);
                __pyx_t_8 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_plane_normal, __pyx_v_naxis};
              __pyx_t_32 = __Pyx_PyFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 673, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_32);
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_17)) {
              PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_v_plane_normal, __pyx_v_naxis};
              __pyx_t_32 = __Pyx_PyCFunction_FastCall(__pyx_t_17, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 673, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_GOTREF(__pyx_t_32);
            } else
            #endif
            {
              __pyx_t_31 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 673, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_31);
              if (__pyx_t_1) {
                __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_1); __pyx_t_1 = NULL;
              }
              __Pyx_INCREF(__pyx_v_plane_normal);
              __Pyx_GIVEREF(__pyx_v_plane_normal);
              PyTuple_SET_ITEM(__pyx_t_31, 0+__pyx_t_8, __pyx_v_plane_normal);
              __Pyx_INCREF(__pyx_v_naxis);
              __Pyx_GIVEREF(__pyx_v_naxis);
              PyTuple_SET_ITEM(__pyx_t_31, 1+__pyx_t_8, __pyx_v_naxis);
              __pyx_t_32 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_31, NULL); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 673, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_32);
              __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            }
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF_SET(__pyx_v_nradial_vec, __pyx_t_32);
            __pyx_t_32 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":675
 *                         nradial_vec = numpy.cross(plane_normal, naxis)
 *                         # normalize all of these
 *                         radial_vec /= radial_vec_norm             # <<<<<<<<<<<<<<
 *                         nradial_vec /= linalg.norm(nradial_vec)
 *                         # count the corners that are inside the other cone (for both ways)
 */
            __pyx_t_32 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_radial_vec, __pyx_v_radial_vec_norm); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 675, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF_SET(__pyx_v_radial_vec, __pyx_t_32);
            __pyx_t_32 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":676
 *                         # normalize all of these
 *                         radial_vec /= radial_vec_norm
 *                         nradial_vec /= linalg.norm(nradial_vec)             # <<<<<<<<<<<<<<
 *                         # count the corners that are inside the other cone (for both ways)
 *                         my_corner_count = count_outside(neighbor_right, [pt2 + r2 * radial_vec, pt2 - r2 * radial_vec], 0)
 */
            __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_linalg); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_norm); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = NULL;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
              __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_31);
              if (likely(__pyx_t_17)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                __Pyx_INCREF(__pyx_t_17);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_31, function);
              }
            }
            __pyx_t_32 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_17, __pyx_v_nradial_vec) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_nradial_vec);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __pyx_t_31 = __Pyx_PyNumber_InPlaceDivide(__pyx_v_nradial_vec, __pyx_t_32); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 676, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __Pyx_DECREF_SET(__pyx_v_nradial_vec, __pyx_t_31);
            __pyx_t_31 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":678
 *                         nradial_vec /= linalg.norm(nradial_vec)
 *                         # count the corners that are inside the other cone (for both ways)
 *                         my_corner_count = count_outside(neighbor_right, [pt2 + r2 * radial_vec, pt2 - r2 * radial_vec], 0)             # <<<<<<<<<<<<<<
 *                         corner_count = my_corner_count + count_outside(cone, [pt2 + r2 * nradial_vec, pt2 - r2 * nradial_vec], 0)
 *                         if corner_count == 2:
 */
            __pyx_t_31 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_32 = PyNumber_Multiply(__pyx_t_31, __pyx_v_radial_vec); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __pyx_t_31 = PyNumber_Add(__pyx_v_pt2, __pyx_t_32); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __pyx_t_32 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __pyx_t_17 = PyNumber_Multiply(__pyx_t_32, __pyx_v_radial_vec); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __pyx_t_32 = PyNumber_Subtract(__pyx_v_pt2, __pyx_t_17); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_GIVEREF(__pyx_t_31);
            PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_31);
            __Pyx_GIVEREF(__pyx_t_32);
            PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_32);
            __pyx_t_31 = 0;
            __pyx_t_32 = 0;
            __pyx_t_32 = __Pyx_PyInt_From_int(__pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_neighbor_right, ((PyObject*)__pyx_t_17), 0.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 678, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF_SET(__pyx_v_my_corner_count, __pyx_t_32);
            __pyx_t_32 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":679
 *                         # count the corners that are inside the other cone (for both ways)
 *                         my_corner_count = count_outside(neighbor_right, [pt2 + r2 * radial_vec, pt2 - r2 * radial_vec], 0)
 *                         corner_count = my_corner_count + count_outside(cone, [pt2 + r2 * nradial_vec, pt2 - r2 * nradial_vec], 0)             # <<<<<<<<<<<<<<
 *                         if corner_count == 2:
 *                             # no clipping; already joined
 */
            __pyx_t_32 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __pyx_t_17 = PyNumber_Multiply(__pyx_t_32, __pyx_v_nradial_vec); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
            __pyx_t_32 = PyNumber_Add(__pyx_v_pt2, __pyx_t_17); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_32);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __pyx_t_31 = PyNumber_Multiply(__pyx_t_17, __pyx_v_nradial_vec); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __pyx_t_17 = PyNumber_Subtract(__pyx_v_pt2, __pyx_t_31); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __pyx_t_31 = PyList_New(2); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_GIVEREF(__pyx_t_32);
            PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_32);
            __Pyx_GIVEREF(__pyx_t_17);
            PyList_SET_ITEM(__pyx_t_31, 1, __pyx_t_17);
            __pyx_t_32 = 0;
            __pyx_t_17 = 0;
            __pyx_t_17 = __Pyx_PyInt_From_int(__pyx_f_6neuron_3rxd_10geometry3d_4ctng_count_outside(__pyx_v_cone, ((PyObject*)__pyx_t_31), 0.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            __pyx_t_31 = PyNumber_Add(__pyx_v_my_corner_count, __pyx_t_17); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 679, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF_SET(__pyx_v_corner_count, __pyx_t_31);
            __pyx_t_31 = 0;

            /* "neuron/rxd/geometry3d/ctng.pyx":680
 *                         my_corner_count = count_outside(neighbor_right, [pt2 + r2 * radial_vec, pt2 - r2 * radial_vec], 0)
 *                         corner_count = my_corner_count + count_outside(cone, [pt2 + r2 * nradial_vec, pt2 - r2 * nradial_vec], 0)
 *                         if corner_count == 2:             # <<<<<<<<<<<<<<
 *                             # no clipping; already joined
 *                             pass
 */
            __pyx_t_31 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_31); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 680, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            if (__pyx_t_3) {
              goto __pyx_L123;
            }

            /* "neuron/rxd/geometry3d/ctng.pyx":683
 *                             # no clipping; already joined
 *                             pass
 *                         elif corner_count == 3:             # <<<<<<<<<<<<<<
 *                             pass
 * 
 */
            __pyx_t_31 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 683, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_31); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 683, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            if (__pyx_t_3) {
              goto __pyx_L123;
            }

            /* "neuron/rxd/geometry3d/ctng.pyx":686
 *                             pass
 * 
 *                         elif corner_count == 4:             # <<<<<<<<<<<<<<
 *                             # CTNG:4outacute (+ 1 more)
 *                             # already joined; just clip (only in mild turn case)
 */
            __pyx_t_31 = __Pyx_PyInt_EqObjC(__pyx_v_corner_count, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 686, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_31);
            __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_31); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 686, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
            if (__pyx_t_3) {

              /* "neuron/rxd/geometry3d/ctng.pyx":689
 *                             # CTNG:4outacute (+ 1 more)
 *                             # already joined; just clip (only in mild turn case)
 *                             if not sharp_turn:             # <<<<<<<<<<<<<<
 *                                 if r2 == r3:
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)
 */
              __pyx_t_3 = ((!(__pyx_v_sharp_turn != 0)) != 0);
              if (__pyx_t_3) {

                /* "neuron/rxd/geometry3d/ctng.pyx":690
 *                             # already joined; just clip (only in mild turn case)
 *                             if not sharp_turn:
 *                                 if r2 == r3:             # <<<<<<<<<<<<<<
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)
 *                                 else:
 */
                __pyx_t_31 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 690, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);
                __pyx_t_17 = PyObject_RichCompare(__pyx_t_31, __pyx_v_r3, Py_EQ); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 690, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 690, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                if (__pyx_t_3) {

                  /* "neuron/rxd/geometry3d/ctng.pyx":691
 *                             if not sharp_turn:
 *                                 if r2 == r3:
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)             # <<<<<<<<<<<<<<
 *                                 else:
 *                                     neighbor_copy = Cone(x2, y2, z2, r2, x3, y3, z3, r3)
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Cylinder); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_31);
                  __pyx_t_32 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_32);
                  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_x3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_y3); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 691, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_27);
                  __pyx_t_20 = NULL;
                  __pyx_t_8 = 0;
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_31);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_31, function);
                      __pyx_t_8 = 1;
                    }
                  }
                  #if CYTHON_FAST_PYCALL
                  if (PyFunction_Check(__pyx_t_31)) {
                    PyObject *__pyx_temp[8] = {__pyx_t_20, __pyx_t_32, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_27, __pyx_v_z3, __pyx_v_r3};
                    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 691, __pyx_L1_error)
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  } else
                  #endif
                  #if CYTHON_FAST_PYCCALL
                  if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                    PyObject *__pyx_temp[8] = {__pyx_t_20, __pyx_t_32, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_27, __pyx_v_z3, __pyx_v_r3};
                    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 7+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 691, __pyx_L1_error)
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  } else
                  #endif
                  {
                    __pyx_t_11 = PyTuple_New(7+__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 691, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_11);
                    if (__pyx_t_20) {
                      __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_20); __pyx_t_20 = NULL;
                    }
                    __Pyx_GIVEREF(__pyx_t_32);
                    PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_8, __pyx_t_32);
                    __Pyx_GIVEREF(__pyx_t_1);
                    PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_8, __pyx_t_1);
                    __Pyx_GIVEREF(__pyx_t_5);
                    PyTuple_SET_ITEM(__pyx_t_11, 2+__pyx_t_8, __pyx_t_5);
                    __Pyx_GIVEREF(__pyx_t_10);
                    PyTuple_SET_ITEM(__pyx_t_11, 3+__pyx_t_8, __pyx_t_10);
                    __Pyx_GIVEREF(__pyx_t_27);
                    PyTuple_SET_ITEM(__pyx_t_11, 4+__pyx_t_8, __pyx_t_27);
                    __Pyx_INCREF(__pyx_v_z3);
                    __Pyx_GIVEREF(__pyx_v_z3);
                    PyTuple_SET_ITEM(__pyx_t_11, 5+__pyx_t_8, __pyx_v_z3);
                    __Pyx_INCREF(__pyx_v_r3);
                    __Pyx_GIVEREF(__pyx_v_r3);
                    PyTuple_SET_ITEM(__pyx_t_11, 6+__pyx_t_8, __pyx_v_r3);
                    __pyx_t_32 = 0;
                    __pyx_t_1 = 0;
                    __pyx_t_5 = 0;
                    __pyx_t_10 = 0;
                    __pyx_t_27 = 0;
                    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_11, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 691, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_XDECREF_SET(__pyx_v_neighbor_copy, __pyx_t_17);
                  __pyx_t_17 = 0;

                  /* "neuron/rxd/geometry3d/ctng.pyx":690
 *                             # already joined; just clip (only in mild turn case)
 *                             if not sharp_turn:
 *                                 if r2 == r3:             # <<<<<<<<<<<<<<
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)
 *                                 else:
 */
                  goto __pyx_L125;
                }

                /* "neuron/rxd/geometry3d/ctng.pyx":693
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)
 *                                 else:
 *                                     neighbor_copy = Cone(x2, y2, z2, r2, x3, y3, z3, r3)             # <<<<<<<<<<<<<<
 *                                 #print 'cc=4: (%g, %g, %g; %g) (%g, %g, %g; %g) (%g, %g, %g; %g) ' % (x1, y1, z1, r1, x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 clips.append(Union([
 */
                /*else*/ {
                  __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Cone); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_31);
                  __pyx_t_11 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_11);
                  __pyx_t_27 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_27);
                  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_10);
                  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_r2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_5);
                  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_32 = PyFloat_FromDouble(__pyx_v_y3); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 693, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_32);
                  __pyx_t_20 = NULL;
                  __pyx_t_8 = 0;
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
                    __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_31);
                    if (likely(__pyx_t_20)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                      __Pyx_INCREF(__pyx_t_20);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_31, function);
                      __pyx_t_8 = 1;
                    }
                  }
                  #if CYTHON_FAST_PYCALL
                  if (PyFunction_Check(__pyx_t_31)) {
                    PyObject *__pyx_temp[9] = {__pyx_t_20, __pyx_t_11, __pyx_t_27, __pyx_t_10, __pyx_t_5, __pyx_t_1, __pyx_t_32, __pyx_v_z3, __pyx_v_r3};
                    __pyx_t_17 = __Pyx_PyFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L1_error)
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  } else
                  #endif
                  #if CYTHON_FAST_PYCCALL
                  if (__Pyx_PyFastCFunction_Check(__pyx_t_31)) {
                    PyObject *__pyx_temp[9] = {__pyx_t_20, __pyx_t_11, __pyx_t_27, __pyx_t_10, __pyx_t_5, __pyx_t_1, __pyx_t_32, __pyx_v_z3, __pyx_v_r3};
                    __pyx_t_17 = __Pyx_PyCFunction_FastCall(__pyx_t_31, __pyx_temp+1-__pyx_t_8, 8+__pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L1_error)
                    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                    __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                    __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                  } else
                  #endif
                  {
                    __pyx_t_29 = PyTuple_New(8+__pyx_t_8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 693, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_29);
                    if (__pyx_t_20) {
                      __Pyx_GIVEREF(__pyx_t_20); PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_20); __pyx_t_20 = NULL;
                    }
                    __Pyx_GIVEREF(__pyx_t_11);
                    PyTuple_SET_ITEM(__pyx_t_29, 0+__pyx_t_8, __pyx_t_11);
                    __Pyx_GIVEREF(__pyx_t_27);
                    PyTuple_SET_ITEM(__pyx_t_29, 1+__pyx_t_8, __pyx_t_27);
                    __Pyx_GIVEREF(__pyx_t_10);
                    PyTuple_SET_ITEM(__pyx_t_29, 2+__pyx_t_8, __pyx_t_10);
                    __Pyx_GIVEREF(__pyx_t_5);
                    PyTuple_SET_ITEM(__pyx_t_29, 3+__pyx_t_8, __pyx_t_5);
                    __Pyx_GIVEREF(__pyx_t_1);
                    PyTuple_SET_ITEM(__pyx_t_29, 4+__pyx_t_8, __pyx_t_1);
                    __Pyx_GIVEREF(__pyx_t_32);
                    PyTuple_SET_ITEM(__pyx_t_29, 5+__pyx_t_8, __pyx_t_32);
                    __Pyx_INCREF(__pyx_v_z3);
                    __Pyx_GIVEREF(__pyx_v_z3);
                    PyTuple_SET_ITEM(__pyx_t_29, 6+__pyx_t_8, __pyx_v_z3);
                    __Pyx_INCREF(__pyx_v_r3);
                    __Pyx_GIVEREF(__pyx_v_r3);
                    PyTuple_SET_ITEM(__pyx_t_29, 7+__pyx_t_8, __pyx_v_r3);
                    __pyx_t_11 = 0;
                    __pyx_t_27 = 0;
                    __pyx_t_10 = 0;
                    __pyx_t_5 = 0;
                    __pyx_t_1 = 0;
                    __pyx_t_32 = 0;
                    __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_29, NULL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 693, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_17);
                    __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
                  }
                  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                  __Pyx_XDECREF_SET(__pyx_v_neighbor_copy, __pyx_t_17);
                  __pyx_t_17 = 0;
                }
                __pyx_L125:;

                /* "neuron/rxd/geometry3d/ctng.pyx":695
 *                                     neighbor_copy = Cone(x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 #print 'cc=4: (%g, %g, %g; %g) (%g, %g, %g; %g) (%g, %g, %g; %g) ' % (x1, y1, z1, r1, x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 clips.append(Union([             # <<<<<<<<<<<<<<
 *                                     Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2]),
 *                                     neighbor_copy]))
 */
                __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Union); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 695, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_31);

                /* "neuron/rxd/geometry3d/ctng.pyx":696
 *                                 #print 'cc=4: (%g, %g, %g; %g) (%g, %g, %g; %g) (%g, %g, %g; %g) ' % (x1, y1, z1, r1, x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 clips.append(Union([
 *                                     Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2]),             # <<<<<<<<<<<<<<
 *                                     neighbor_copy]))
 * 
 */
                __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_Plane); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_1);
                __pyx_t_5 = PyFloat_FromDouble(__pyx_v_y2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_10 = PyFloat_FromDouble(__pyx_v_z2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_27 = __Pyx_GetItemInt(__pyx_v_naxis, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_27);
                __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_naxis, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_20 = __Pyx_GetItemInt(__pyx_v_naxis, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 696, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_20);
                __pyx_t_21 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
                  __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_32);
                  if (likely(__pyx_t_21)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
                    __Pyx_INCREF(__pyx_t_21);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_32, function);
                    __pyx_t_8 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_32)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_27, __pyx_t_11, __pyx_t_20};
                  __pyx_t_29 = __Pyx_PyFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 696, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_29);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_32)) {
                  PyObject *__pyx_temp[7] = {__pyx_t_21, __pyx_t_1, __pyx_t_5, __pyx_t_10, __pyx_t_27, __pyx_t_11, __pyx_t_20};
                  __pyx_t_29 = __Pyx_PyCFunction_FastCall(__pyx_t_32, __pyx_temp+1-__pyx_t_8, 6+__pyx_t_8); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 696, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
                  __Pyx_GOTREF(__pyx_t_29);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
                  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
                } else
                #endif
                {
                  __pyx_t_33 = PyTuple_New(6+__pyx_t_8); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 696, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_33);
                  if (__pyx_t_21) {
                    __Pyx_GIVEREF(__pyx_t_21); PyTuple_SET_ITEM(__pyx_t_33, 0, __pyx_t_21); __pyx_t_21 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_1);
                  PyTuple_SET_ITEM(__pyx_t_33, 0+__pyx_t_8, __pyx_t_1);
                  __Pyx_GIVEREF(__pyx_t_5);
                  PyTuple_SET_ITEM(__pyx_t_33, 1+__pyx_t_8, __pyx_t_5);
                  __Pyx_GIVEREF(__pyx_t_10);
                  PyTuple_SET_ITEM(__pyx_t_33, 2+__pyx_t_8, __pyx_t_10);
                  __Pyx_GIVEREF(__pyx_t_27);
                  PyTuple_SET_ITEM(__pyx_t_33, 3+__pyx_t_8, __pyx_t_27);
                  __Pyx_GIVEREF(__pyx_t_11);
                  PyTuple_SET_ITEM(__pyx_t_33, 4+__pyx_t_8, __pyx_t_11);
                  __Pyx_GIVEREF(__pyx_t_20);
                  PyTuple_SET_ITEM(__pyx_t_33, 5+__pyx_t_8, __pyx_t_20);
                  __pyx_t_1 = 0;
                  __pyx_t_5 = 0;
                  __pyx_t_10 = 0;
                  __pyx_t_27 = 0;
                  __pyx_t_11 = 0;
                  __pyx_t_20 = 0;
                  __pyx_t_29 = __Pyx_PyObject_Call(__pyx_t_32, __pyx_t_33, NULL); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 696, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_29);
                  __Pyx_DECREF(__pyx_t_33); __pyx_t_33 = 0;
                }
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":695
 *                                     neighbor_copy = Cone(x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 #print 'cc=4: (%g, %g, %g; %g) (%g, %g, %g; %g) (%g, %g, %g; %g) ' % (x1, y1, z1, r1, x2, y2, z2, r2, x3, y3, z3, r3)
 *                                 clips.append(Union([             # <<<<<<<<<<<<<<
 *                                     Plane(x2, y2, z2, naxis[0], naxis[1], naxis[2]),
 *                                     neighbor_copy]))
 */
                __pyx_t_32 = PyList_New(2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 695, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_32);
                __Pyx_GIVEREF(__pyx_t_29);
                PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_29);
                __Pyx_INCREF(__pyx_v_neighbor_copy);
                __Pyx_GIVEREF(__pyx_v_neighbor_copy);
                PyList_SET_ITEM(__pyx_t_32, 1, __pyx_v_neighbor_copy);
                __pyx_t_29 = 0;
                __pyx_t_29 = NULL;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
                  __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_31);
                  if (likely(__pyx_t_29)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
                    __Pyx_INCREF(__pyx_t_29);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_31, function);
                  }
                }
                __pyx_t_17 = (__pyx_t_29) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_29, __pyx_t_32) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_t_32);
                __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
                __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
                if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 695, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_17);
                __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
                __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_clips, __pyx_t_17); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 695, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

                /* "neuron/rxd/geometry3d/ctng.pyx":689
 *                             # CTNG:4outacute (+ 1 more)
 *                             # already joined; just clip (only in mild turn case)
 *                             if not sharp_turn:             # <<<<<<<<<<<<<<
 *                                 if r2 == r3:
 *                                     neighbor_copy = Cylinder(x2, y2, z2, x3, y3, z3, r3)
 */
              }

              /* "neuron/rxd/geometry3d/ctng.pyx":686
 *                             pass
 * 
 *                         elif corner_count == 4:             # <<<<<<<<<<<<<<
 *                             # CTNG:4outacute (+ 1 more)
 *                             # already joined; just clip (only in mild turn case)
 */
            }
            __pyx_L123:;

            /* "neuron/rxd/geometry3d/ctng.pyx":668
 * 
 *                     # we check again because sometimes there are roundoff errors that this catches
 *                     if radial_vec_norm:             # <<<<<<<<<<<<<<
 * 
 *                         # is the turn sharp or not
 */
          }

          /* "neuron/rxd/geometry3d/ctng.pyx":661
 * 
 *                 # no need to clip if the cones are perfectly aligned
 *                 if any(axis != naxis):             # <<<<<<<<<<<<<<
 *                     # locate key vectors
 *                     plane_normal = numpy.cross(axis, naxis)
 */
        }

        /* "neuron/rxd/geometry3d/ctng.pyx":652
 * 
 * 
 *             if neighbor_right is not None:             # <<<<<<<<<<<<<<
 *                 # any joins are created on the left pass; the right pass will only do clippings
 *                 x3, y3, z3, r3 = neighbor_right._x0, neighbor_right._y0, neighbor_right._z0, neighbor_right._r0
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":701
 * 
 * 
 *             if clips:             # <<<<<<<<<<<<<<
 *                 int_clip = Intersection(clips)
 *                 cone_clip_db[cone].append(int_clip)
 */
      __pyx_t_3 = (PyList_GET_SIZE(__pyx_v_clips) != 0);
      if (__pyx_t_3) {

        /* "neuron/rxd/geometry3d/ctng.pyx":702
 * 
 *             if clips:
 *                 int_clip = Intersection(clips)             # <<<<<<<<<<<<<<
 *                 cone_clip_db[cone].append(int_clip)
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_31);
        __pyx_t_32 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_31))) {
          __pyx_t_32 = PyMethod_GET_SELF(__pyx_t_31);
          if (likely(__pyx_t_32)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_31);
            __Pyx_INCREF(__pyx_t_32);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_31, function);
          }
        }
        __pyx_t_17 = (__pyx_t_32) ? __Pyx_PyObject_Call2Args(__pyx_t_31, __pyx_t_32, __pyx_v_clips) : __Pyx_PyObject_CallOneArg(__pyx_t_31, __pyx_v_clips);
        __Pyx_XDECREF(__pyx_t_32); __pyx_t_32 = 0;
        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 702, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
        __Pyx_XDECREF_SET(__pyx_v_int_clip, __pyx_t_17);
        __pyx_t_17 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":703
 *             if clips:
 *                 int_clip = Intersection(clips)
 *                 cone_clip_db[cone].append(int_clip)             # <<<<<<<<<<<<<<
 * 
 *         if joingroup:
 */
        __pyx_t_17 = __Pyx_PyDict_GetItem(__pyx_v_cone_clip_db, __pyx_v_cone); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_19 = __Pyx_PyObject_Append(__pyx_t_17, __pyx_v_int_clip); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 703, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":701
 * 
 * 
 *             if clips:             # <<<<<<<<<<<<<<
 *                 int_clip = Intersection(clips)
 *                 cone_clip_db[cone].append(int_clip)
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":525
 *                 joingroup.append(neighbor)
 *         if not right_neighbors: right_neighbors = [None]
 *         for neighbor_left, neighbor_right in itertools.product(left_neighbors, right_neighbors):             # <<<<<<<<<<<<<<
 *             clips = []
 *             # if any join needs to be subject to clips, it goes here
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":705
 *                 cone_clip_db[cone].append(int_clip)
 * 
 *         if joingroup:             # <<<<<<<<<<<<<<
 *             join_groups.append(joingroup)
 * 
 */
    __pyx_t_3 = (PyList_GET_SIZE(__pyx_v_joingroup) != 0);
    if (__pyx_t_3) {

      /* "neuron/rxd/geometry3d/ctng.pyx":706
 * 
 *         if joingroup:
 *             join_groups.append(joingroup)             # <<<<<<<<<<<<<<
 * 
 *     for cone in all_cones:
 */
      __pyx_t_19 = __Pyx_PyList_Append(__pyx_v_join_groups, __pyx_v_joingroup); if (unlikely(__pyx_t_19 == ((int)-1))) __PYX_ERR(0, 706, __pyx_L1_error)

      /* "neuron/rxd/geometry3d/ctng.pyx":705
 *                 cone_clip_db[cone].append(int_clip)
 * 
 *         if joingroup:             # <<<<<<<<<<<<<<
 *             join_groups.append(joingroup)
 * 
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":506
 * #    cdef dict join_counts = {'2m': 0, '2s': 0, '3m': 0, '3s': 0, '4m': 0, '4s': 0, '0m': 0, '0s': 0, '1m': 0, '1s': 0}
 *     join_items_needing_clipped = []
 *     for cone in all_cones:             # <<<<<<<<<<<<<<
 *         joingroup = []
 *         x1, y1, z1, r1 = cone._x0, cone._y0, cone._z0, cone._r0
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":708
 *             join_groups.append(joingroup)
 * 
 *     for cone in all_cones:             # <<<<<<<<<<<<<<
 *         clip = cone_clip_db[cone]
 *         if clip:
 */
  if (unlikely(!__pyx_v_all_cones)) { __Pyx_RaiseUnboundLocalError("all_cones"); __PYX_ERR(0, 708, __pyx_L1_error) }
  __pyx_t_12 = __pyx_v_all_cones; __Pyx_INCREF(__pyx_t_12); __pyx_t_25 = 0;
  for (;;) {
    if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_12)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_25); __Pyx_INCREF(__pyx_t_4); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 708, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_12, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_cone, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":709
 * 
 *     for cone in all_cones:
 *         clip = cone_clip_db[cone]             # <<<<<<<<<<<<<<
 *         if clip:
 *             cone.set_clip([Union(clip)])
 */
    __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_cone_clip_db, __pyx_v_cone); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_clip, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":710
 *     for cone in all_cones:
 *         clip = cone_clip_db[cone]
 *         if clip:             # <<<<<<<<<<<<<<
 *             cone.set_clip([Union(clip)])
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_clip); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 710, __pyx_L1_error)
    if (__pyx_t_3) {

      /* "neuron/rxd/geometry3d/ctng.pyx":711
 *         clip = cone_clip_db[cone]
 *         if clip:
 *             cone.set_clip([Union(clip)])             # <<<<<<<<<<<<<<
 * 
 *     for sec,cones in potential_soma_cones.items():
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_set_clip); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_GetModuleGlobalName(__pyx_t_32, __pyx_n_s_Union); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      __pyx_t_29 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_32))) {
        __pyx_t_29 = PyMethod_GET_SELF(__pyx_t_32);
        if (likely(__pyx_t_29)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_32);
          __Pyx_INCREF(__pyx_t_29);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_32, function);
        }
      }
      __pyx_t_31 = (__pyx_t_29) ? __Pyx_PyObject_Call2Args(__pyx_t_32, __pyx_t_29, __pyx_v_clip) : __Pyx_PyObject_CallOneArg(__pyx_t_32, __pyx_v_clip);
      __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
      if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
      __pyx_t_32 = PyList_New(1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      __Pyx_GIVEREF(__pyx_t_31);
      PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_31);
      __pyx_t_31 = 0;
      __pyx_t_31 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_31 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_31)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_31);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
        }
      }
      __pyx_t_4 = (__pyx_t_31) ? __Pyx_PyObject_Call2Args(__pyx_t_17, __pyx_t_31, __pyx_t_32) : __Pyx_PyObject_CallOneArg(__pyx_t_17, __pyx_t_32);
      __Pyx_XDECREF(__pyx_t_31); __pyx_t_31 = 0;
      __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":710
 *     for cone in all_cones:
 *         clip = cone_clip_db[cone]
 *         if clip:             # <<<<<<<<<<<<<<
 *             cone.set_clip([Union(clip)])
 * 
 */
    }

    /* "neuron/rxd/geometry3d/ctng.pyx":708
 *             join_groups.append(joingroup)
 * 
 *     for cone in all_cones:             # <<<<<<<<<<<<<<
 *         clip = cone_clip_db[cone]
 *         if clip:
 */
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":713
 *             cone.set_clip([Union(clip)])
 * 
 *     for sec,cones in potential_soma_cones.items():             # <<<<<<<<<<<<<<
 *         for cone in cones:
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:
 */
  __pyx_t_12 = __Pyx_PyDict_Items(__pyx_v_potential_soma_cones); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
    __pyx_t_4 = __pyx_t_12; __Pyx_INCREF(__pyx_t_4); __pyx_t_25 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_25 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 713, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_12); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 713, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      } else {
        if (__pyx_t_25 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_12); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 713, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      }
    } else {
      __pyx_t_12 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_12)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 713, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_12);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_12))) || (PyList_CheckExact(__pyx_t_12))) {
      PyObject* sequence = __pyx_t_12;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 713, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_32 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_32 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_32);
      #else
      __pyx_t_17 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_32 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      #endif
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_31 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 713, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_18 = Py_TYPE(__pyx_t_31)->tp_iternext;
      index = 0; __pyx_t_17 = __pyx_t_18(__pyx_t_31); if (unlikely(!__pyx_t_17)) goto __pyx_L133_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_17);
      index = 1; __pyx_t_32 = __pyx_t_18(__pyx_t_31); if (unlikely(!__pyx_t_32)) goto __pyx_L133_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_32);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_31), 2) < 0) __PYX_ERR(0, 713, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      goto __pyx_L134_unpacking_done;
      __pyx_L133_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 713, __pyx_L1_error)
      __pyx_L134_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_sec, __pyx_t_17);
    __pyx_t_17 = 0;
    __Pyx_XDECREF_SET(__pyx_v_cones, __pyx_t_32);
    __pyx_t_32 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":714
 * 
 *     for sec,cones in potential_soma_cones.items():
 *         for cone in cones:             # <<<<<<<<<<<<<<
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:
 *                 cone_segment_dict[(cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1)] = sec.trueparentseg()
 */
    if (likely(PyList_CheckExact(__pyx_v_cones)) || PyTuple_CheckExact(__pyx_v_cones)) {
      __pyx_t_12 = __pyx_v_cones; __Pyx_INCREF(__pyx_t_12); __pyx_t_6 = 0;
      __pyx_t_23 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_v_cones); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_23 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 714, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_23)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_32 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_6); __Pyx_INCREF(__pyx_t_32); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 714, __pyx_L1_error)
          #else
          __pyx_t_32 = PySequence_ITEM(__pyx_t_12, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_32 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_6); __Pyx_INCREF(__pyx_t_32); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(0, 714, __pyx_L1_error)
          #else
          __pyx_t_32 = PySequence_ITEM(__pyx_t_12, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 714, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_32);
          #endif
        }
      } else {
        __pyx_t_32 = __pyx_t_23(__pyx_t_12);
        if (unlikely(!__pyx_t_32)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 714, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_32);
      }
      __Pyx_XDECREF_SET(__pyx_v_cone, __pyx_t_32);
      __pyx_t_32 = 0;

      /* "neuron/rxd/geometry3d/ctng.pyx":715
 *     for sec,cones in potential_soma_cones.items():
 *         for cone in cones:
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:             # <<<<<<<<<<<<<<
 *                 cone_segment_dict[(cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1)] = sec.trueparentseg()
 * 
 */
      __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x0_2); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_32);
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y0_2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z0_2); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_31);
      __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x1); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_29);
      __pyx_t_33 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y1); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_33);
      __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      __pyx_t_11 = PyTuple_New(6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_32);
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_32);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_31);
      PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_31);
      __Pyx_GIVEREF(__pyx_t_29);
      PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_29);
      __Pyx_GIVEREF(__pyx_t_33);
      PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_t_33);
      __Pyx_GIVEREF(__pyx_t_20);
      PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_20);
      __pyx_t_32 = 0;
      __pyx_t_17 = 0;
      __pyx_t_31 = 0;
      __pyx_t_29 = 0;
      __pyx_t_33 = 0;
      __pyx_t_20 = 0;
      __pyx_t_3 = (__Pyx_PyDict_ContainsTF(__pyx_t_11, __pyx_v_cone_segment_dict, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {

        /* "neuron/rxd/geometry3d/ctng.pyx":716
 *         for cone in cones:
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:
 *                 cone_segment_dict[(cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1)] = sec.trueparentseg()             # <<<<<<<<<<<<<<
 * 
 *     #####################################################################
 */
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_sec, __pyx_n_s_trueparentseg); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_33 = NULL;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_20))) {
          __pyx_t_33 = PyMethod_GET_SELF(__pyx_t_20);
          if (likely(__pyx_t_33)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_20);
            __Pyx_INCREF(__pyx_t_33);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_20, function);
          }
        }
        __pyx_t_11 = (__pyx_t_33) ? __Pyx_PyObject_CallOneArg(__pyx_t_20, __pyx_t_33) : __Pyx_PyObject_CallNoArg(__pyx_t_20);
        __Pyx_XDECREF(__pyx_t_33); __pyx_t_33 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x0_2); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        __pyx_t_33 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y0_2); if (unlikely(!__pyx_t_33)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_33);
        __pyx_t_29 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z0_2); if (unlikely(!__pyx_t_29)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_29);
        __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_x1); if (unlikely(!__pyx_t_31)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_31);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_y1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_32 = __Pyx_PyObject_GetAttrStr(__pyx_v_cone, __pyx_n_s_z1); if (unlikely(!__pyx_t_32)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_32);
        __pyx_t_27 = PyTuple_New(6); if (unlikely(!__pyx_t_27)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_27);
        __Pyx_GIVEREF(__pyx_t_20);
        PyTuple_SET_ITEM(__pyx_t_27, 0, __pyx_t_20);
        __Pyx_GIVEREF(__pyx_t_33);
        PyTuple_SET_ITEM(__pyx_t_27, 1, __pyx_t_33);
        __Pyx_GIVEREF(__pyx_t_29);
        PyTuple_SET_ITEM(__pyx_t_27, 2, __pyx_t_29);
        __Pyx_GIVEREF(__pyx_t_31);
        PyTuple_SET_ITEM(__pyx_t_27, 3, __pyx_t_31);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_27, 4, __pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_32);
        PyTuple_SET_ITEM(__pyx_t_27, 5, __pyx_t_32);
        __pyx_t_20 = 0;
        __pyx_t_33 = 0;
        __pyx_t_29 = 0;
        __pyx_t_31 = 0;
        __pyx_t_17 = 0;
        __pyx_t_32 = 0;
        if (unlikely(PyDict_SetItem(__pyx_v_cone_segment_dict, __pyx_t_27, __pyx_t_11) < 0)) __PYX_ERR(0, 716, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_27); __pyx_t_27 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "neuron/rxd/geometry3d/ctng.pyx":715
 *     for sec,cones in potential_soma_cones.items():
 *         for cone in cones:
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:             # <<<<<<<<<<<<<<
 *                 cone_segment_dict[(cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1)] = sec.trueparentseg()
 * 
 */
      }

      /* "neuron/rxd/geometry3d/ctng.pyx":714
 * 
 *     for sec,cones in potential_soma_cones.items():
 *         for cone in cones:             # <<<<<<<<<<<<<<
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:
 *                 cone_segment_dict[(cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1)] = sec.trueparentseg()
 */
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "neuron/rxd/geometry3d/ctng.pyx":713
 *             cone.set_clip([Union(clip)])
 * 
 *     for sec,cones in potential_soma_cones.items():             # <<<<<<<<<<<<<<
 *         for cone in cones:
 *             if (cone._x0, cone._y0, cone._z0, cone._x1, cone._y1, cone._z1) not in cone_segment_dict:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":726
 *     #objects += all_cones
 * 
 *     return [objects, all_cones, cone_segment_dict, join_groups, obj_pts_dict, soma_segment_dict]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_all_cones)) { __Pyx_RaiseUnboundLocalError("all_cones"); __PYX_ERR(0, 726, __pyx_L1_error) }
  __pyx_t_4 = PyList_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_objects);
  __Pyx_GIVEREF(__pyx_v_objects);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_objects);
  __Pyx_INCREF(__pyx_v_all_cones);
  __Pyx_GIVEREF(__pyx_v_all_cones);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_v_all_cones);
  __Pyx_INCREF(__pyx_v_cone_segment_dict);
  __Pyx_GIVEREF(__pyx_v_cone_segment_dict);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_v_cone_segment_dict);
  __Pyx_INCREF(__pyx_v_join_groups);
  __Pyx_GIVEREF(__pyx_v_join_groups);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_v_join_groups);
  __Pyx_INCREF(__pyx_v_obj_pts_dict);
  __Pyx_GIVEREF(__pyx_v_obj_pts_dict);
  PyList_SET_ITEM(__pyx_t_4, 4, __pyx_v_obj_pts_dict);
  __Pyx_INCREF(__pyx_v_soma_segment_dict);
  __Pyx_GIVEREF(__pyx_v_soma_segment_dict);
  PyList_SET_ITEM(__pyx_t_4, 5, __pyx_v_soma_segment_dict);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_AddTraceback("neuron.rxd.geometry3d.ctng.constructive_neuronal_geometry", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_objects);
  __Pyx_XDECREF(__pyx_v_cone_segment_dict);
  __Pyx_XDECREF(__pyx_v_soma_segment_dict);
  __Pyx_XDECREF(__pyx_v_join_groups);
  __Pyx_XDECREF(__pyx_v_obj_pts_dict);
  __Pyx_XDECREF(__pyx_v_obj_sections);
  __Pyx_XDECREF(__pyx_v_cone_sections);
  __Pyx_XDECREF(__pyx_v_soma_secs);
  __Pyx_XDECREF(__pyx_v_potential_soma_cones);
  __Pyx_XDECREF(__pyx_v_pts);
  __Pyx_XDECREF(__pyx_v_f_pts);
  __Pyx_XDECREF(__pyx_v_branches);
  __Pyx_XDECREF(__pyx_v_parent_sec_name);
  __Pyx_XDECREF(__pyx_v_pt);
  __Pyx_XDECREF(__pyx_v_num_contours);
  __Pyx_XDECREF(__pyx_v_sec);
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_z);
  __Pyx_XDECREF(__pyx_v_center_vec);
  __Pyx_XDECREF(__pyx_v_new_objects);
  __Pyx_XDECREF(__pyx_v_is_stack);
  __Pyx_XDECREF(__pyx_v_pts3d);
  __Pyx_XDECREF(__pyx_v_shift);
  __Pyx_XDECREF(__pyx_v_orig_x);
  __Pyx_XDECREF(__pyx_v_orig_y);
  __Pyx_XDECREF(__pyx_v_orig_z);
  __Pyx_XDECREF(__pyx_v_sx);
  __Pyx_XDECREF(__pyx_v_sy);
  __Pyx_XDECREF(__pyx_v_sz);
  __Pyx_XDECREF(__pyx_v_warnings);
  __Pyx_XDECREF(__pyx_v_diam_corrections);
  __Pyx_XDECREF(__pyx_v_clip_copying);
  __Pyx_XDECREF(__pyx_v_all_cones);
  __Pyx_XDECREF(__pyx_v_pts_cones_db);
  __Pyx_XDECREF(__pyx_v_diam_db);
  __Pyx_XDECREF(__pyx_v_branch);
  __Pyx_XDECREF(__pyx_v_psec);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_rng);
  __Pyx_XDECREF(__pyx_v_arc3d);
  __Pyx_XDECREF(__pyx_v_diam3d);
  __Pyx_XDECREF(__pyx_v_x3d);
  __Pyx_XDECREF(__pyx_v_y3d);
  __Pyx_XDECREF(__pyx_v_z3d);
  __Pyx_XDECREF(__pyx_v_iseg);
  __Pyx_XDECREF(__pyx_v_seg);
  __Pyx_XDECREF(__pyx_v_lo);
  __Pyx_XDECREF(__pyx_v_hi);
  __Pyx_XDECREF(__pyx_v_diams);
  __Pyx_XDECREF(__pyx_v_xcoords);
  __Pyx_XDECREF(__pyx_v_ycoords);
  __Pyx_XDECREF(__pyx_v_zcoords);
  __Pyx_XDECREF(__pyx_v_conecoords);
  __Pyx_XDECREF(__pyx_v_somaz);
  __Pyx_XDECREF(__pyx_v_cp);
  __Pyx_XDECREF(__pyx_v_d0);
  __Pyx_XDECREF(__pyx_v_d1);
  __Pyx_XDECREF(__pyx_v_axisx);
  __Pyx_XDECREF(__pyx_v_axisy);
  __Pyx_XDECREF(__pyx_v_axisz);
  __Pyx_XDECREF(__pyx_v_deltad);
  __Pyx_XDECREF(__pyx_v_axislength);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_cone_clip_db);
  __Pyx_XDECREF(__pyx_v_join_items_needing_clipped);
  __Pyx_XDECREF(__pyx_v_cone);
  __Pyx_XDECREF(__pyx_v_joingroup);
  __Pyx_XDECREF(__pyx_v_pt1);
  __Pyx_XDECREF(__pyx_v_pt2);
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_XDECREF(__pyx_v_left_neighbors);
  __Pyx_XDECREF(__pyx_v_right_neighbors);
  __Pyx_XDECREF(__pyx_v_neighbor);
  __Pyx_XDECREF(__pyx_v_neighbor_left);
  __Pyx_XDECREF(__pyx_v_neighbor_right);
  __Pyx_XDECREF(__pyx_v_clips);
  __Pyx_XDECREF(__pyx_v_join_item);
  __Pyx_XDECREF(__pyx_v_pt0);
  __Pyx_XDECREF(__pyx_v_naxis);
  __Pyx_XDECREF(__pyx_v_sp);
  __Pyx_XDECREF(__pyx_v_c0);
  __Pyx_XDECREF(__pyx_v_c1);
  __Pyx_XDECREF(__pyx_v_plane_normal);
  __Pyx_XDECREF(__pyx_v_radial_vec);
  __Pyx_XDECREF(__pyx_v_nradial_vec);
  __Pyx_XDECREF(__pyx_v_corner_pts);
  __Pyx_XDECREF(__pyx_v_my_corner_count);
  __Pyx_XDECREF(__pyx_v_corner_count);
  __Pyx_XDECREF(__pyx_v_neighbor_copy);
  __Pyx_XDECREF(__pyx_v_z3);
  __Pyx_XDECREF(__pyx_v_r3);
  __Pyx_XDECREF(__pyx_v_pt3);
  __Pyx_XDECREF(__pyx_v_radial_vec_norm);
  __Pyx_XDECREF(__pyx_v_int_clip);
  __Pyx_XDECREF(__pyx_v_clip);
  __Pyx_XDECREF(__pyx_v_cones);
  __Pyx_XDECREF(__pyx_gb_6neuron_3rxd_10geometry3d_4ctng_30constructive_neuronal_geometry_2generator);
  __Pyx_XDECREF(__pyx_v_s0);
  __Pyx_XDECREF(__pyx_v_s1);
  __Pyx_XDECREF(__pyx_v_arc);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_cone);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":732
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":731
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":734
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":735
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":734
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":738
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":737
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":741
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":740
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":744
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":743
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":748
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":747
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":750
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":746
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":926
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":927
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":928
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 928, __pyx_L1_error)

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":926
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":930
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":931
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":932
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":933
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":932
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":934
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":930
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":938
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":940
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 940, __pyx_L3_error)

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":941
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 941, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":942
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 942, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 942, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":939
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":938
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":944
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":946
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 946, __pyx_L3_error)

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":947
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 947, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":948
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 948, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 948, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":945
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":944
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":950
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":952
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 952, __pyx_L3_error)

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":953
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(1, 953, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":954
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef extern from *:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 954, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(1, 954, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":951
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":950
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":964
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":976
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":964
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":979
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":991
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":979
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":994
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1001
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":994
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1004
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1008
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1004
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1015
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *__pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry[8];
static int __pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry = 0;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry)))) {
    o = (PyObject*)__pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry[--__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry];
    memset(o, 0, sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cell);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry)))) {
    __pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry[__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry++] = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)o;
  if (p->__pyx_v_cell) {
    e = (*v)(p->__pyx_v_cell, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry *)o;
  tmp = ((PyObject*)p->__pyx_v_cell);
  p->__pyx_v_cell = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.ctng.__pyx_scope_struct__constructive_neuronal_geometry", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry, /*tp_traverse*/
  __pyx_tp_clear_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *__pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr[--__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_sec);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr[__pyx_freecount_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_sec) {
    e = (*v)(p->__pyx_v_sec, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "neuron.rxd.geometry3d.ctng.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_ctng(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_ctng},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "ctng",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Cone, __pyx_k_Cone, sizeof(__pyx_k_Cone), 0, 0, 1, 1},
  {&__pyx_n_s_Cylinder, __pyx_k_Cylinder, sizeof(__pyx_k_Cylinder), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_Intersection, __pyx_k_Intersection, sizeof(__pyx_k_Intersection), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_Matrix, __pyx_k_Matrix, sizeof(__pyx_k_Matrix), 0, 0, 1, 1},
  {&__pyx_n_s_Plane, __pyx_k_Plane, sizeof(__pyx_k_Plane), 0, 0, 1, 1},
  {&__pyx_n_s_RxDException, __pyx_k_RxDException, sizeof(__pyx_k_RxDException), 0, 0, 1, 1},
  {&__pyx_n_s_SkewCone, __pyx_k_SkewCone, sizeof(__pyx_k_SkewCone), 0, 0, 1, 1},
  {&__pyx_n_s_Sphere, __pyx_k_Sphere, sizeof(__pyx_k_Sphere), 0, 0, 1, 1},
  {&__pyx_n_s_SphereCone, __pyx_k_SphereCone, sizeof(__pyx_k_SphereCone), 0, 0, 1, 1},
  {&__pyx_n_s_Union, __pyx_k_Union, sizeof(__pyx_k_Union), 0, 0, 1, 1},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_cones, __pyx_k_all_cones, sizeof(__pyx_k_all_cones), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arc, __pyx_k_arc, sizeof(__pyx_k_arc), 0, 0, 1, 1},
  {&__pyx_n_s_arc3d, __pyx_k_arc3d, sizeof(__pyx_k_arc3d), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_axislength, __pyx_k_axislength, sizeof(__pyx_k_axislength), 0, 0, 1, 1},
  {&__pyx_n_s_axisx, __pyx_k_axisx, sizeof(__pyx_k_axisx), 0, 0, 1, 1},
  {&__pyx_n_s_axisy, __pyx_k_axisy, sizeof(__pyx_k_axisy), 0, 0, 1, 1},
  {&__pyx_n_s_axisz, __pyx_k_axisz, sizeof(__pyx_k_axisz), 0, 0, 1, 1},
  {&__pyx_n_s_bisect, __pyx_k_bisect, sizeof(__pyx_k_bisect), 0, 0, 1, 1},
  {&__pyx_n_s_branch, __pyx_k_branch, sizeof(__pyx_k_branch), 0, 0, 1, 1},
  {&__pyx_n_s_branches, __pyx_k_branches, sizeof(__pyx_k_branches), 0, 0, 1, 1},
  {&__pyx_n_s_c0, __pyx_k_c0, sizeof(__pyx_k_c0), 0, 0, 1, 1},
  {&__pyx_n_s_c1, __pyx_k_c1, sizeof(__pyx_k_c1), 0, 0, 1, 1},
  {&__pyx_n_s_cell, __pyx_k_cell, sizeof(__pyx_k_cell), 0, 0, 1, 1},
  {&__pyx_n_s_center_vec, __pyx_k_center_vec, sizeof(__pyx_k_center_vec), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clip, __pyx_k_clip, sizeof(__pyx_k_clip), 0, 0, 1, 1},
  {&__pyx_n_s_clip_copying, __pyx_k_clip_copying, sizeof(__pyx_k_clip_copying), 0, 0, 1, 1},
  {&__pyx_n_s_clips, __pyx_k_clips, sizeof(__pyx_k_clips), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_combinations, __pyx_k_combinations, sizeof(__pyx_k_combinations), 0, 0, 1, 1},
  {&__pyx_n_s_cone, __pyx_k_cone, sizeof(__pyx_k_cone), 0, 0, 1, 1},
  {&__pyx_n_s_cone_clip_db, __pyx_k_cone_clip_db, sizeof(__pyx_k_cone_clip_db), 0, 0, 1, 1},
  {&__pyx_n_s_cone_sections, __pyx_k_cone_sections, sizeof(__pyx_k_cone_sections), 0, 0, 1, 1},
  {&__pyx_n_s_cone_segment_dict, __pyx_k_cone_segment_dict, sizeof(__pyx_k_cone_segment_dict), 0, 0, 1, 1},
  {&__pyx_n_s_conecoords, __pyx_k_conecoords, sizeof(__pyx_k_conecoords), 0, 0, 1, 1},
  {&__pyx_n_s_cones, __pyx_k_cones, sizeof(__pyx_k_cones), 0, 0, 1, 1},
  {&__pyx_n_s_constructive_neuronal_geometry, __pyx_k_constructive_neuronal_geometry, sizeof(__pyx_k_constructive_neuronal_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_constructive_neuronal_geometry_l, __pyx_k_constructive_neuronal_geometry_l, sizeof(__pyx_k_constructive_neuronal_geometry_l), 0, 0, 1, 1},
  {&__pyx_n_s_contourcenter, __pyx_k_contourcenter, sizeof(__pyx_k_contourcenter), 0, 0, 1, 1},
  {&__pyx_n_s_corner_count, __pyx_k_corner_count, sizeof(__pyx_k_corner_count), 0, 0, 1, 1},
  {&__pyx_n_s_corner_pts, __pyx_k_corner_pts, sizeof(__pyx_k_corner_pts), 0, 0, 1, 1},
  {&__pyx_n_s_cp, __pyx_k_cp, sizeof(__pyx_k_cp), 0, 0, 1, 1},
  {&__pyx_n_s_cross, __pyx_k_cross, sizeof(__pyx_k_cross), 0, 0, 1, 1},
  {&__pyx_n_s_cx, __pyx_k_cx, sizeof(__pyx_k_cx), 0, 0, 1, 1},
  {&__pyx_n_s_cy, __pyx_k_cy, sizeof(__pyx_k_cy), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_d0, __pyx_k_d0, sizeof(__pyx_k_d0), 0, 0, 1, 1},
  {&__pyx_n_s_d1, __pyx_k_d1, sizeof(__pyx_k_d1), 0, 0, 1, 1},
  {&__pyx_n_s_define_shape, __pyx_k_define_shape, sizeof(__pyx_k_define_shape), 0, 0, 1, 1},
  {&__pyx_n_s_delta_x, __pyx_k_delta_x, sizeof(__pyx_k_delta_x), 0, 0, 1, 1},
  {&__pyx_n_s_delta_y, __pyx_k_delta_y, sizeof(__pyx_k_delta_y), 0, 0, 1, 1},
  {&__pyx_n_s_deltad, __pyx_k_deltad, sizeof(__pyx_k_deltad), 0, 0, 1, 1},
  {&__pyx_n_s_diam1, __pyx_k_diam1, sizeof(__pyx_k_diam1), 0, 0, 1, 1},
  {&__pyx_n_s_diam2, __pyx_k_diam2, sizeof(__pyx_k_diam2), 0, 0, 1, 1},
  {&__pyx_n_s_diam3d, __pyx_k_diam3d, sizeof(__pyx_k_diam3d), 0, 0, 1, 1},
  {&__pyx_n_s_diam_corrections, __pyx_k_diam_corrections, sizeof(__pyx_k_diam_corrections), 0, 0, 1, 1},
  {&__pyx_n_s_diam_db, __pyx_k_diam_db, sizeof(__pyx_k_diam_db), 0, 0, 1, 1},
  {&__pyx_n_s_diams, __pyx_k_diams, sizeof(__pyx_k_diams), 0, 0, 1, 1},
  {&__pyx_n_s_distance, __pyx_k_distance, sizeof(__pyx_k_distance), 0, 0, 1, 1},
  {&__pyx_n_s_div, __pyx_k_div, sizeof(__pyx_k_div), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_extreme1, __pyx_k_extreme1, sizeof(__pyx_k_extreme1), 0, 0, 1, 1},
  {&__pyx_n_s_extreme2, __pyx_k_extreme2, sizeof(__pyx_k_extreme2), 0, 0, 1, 1},
  {&__pyx_kp_s_extreme_points_computation_faile, __pyx_k_extreme_points_computation_faile, sizeof(__pyx_k_extreme_points_computation_faile), 0, 0, 1, 0},
  {&__pyx_n_s_f_diams, __pyx_k_f_diams, sizeof(__pyx_k_f_diams), 0, 0, 1, 1},
  {&__pyx_n_s_f_pts, __pyx_k_f_pts, sizeof(__pyx_k_f_pts), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_getcol, __pyx_k_getcol, sizeof(__pyx_k_getcol), 0, 0, 1, 1},
  {&__pyx_n_s_getrow, __pyx_k_getrow, sizeof(__pyx_k_getrow), 0, 0, 1, 1},
  {&__pyx_n_s_graphicsPrimitives, __pyx_k_graphicsPrimitives, sizeof(__pyx_k_graphicsPrimitives), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_n_s_hi, __pyx_k_hi, sizeof(__pyx_k_hi), 0, 0, 1, 1},
  {&__pyx_n_s_hname, __pyx_k_hname, sizeof(__pyx_k_hname), 0, 0, 1, 1},
  {&__pyx_n_s_hoc_internal_name, __pyx_k_hoc_internal_name, sizeof(__pyx_k_hoc_internal_name), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_int_clip, __pyx_k_int_clip, sizeof(__pyx_k_int_clip), 0, 0, 1, 1},
  {&__pyx_n_s_interp, __pyx_k_interp, sizeof(__pyx_k_interp), 0, 0, 1, 1},
  {&__pyx_n_s_is_stack, __pyx_k_is_stack, sizeof(__pyx_k_is_stack), 0, 0, 1, 1},
  {&__pyx_n_s_iscontour, __pyx_k_iscontour, sizeof(__pyx_k_iscontour), 0, 0, 1, 1},
  {&__pyx_n_s_iseg, __pyx_k_iseg, sizeof(__pyx_k_iseg), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join_groups, __pyx_k_join_groups, sizeof(__pyx_k_join_groups), 0, 0, 1, 1},
  {&__pyx_n_s_join_item, __pyx_k_join_item, sizeof(__pyx_k_join_item), 0, 0, 1, 1},
  {&__pyx_n_s_join_items_needing_clipped, __pyx_k_join_items_needing_clipped, sizeof(__pyx_k_join_items_needing_clipped), 0, 0, 1, 1},
  {&__pyx_n_s_joingroup, __pyx_k_joingroup, sizeof(__pyx_k_joingroup), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_left_neighbors, __pyx_k_left_neighbors, sizeof(__pyx_k_left_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_n_s_lo, __pyx_k_lo, sizeof(__pyx_k_lo), 0, 0, 1, 1},
  {&__pyx_n_s_loc, __pyx_k_loc, sizeof(__pyx_k_loc), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_mag, __pyx_k_mag, sizeof(__pyx_k_mag), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_major, __pyx_k_major, sizeof(__pyx_k_major), 0, 0, 1, 1},
  {&__pyx_n_s_major_length, __pyx_k_major_length, sizeof(__pyx_k_major_length), 0, 0, 1, 1},
  {&__pyx_n_s_major_p1, __pyx_k_major_p1, sizeof(__pyx_k_major_p1), 0, 0, 1, 1},
  {&__pyx_n_s_major_p2, __pyx_k_major_p2, sizeof(__pyx_k_major_p2), 0, 0, 1, 1},
  {&__pyx_n_s_margin, __pyx_k_margin, sizeof(__pyx_k_margin), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_ind, __pyx_k_max_ind, sizeof(__pyx_k_max_ind), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_min_ind, __pyx_k_min_ind, sizeof(__pyx_k_min_ind), 0, 0, 1, 1},
  {&__pyx_n_s_minor, __pyx_k_minor, sizeof(__pyx_k_minor), 0, 0, 1, 1},
  {&__pyx_kp_s_more_than_one_contour_is_not_cur, __pyx_k_more_than_one_contour_is_not_cur, sizeof(__pyx_k_more_than_one_contour_is_not_cur), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_most_extreme_points, __pyx_k_multiple_most_extreme_points, sizeof(__pyx_k_multiple_most_extreme_points), 0, 0, 1, 0},
  {&__pyx_n_s_my_corner_count, __pyx_k_my_corner_count, sizeof(__pyx_k_my_corner_count), 0, 0, 1, 1},
  {&__pyx_n_s_n3d, __pyx_k_n3d, sizeof(__pyx_k_n3d), 0, 0, 1, 1},
  {&__pyx_n_s_n_soma_step, __pyx_k_n_soma_step, sizeof(__pyx_k_n_soma_step), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_naxis, __pyx_k_naxis, sizeof(__pyx_k_naxis), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor, __pyx_k_neighbor, sizeof(__pyx_k_neighbor), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_copy, __pyx_k_neighbor_copy, sizeof(__pyx_k_neighbor_copy), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_left, __pyx_k_neighbor_left, sizeof(__pyx_k_neighbor_left), 0, 0, 1, 1},
  {&__pyx_n_s_neighbor_right, __pyx_k_neighbor_right, sizeof(__pyx_k_neighbor_right), 0, 0, 1, 1},
  {&__pyx_n_s_neuron, __pyx_k_neuron, sizeof(__pyx_k_neuron), 0, 0, 1, 1},
  {&__pyx_n_s_neuron_rxd_geometry3d_ctng, __pyx_k_neuron_rxd_geometry3d_ctng, sizeof(__pyx_k_neuron_rxd_geometry3d_ctng), 0, 0, 1, 1},
  {&__pyx_n_s_neuron_rxd_rxdException, __pyx_k_neuron_rxd_rxdException, sizeof(__pyx_k_neuron_rxd_rxdException), 0, 0, 1, 1},
  {&__pyx_n_s_new_objects, __pyx_k_new_objects, sizeof(__pyx_k_new_objects), 0, 0, 1, 1},
  {&__pyx_n_s_no_parent_count, __pyx_k_no_parent_count, sizeof(__pyx_k_no_parent_count), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_nouniform, __pyx_k_nouniform, sizeof(__pyx_k_nouniform), 0, 0, 1, 1},
  {&__pyx_n_s_nradial_vec, __pyx_k_nradial_vec, sizeof(__pyx_k_nradial_vec), 0, 0, 1, 1},
  {&__pyx_n_s_nseg, __pyx_k_nseg, sizeof(__pyx_k_nseg), 0, 0, 1, 1},
  {&__pyx_n_s_num_contours, __pyx_k_num_contours, sizeof(__pyx_k_num_contours), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj_pts_dict, __pyx_k_obj_pts_dict, sizeof(__pyx_k_obj_pts_dict), 0, 0, 1, 1},
  {&__pyx_n_s_obj_sections, __pyx_k_obj_sections, sizeof(__pyx_k_obj_sections), 0, 0, 1, 1},
  {&__pyx_n_s_objects, __pyx_k_objects, sizeof(__pyx_k_objects), 0, 0, 1, 1},
  {&__pyx_n_s_orig_x, __pyx_k_orig_x, sizeof(__pyx_k_orig_x), 0, 0, 1, 1},
  {&__pyx_n_s_orig_y, __pyx_k_orig_y, sizeof(__pyx_k_orig_y), 0, 0, 1, 1},
  {&__pyx_n_s_orig_z, __pyx_k_orig_z, sizeof(__pyx_k_orig_z), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_p1, __pyx_k_p1, sizeof(__pyx_k_p1), 0, 0, 1, 1},
  {&__pyx_n_s_p2, __pyx_k_p2, sizeof(__pyx_k_p2), 0, 0, 1, 1},
  {&__pyx_n_s_parent_sec_name, __pyx_k_parent_sec_name, sizeof(__pyx_k_parent_sec_name), 0, 0, 1, 1},
  {&__pyx_n_s_parentsec, __pyx_k_parentsec, sizeof(__pyx_k_parentsec), 0, 0, 1, 1},
  {&__pyx_n_s_path_length, __pyx_k_path_length, sizeof(__pyx_k_path_length), 0, 0, 1, 1},
  {&__pyx_n_s_plane_normal, __pyx_k_plane_normal, sizeof(__pyx_k_plane_normal), 0, 0, 1, 1},
  {&__pyx_n_s_potential_soma_cones, __pyx_k_potential_soma_cones, sizeof(__pyx_k_potential_soma_cones), 0, 0, 1, 1},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_psec, __pyx_k_psec, sizeof(__pyx_k_psec), 0, 0, 1, 1},
  {&__pyx_n_s_pt, __pyx_k_pt, sizeof(__pyx_k_pt), 0, 0, 1, 1},
  {&__pyx_n_s_pt0, __pyx_k_pt0, sizeof(__pyx_k_pt0), 0, 0, 1, 1},
  {&__pyx_n_s_pt1, __pyx_k_pt1, sizeof(__pyx_k_pt1), 0, 0, 1, 1},
  {&__pyx_n_s_pt1x, __pyx_k_pt1x, sizeof(__pyx_k_pt1x), 0, 0, 1, 1},
  {&__pyx_n_s_pt1y, __pyx_k_pt1y, sizeof(__pyx_k_pt1y), 0, 0, 1, 1},
  {&__pyx_n_s_pt2, __pyx_k_pt2, sizeof(__pyx_k_pt2), 0, 0, 1, 1},
  {&__pyx_n_s_pt2x, __pyx_k_pt2x, sizeof(__pyx_k_pt2x), 0, 0, 1, 1},
  {&__pyx_n_s_pt2y, __pyx_k_pt2y, sizeof(__pyx_k_pt2y), 0, 0, 1, 1},
  {&__pyx_n_s_pt3, __pyx_k_pt3, sizeof(__pyx_k_pt3), 0, 0, 1, 1},
  {&__pyx_n_s_pts, __pyx_k_pts, sizeof(__pyx_k_pts), 0, 0, 1, 1},
  {&__pyx_n_s_pts3d, __pyx_k_pts3d, sizeof(__pyx_k_pts3d), 0, 0, 1, 1},
  {&__pyx_n_s_pts_cones_db, __pyx_k_pts_cones_db, sizeof(__pyx_k_pts_cones_db), 0, 0, 1, 1},
  {&__pyx_n_s_pts_sources, __pyx_k_pts_sources, sizeof(__pyx_k_pts_sources), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_r0, __pyx_k_r0, sizeof(__pyx_k_r0), 0, 0, 1, 1},
  {&__pyx_n_s_r0_2, __pyx_k_r0_2, sizeof(__pyx_k_r0_2), 0, 0, 1, 1},
  {&__pyx_n_s_r1, __pyx_k_r1, sizeof(__pyx_k_r1), 0, 0, 1, 1},
  {&__pyx_n_s_r1_2, __pyx_k_r1_2, sizeof(__pyx_k_r1_2), 0, 0, 1, 1},
  {&__pyx_n_s_r2, __pyx_k_r2, sizeof(__pyx_k_r2), 0, 0, 1, 1},
  {&__pyx_n_s_r3, __pyx_k_r3, sizeof(__pyx_k_r3), 0, 0, 1, 1},
  {&__pyx_n_s_radial_vec, __pyx_k_radial_vec, sizeof(__pyx_k_radial_vec), 0, 0, 1, 1},
  {&__pyx_n_s_radial_vec_norm, __pyx_k_radial_vec_norm, sizeof(__pyx_k_radial_vec_norm), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
  {&__pyx_n_s_relevant_pts, __pyx_k_relevant_pts, sizeof(__pyx_k_relevant_pts), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_right_neighbors, __pyx_k_right_neighbors, sizeof(__pyx_k_right_neighbors), 0, 0, 1, 1},
  {&__pyx_n_s_rng, __pyx_k_rng, sizeof(__pyx_k_rng), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s0, __pyx_k_s0, sizeof(__pyx_k_s0), 0, 0, 1, 1},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_sec, __pyx_k_sec, sizeof(__pyx_k_sec), 0, 0, 1, 1},
  {&__pyx_n_s_sec_db, __pyx_k_sec_db, sizeof(__pyx_k_sec_db), 0, 0, 1, 1},
  {&__pyx_n_s_sections, __pyx_k_sections, sizeof(__pyx_k_sections), 0, 0, 1, 1},
  {&__pyx_n_s_seg, __pyx_k_seg, sizeof(__pyx_k_seg), 0, 0, 1, 1},
  {&__pyx_n_s_seg_dict, __pyx_k_seg_dict, sizeof(__pyx_k_seg_dict), 0, 0, 1, 1},
  {&__pyx_n_s_segment_locs, __pyx_k_segment_locs, sizeof(__pyx_k_segment_locs), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_clip, __pyx_k_set_clip, sizeof(__pyx_k_set_clip), 0, 0, 1, 1},
  {&__pyx_n_s_setval, __pyx_k_setval, sizeof(__pyx_k_setval), 0, 0, 1, 1},
  {&__pyx_kp_s_share_lib_python_neuron_rxd_geom, __pyx_k_share_lib_python_neuron_rxd_geom, sizeof(__pyx_k_share_lib_python_neuron_rxd_geom), 0, 0, 1, 0},
  {&__pyx_n_s_sharp_turn, __pyx_k_sharp_turn, sizeof(__pyx_k_sharp_turn), 0, 0, 1, 1},
  {&__pyx_n_s_shift, __pyx_k_shift, sizeof(__pyx_k_shift), 0, 0, 1, 1},
  {&__pyx_n_s_soma_objects, __pyx_k_soma_objects, sizeof(__pyx_k_soma_objects), 0, 0, 1, 1},
  {&__pyx_kp_s_soma_rotation_unsupported_for_vo, __pyx_k_soma_rotation_unsupported_for_vo, sizeof(__pyx_k_soma_rotation_unsupported_for_vo), 0, 0, 1, 0},
  {&__pyx_n_s_soma_secs, __pyx_k_soma_secs, sizeof(__pyx_k_soma_secs), 0, 0, 1, 1},
  {&__pyx_n_s_soma_segment_dict, __pyx_k_soma_segment_dict, sizeof(__pyx_k_soma_segment_dict), 0, 0, 1, 1},
  {&__pyx_kp_s_soma_stack_ignored_using_centroi, __pyx_k_soma_stack_ignored_using_centroi, sizeof(__pyx_k_soma_stack_ignored_using_centroi), 0, 0, 1, 0},
  {&__pyx_n_s_somax, __pyx_k_somax, sizeof(__pyx_k_somax), 0, 0, 1, 1},
  {&__pyx_n_s_somay, __pyx_k_somay, sizeof(__pyx_k_somay), 0, 0, 1, 1},
  {&__pyx_n_s_somaz, __pyx_k_somaz, sizeof(__pyx_k_somaz), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_source_is_import3d, __pyx_k_source_is_import3d, sizeof(__pyx_k_source_is_import3d), 0, 0, 1, 1},
  {&__pyx_n_s_sp, __pyx_k_sp, sizeof(__pyx_k_sp), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sx, __pyx_k_sx, sizeof(__pyx_k_sx), 0, 0, 1, 1},
  {&__pyx_n_s_sy, __pyx_k_sy, sizeof(__pyx_k_sy), 0, 0, 1, 1},
  {&__pyx_n_s_symmeig, __pyx_k_symmeig, sizeof(__pyx_k_symmeig), 0, 0, 1, 1},
  {&__pyx_n_s_sz, __pyx_k_sz, sizeof(__pyx_k_sz), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thickness, __pyx_k_thickness, sizeof(__pyx_k_thickness), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_to_python, __pyx_k_to_python, sizeof(__pyx_k_to_python), 0, 0, 1, 1},
  {&__pyx_n_s_tobj, __pyx_k_tobj, sizeof(__pyx_k_tobj), 0, 0, 1, 1},
  {&__pyx_n_s_trueparentseg, __pyx_k_trueparentseg, sizeof(__pyx_k_trueparentseg), 0, 0, 1, 1},
  {&__pyx_kp_s_unexpected_corner_counts, __pyx_k_unexpected_corner_counts, sizeof(__pyx_k_unexpected_corner_counts), 0, 0, 1, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_x0_2, __pyx_k_x0_2, sizeof(__pyx_k_x0_2), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x1_2, __pyx_k_x1_2, sizeof(__pyx_k_x1_2), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_x3, __pyx_k_x3, sizeof(__pyx_k_x3), 0, 0, 1, 1},
  {&__pyx_n_s_x3d, __pyx_k_x3d, sizeof(__pyx_k_x3d), 0, 0, 1, 1},
  {&__pyx_n_s_x4, __pyx_k_x4, sizeof(__pyx_k_x4), 0, 0, 1, 1},
  {&__pyx_n_s_xcoords, __pyx_k_xcoords, sizeof(__pyx_k_xcoords), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_xs_loop, __pyx_k_xs_loop, sizeof(__pyx_k_xs_loop), 0, 0, 1, 1},
  {&__pyx_n_s_xshifted, __pyx_k_xshifted, sizeof(__pyx_k_xshifted), 0, 0, 1, 1},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_y0_2, __pyx_k_y0_2, sizeof(__pyx_k_y0_2), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y1_2, __pyx_k_y1_2, sizeof(__pyx_k_y1_2), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_y3, __pyx_k_y3, sizeof(__pyx_k_y3), 0, 0, 1, 1},
  {&__pyx_n_s_y3d, __pyx_k_y3d, sizeof(__pyx_k_y3d), 0, 0, 1, 1},
  {&__pyx_n_s_y4, __pyx_k_y4, sizeof(__pyx_k_y4), 0, 0, 1, 1},
  {&__pyx_n_s_ycoords, __pyx_k_ycoords, sizeof(__pyx_k_ycoords), 0, 0, 1, 1},
  {&__pyx_n_s_ys_loop, __pyx_k_ys_loop, sizeof(__pyx_k_ys_loop), 0, 0, 1, 1},
  {&__pyx_n_s_yshifted, __pyx_k_yshifted, sizeof(__pyx_k_yshifted), 0, 0, 1, 1},
  {&__pyx_n_s_yy, __pyx_k_yy, sizeof(__pyx_k_yy), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z0, __pyx_k_z0, sizeof(__pyx_k_z0), 0, 0, 1, 1},
  {&__pyx_n_s_z0_2, __pyx_k_z0_2, sizeof(__pyx_k_z0_2), 0, 0, 1, 1},
  {&__pyx_n_s_z1, __pyx_k_z1, sizeof(__pyx_k_z1), 0, 0, 1, 1},
  {&__pyx_n_s_z1_2, __pyx_k_z1_2, sizeof(__pyx_k_z1_2), 0, 0, 1, 1},
  {&__pyx_n_s_z2, __pyx_k_z2, sizeof(__pyx_k_z2), 0, 0, 1, 1},
  {&__pyx_n_s_z3, __pyx_k_z3, sizeof(__pyx_k_z3), 0, 0, 1, 1},
  {&__pyx_n_s_z3d, __pyx_k_z3d, sizeof(__pyx_k_z3d), 0, 0, 1, 1},
  {&__pyx_n_s_zcoords, __pyx_k_zcoords, sizeof(__pyx_k_zcoords), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {&__pyx_n_s_zshifted, __pyx_k_zshifted, sizeof(__pyx_k_zshifted), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 209, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 239, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 239, __pyx_L1_error)
  #endif
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 307, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 382, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_builtin_min = __Pyx_GetBuiltinName(__pyx_n_s_min); if (!__pyx_builtin_min) __PYX_ERR(0, 497, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_builtin_any = __Pyx_GetBuiltinName(__pyx_n_s_any); if (!__pyx_builtin_any) __PYX_ERR(0, 661, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 942, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "neuron/rxd/geometry3d/ctng.pyx":183
 * 
 *     # locate the major and minor axis, adapted from import3d_gui.hoc
 *     m = h.Matrix(3, 3)             # <<<<<<<<<<<<<<
 *     for i, p in enumerate([xshifted, yshifted, zshifted]):
 *         for j, q in enumerate([xshifted, yshifted, zshifted]):
 */
  __pyx_tuple_ = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":942
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(1, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":948
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(1, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "neuron/rxd/geometry3d/ctng.pyx":169
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def soma_objects(x, y, z, sec, double x0, double y0, double z0, int n_soma_step):             # <<<<<<<<<<<<<<
 *     cdef double diam1, diam2, somax, somay, somaz
 *     cdef list objects = []
 */
  __pyx_tuple__4 = PyTuple_Pack(66, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_sec, __pyx_n_s_x0, __pyx_n_s_y0, __pyx_n_s_z0, __pyx_n_s_n_soma_step, __pyx_n_s_diam1, __pyx_n_s_diam2, __pyx_n_s_somax, __pyx_n_s_somay, __pyx_n_s_somaz, __pyx_n_s_objects, __pyx_n_s_f_pts, __pyx_n_s_seg_dict, __pyx_n_s_xshifted, __pyx_n_s_yshifted, __pyx_n_s_zshifted, __pyx_n_s_m, __pyx_n_s_i, __pyx_n_s_p, __pyx_n_s_j, __pyx_n_s_q, __pyx_n_s_v, __pyx_n_s_tobj, __pyx_n_s_major, __pyx_n_s_minor, __pyx_n_s_x1_2, __pyx_n_s_y1_2, __pyx_n_s_x2, __pyx_n_s_y2, __pyx_n_s_xs_loop, __pyx_n_s_ys_loop, __pyx_n_s_pts, __pyx_n_s_pts_sources, __pyx_n_s_x3, __pyx_n_s_y3, __pyx_n_s_x4, __pyx_n_s_y4, __pyx_n_s_pt, __pyx_n_s_major_p1, __pyx_n_s_major_p2, __pyx_n_s_extreme1, __pyx_n_s_extreme2, __pyx_n_s_major_length, __pyx_n_s_delta_x, __pyx_n_s_delta_y, __pyx_n_s_f_diams, __pyx_n_s_p1, __pyx_n_s_p2, __pyx_n_s_cx, __pyx_n_s_cy, __pyx_n_s_segment_locs, __pyx_n_s_path_length, __pyx_n_s_margin, __pyx_n_s_pt1x, __pyx_n_s_pt1y, __pyx_n_s_pt2x, __pyx_n_s_pt2y, __pyx_n_s_thickness, __pyx_n_s_s, __pyx_n_s_loc, __pyx_n_s_seg, __pyx_n_s_xx, __pyx_n_s_yy); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(8, 0, 66, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__4, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_share_lib_python_neuron_rxd_geom, __pyx_n_s_soma_objects, 169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 169, __pyx_L1_error)

  /* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */
  __pyx_tuple__6 = PyTuple_Pack(139, __pyx_n_s_source, __pyx_n_s_n_soma_step, __pyx_n_s_dx, __pyx_n_s_nouniform, __pyx_n_s_relevant_pts, __pyx_n_s_objects, __pyx_n_s_cone_segment_dict, __pyx_n_s_soma_segment_dict, __pyx_n_s_join_groups, __pyx_n_s_obj_pts_dict, __pyx_n_s_obj_sections, __pyx_n_s_cone_sections, __pyx_n_s_soma_secs, __pyx_n_s_potential_soma_cones, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_x0, __pyx_n_s_y0, __pyx_n_s_z0, __pyx_n_s_x1_2, __pyx_n_s_y1_2, __pyx_n_s_z1_2, __pyx_n_s_x2, __pyx_n_s_y2, __pyx_n_s_z2, __pyx_n_s_x3, __pyx_n_s_y3, __pyx_n_s_x4, __pyx_n_s_y4, __pyx_n_s_r0_2, __pyx_n_s_r1_2, __pyx_n_s_r2, __pyx_n_s_delta_x, __pyx_n_s_delta_y, __pyx_n_s_major_length, __pyx_n_s_diam1, __pyx_n_s_diam2, __pyx_n_s_pts, __pyx_n_s_f_pts, __pyx_n_s_f_diams, __pyx_n_s_branches, __pyx_n_s_parent_sec_name, __pyx_n_s_pts_sources, __pyx_n_s_pt, __pyx_n_s_no_parent_count, __pyx_n_s_source_is_import3d, __pyx_n_s_num_contours, __pyx_n_s_cell, __pyx_n_s_sec, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_center_vec, __pyx_n_s_new_objects, __pyx_n_s_is_stack, __pyx_n_s_pts3d, __pyx_n_s_shift, __pyx_n_s_orig_x, __pyx_n_s_orig_y, __pyx_n_s_orig_z, __pyx_n_s_sx, __pyx_n_s_sy, __pyx_n_s_sz, __pyx_n_s_warnings, __pyx_n_s_diam_corrections, __pyx_n_s_clip_copying, __pyx_n_s_all_cones, __pyx_n_s_pts_cones_db, __pyx_n_s_diam_db, __pyx_n_s_branch, __pyx_n_s_psec, __pyx_n_s_d, __pyx_n_s_rng, __pyx_n_s_arc3d, __pyx_n_s_diam3d, __pyx_n_s_x3d, __pyx_n_s_y3d, __pyx_n_s_z3d, __pyx_n_s_iseg, __pyx_n_s_seg, __pyx_n_s_lo, __pyx_n_s_hi, __pyx_n_s_diams, __pyx_n_s_xcoords, __pyx_n_s_ycoords, __pyx_n_s_zcoords, __pyx_n_s_end, __pyx_n_s_conecoords, __pyx_n_s_somaz, __pyx_n_s_cp, __pyx_n_s_d0, __pyx_n_s_d1, __pyx_n_s_axisx, __pyx_n_s_axisy, __pyx_n_s_axisz, __pyx_n_s_deltad, __pyx_n_s_axislength, __pyx_n_s_vals, __pyx_n_s_cone_clip_db, __pyx_n_s_sharp_turn, __pyx_n_s_join_items_needing_clipped, __pyx_n_s_cone, __pyx_n_s_joingroup, __pyx_n_s_pt1, __pyx_n_s_pt2, __pyx_n_s_axis, __pyx_n_s_left_neighbors, __pyx_n_s_right_neighbors, __pyx_n_s_neighbor, __pyx_n_s_neighbor_left, __pyx_n_s_neighbor_right, __pyx_n_s_clips, __pyx_n_s_join_item, __pyx_n_s_pt0, __pyx_n_s_naxis, __pyx_n_s_sp, __pyx_n_s_c0, __pyx_n_s_c1, __pyx_n_s_plane_normal, __pyx_n_s_radial_vec, __pyx_n_s_nradial_vec, __pyx_n_s_corner_pts, __pyx_n_s_my_corner_count, __pyx_n_s_corner_count, __pyx_n_s_neighbor_copy, __pyx_n_s_z3, __pyx_n_s_r3, __pyx_n_s_pt3, __pyx_n_s_radial_vec_norm, __pyx_n_s_int_clip, __pyx_n_s_clip, __pyx_n_s_cones, __pyx_n_s_genexpr, __pyx_n_s_genexpr, __pyx_n_s_s0, __pyx_n_s_s1, __pyx_n_s_arc, __pyx_n_s_cone); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(5, 0, 139, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__6, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_share_lib_python_neuron_rxd_geom, __pyx_n_s_constructive_neuronal_geometry, 278, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_items.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyList_Type_remove.type = (PyObject*)&PyList_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_ = PyFloat_FromDouble(2.); if (unlikely(!__pyx_float_2_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry = &__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct__constructive_neuronal_geometry;
  if (PyType_Ready(&__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 307, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr = &__pyx_type_6neuron_3rxd_10geometry3d_4ctng___pyx_scope_struct_1_genexpr;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_37(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(2, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(1, 199, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(1, 222, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(1, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(1, 238, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(1, 767, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_number) __PYX_ERR(1, 769, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(1, 771, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(1, 773, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(1, 775, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(1, 777, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(1, 779, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(1, 781, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(1, 783, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyObject),__Pyx_ImportType_CheckSize_Warn_0_29_37); if (!__pyx_ptype_5numpy_character) __PYX_ERR(1, 785, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_0_29_37(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_37(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_0_29_37); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(1, 824, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initctng(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initctng(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_ctng(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_ctng(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_ctng(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'ctng' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_ctng(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ctng", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_neuron__rxd__geometry3d__ctng) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "neuron.rxd.geometry3d.ctng")) {
      if (unlikely(PyDict_SetItemString(modules, "neuron.rxd.geometry3d.ctng", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "neuron/rxd/geometry3d/ctng.pyx":2
 * #cython: language_level=2
 * from neuron import h             # <<<<<<<<<<<<<<
 * import numpy
 * import itertools
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_h);
  __Pyx_GIVEREF(__pyx_n_s_h);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_h);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_neuron, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_h); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_h, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":3
 * #cython: language_level=2
 * from neuron import h
 * import numpy             # <<<<<<<<<<<<<<
 * import itertools
 * import bisect
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_numpy, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":4
 * from neuron import h
 * import numpy
 * import itertools             # <<<<<<<<<<<<<<
 * import bisect
 * cimport numpy
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":5
 * import numpy
 * import itertools
 * import bisect             # <<<<<<<<<<<<<<
 * cimport numpy
 * from numpy import linalg
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_bisect, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bisect, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":7
 * import bisect
 * cimport numpy
 * from numpy import linalg             # <<<<<<<<<<<<<<
 * cimport cython
 * from neuron.rxd.rxdException import RxDException
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_linalg);
  __Pyx_GIVEREF(__pyx_n_s_linalg);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_linalg);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_linalg, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":9
 * from numpy import linalg
 * cimport cython
 * from neuron.rxd.rxdException import RxDException             # <<<<<<<<<<<<<<
 * import neuron
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_RxDException);
  __Pyx_GIVEREF(__pyx_n_s_RxDException);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_RxDException);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_neuron_rxd_rxdException, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_RxDException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RxDException, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":10
 * cimport cython
 * from neuron.rxd.rxdException import RxDException
 * import neuron             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_neuron, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_neuron, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":21
 *     double fabs(double)
 * 
 * from graphicsPrimitives import Sphere, Cone, Cylinder, SkewCone, Plane, Union, Intersection, SphereCone             # <<<<<<<<<<<<<<
 * 
 * cdef tuple seg_line_intersection(double x1, double y1, double x2, double y2, double x3, double y3, double x4, double y4, bint clip):
 */
  __pyx_t_2 = PyList_New(8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Sphere);
  __Pyx_GIVEREF(__pyx_n_s_Sphere);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Sphere);
  __Pyx_INCREF(__pyx_n_s_Cone);
  __Pyx_GIVEREF(__pyx_n_s_Cone);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Cone);
  __Pyx_INCREF(__pyx_n_s_Cylinder);
  __Pyx_GIVEREF(__pyx_n_s_Cylinder);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Cylinder);
  __Pyx_INCREF(__pyx_n_s_SkewCone);
  __Pyx_GIVEREF(__pyx_n_s_SkewCone);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_SkewCone);
  __Pyx_INCREF(__pyx_n_s_Plane);
  __Pyx_GIVEREF(__pyx_n_s_Plane);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_Plane);
  __Pyx_INCREF(__pyx_n_s_Union);
  __Pyx_GIVEREF(__pyx_n_s_Union);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_Union);
  __Pyx_INCREF(__pyx_n_s_Intersection);
  __Pyx_GIVEREF(__pyx_n_s_Intersection);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_Intersection);
  __Pyx_INCREF(__pyx_n_s_SphereCone);
  __Pyx_GIVEREF(__pyx_n_s_SphereCone);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_SphereCone);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_graphicsPrimitives, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Sphere); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sphere, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Cone); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Cone, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Cylinder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Cylinder, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SkewCone); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SkewCone, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Plane); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Plane, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Union); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Union, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Intersection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Intersection, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SphereCone); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SphereCone, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":169
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def soma_objects(x, y, z, sec, double x0, double y0, double z0, int n_soma_step):             # <<<<<<<<<<<<<<
 *     cdef double diam1, diam2, somax, somay, somaz
 *     cdef list objects = []
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_4ctng_1soma_objects, NULL, __pyx_n_s_neuron_rxd_geometry3d_ctng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_soma_objects, __pyx_t_1) < 0) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":278
 * @cython.wraparound(False)
 * @cython.boundscheck(False)
 * def constructive_neuronal_geometry(source, int n_soma_step, double dx, nouniform=False, relevant_pts=None):             # <<<<<<<<<<<<<<
 *     cdef list objects = []
 *     cdef dict cone_segment_dict = {}
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6neuron_3rxd_10geometry3d_4ctng_3constructive_neuronal_geometry, NULL, __pyx_n_s_neuron_rxd_geometry3d_ctng); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_constructive_neuronal_geometry, __pyx_t_1) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "neuron/rxd/geometry3d/ctng.pyx":1
 * #cython: language_level=2             # <<<<<<<<<<<<<<
 * from neuron import h
 * import numpy
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../.pyenv/versions/py12/lib/python3.12/site-packages/numpy/__init__.pxd":1011
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init neuron.rxd.geometry3d.ctng", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init neuron.rxd.geometry3d.ctng");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectCallNoArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* GetItemInt */
  static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetAttr */
    static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* UnpackUnboundCMethod */
    static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            #else
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            #endif
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* py_abs */
    #if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* SliceObject */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* SetItemInt */
    static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* PyObjectCallMethod0 */
    static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackTupleError */
    static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
    static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
    static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyIntCompare */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* CallUnboundCMethod0 */
    static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_items */
    static CYTHON_INLINE PyObject* __Pyx_PyDict_Items(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_items, d);
    else
        return PyDict_Items(d);
}

/* GetTopmostException */
    #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType_0_29_37
#define __PYX_HAVE_RT_ImportType_0_29_37
static PyTypeObject *__Pyx_ImportType_0_29_37(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_37 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_37 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_37 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


    /* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* CoroutineBase */
    #include <structmember.h>
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
    #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
