#some nrnconf.h and nmodlconf.h definitions
set(NRNHOST "\"${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}\"")
set(NRNHOSTCPU "\"${CMAKE_SYSTEM_PROCESSOR}\"")
set(PACKAGE_BUGREPORT "\"\"")
set(PACKAGE_NAME "${PACKAGE}")
set(PACKAGE_STRING "\"nrn ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\"")
set(PACKAGE_TARNAME "${PACKAGE}")
set(PACKAGE_URL "\"\"")
set(PACKAGE_VERSION "\"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\"")
set(VERSION "\"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}\"")
set(NRN_LIBDIR "\"${CMAKE_INSTALL_PREFIX}/lib\"")
set(NEURON_DATA_DIR "\"${CMAKE_INSTALL_PREFIX}/share/nrn\"")
set(SUNDIALS_DOUBLE_PRECISION 1)
set(SUNDIALS_USE_GENERIC_MATH 1)
set(LT_OBJDIR "\".libs/\"")
#INCLUDE(TestBigEndian)
#TEST_BIG_ENDIAN(WORDS_BIGENDIAN)
set(YYTEXT_POINTER 1)
set(TIME_WITH_SYS_TIME 1)
set(HAVE_NAMESPACES "/**/")
set(HAVE_STTY 0)
set(IVOS_FABS "::fabs") # complicated configure test but I don't think this is ever not the case anymore
set(HAVE_STL "/**/") # nowadays universal for CXX
set(DLL_DEFAULT_FNAME "\"${CMAKE_SYSTEM_PROCESSOR}/.libs/libnrnmech.so\"")

if (NOT "${NRN_ENABLE_PYTHON_DYNAMIC}" MATCHES "NO")
set(NRNPYTHON_DYNAMICLOAD 3) # the value needs to be made not to matter
endif()

# for nrn.defaults
set(nrndef_unix "//")
set(nrndef_mac "//")
set(nrndef_mswin "//")
set(MAC_DARWIN_TRUE "\#")
set(MAC_DARWIN_FALSE "")
if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
  set(nrndef_unix "")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
  set(nrndef_mac "")
  set(MAC_DARWIN_TRUE "")
  set(MAC_DARWIN_FALSE "\#")
elseif (${CMAKE_SYSTEM_NAME} MATCHES "Windows")
  set(nrndef_mswin "")
endif()

if (NRN_ENABLE_DISCRETE_EVENT_OBSERVER)
  set(DISCRETE_EVENT_OBSERVER 1)
else()
  set(DISCRETE_EVENT_OBSERVER 0)
endif()

if (NRN_ENABLE_LEGACY_FR)
  set (LegacyFR 1)
  set (LegacyY "")
  set (LegacyN "/")
else()
  set (LegacyFR 0)
  set (LegacyY "/")
  set (LegacyN "")
endif()

if (NRN_ENABLE_MECH_DLL_STYLE)
  set(NRNMECH_DLL_STYLE 1)
else()
  set(NRNMECH_DLL_STYLE 0)
endif()

#these two don't start out as #undef but as #define so need their explicit
#@...@ replacments
#set(NEURON_BIN_DIR "\"${CMAKE_INSTALL_PREFIX}/${CMAKE_SYSTEM_PROCESSOR}/bin\"")
#set(NRN_CONFIG_ARGS "\"unknown\"") # ends up as "" since no @...@
set (prefix ${CMAKE_INSTALL_PREFIX})
set (host_cpu ${CMAKE_SYSTEM_PROCESSOR})

set (exec_prefix ${prefix})
set (bindir \${exec_prefix}/bin)
set (modsubdir ${host_cpu})

if (NRN_ENABLE_INTERVIEWS)
  set (NRNOC_X11 1)
else()
  set (NRNOC_X11 0)
endif()

nrn_check_dir_exists(dirent.h HAVE_DIRENT_H)
nrn_check_dir_exists(ndir.h HAVE_NDIR_H)
nrn_check_dir_exists(sys/dir.h HAVE_SYS_DIR_H)
nrn_check_dir_exists(sys/ndir.h HAVE_SYS_NDIR_H)
if (HAVE_DIRENT_H) # autoconf sets to 0 in this case
  set(HAVE_SYS_DIR_H 0)
endif()

# like check_include_files but makes a NRN_HEADERS_INCLUDE_LIST of those that exist
nrn_check_include_files(alloca.h HAVE_ALLOCA_H)
nrn_check_include_files(dlfcn.h HAVE_DLFCN_H)
nrn_check_include_files(fcntl.h HAVE_FCNTL_H)
nrn_check_include_files(fenv.h HAVE_FENV_H)
nrn_check_include_files(float.h HAVE_FLOAT_H)
nrn_check_include_files(inttypes.h HAVE_INTTYPES_H)
nrn_check_include_files(limits.h HAVE_LIMITS_H)
nrn_check_include_files(locale.h HAVE_LOCALE_H)
nrn_check_include_files(malloc.h HAVE_MALLOC_H)
nrn_check_include_files(math.h HAVE_MATH_H)
nrn_check_include_files(memory.h HAVE_MEMORY_H)
nrn_check_include_files(pthread.h HAVE_PTHREAD_H)
nrn_check_include_files(sgtty.h HAVE_SGTTY_H)
nrn_check_include_files(stdarg.h HAVE_STDARG_H)
nrn_check_include_files(stdint.h HAVE_STDINT_H)
nrn_check_include_files(stdlib.h HAVE_STDLIB_H)
nrn_check_include_files(stream.h HAVE_STREAM_H)
nrn_check_include_files(strings.h HAVE_STRINGS_H)
nrn_check_include_files(string.h HAVE_STRING_H)
nrn_check_include_files(stropts.h HAVE_STROPTS_H)
nrn_check_include_files(sys/conf.h HAVE_SYS_CONF_H)
nrn_check_include_files(sys/file.h HAVE_SYS_FILE_H)
nrn_check_include_files(sys/ioctl.h HAVE_SYS_IOCTL_H)
nrn_check_include_files(sys/stat.h HAVE_SYS_STAT_H)
nrn_check_include_files(sys/time.h HAVE_SYS_TIME_H)
nrn_check_include_files(sys/types.h HAVE_SYS_TYPES_H)
nrn_check_include_files(sys/wait.h HAVE_SYS_WAIT_H)
nrn_check_include_files(termio.h HAVE_TERMIO_H)
nrn_check_include_files(unistd.h HAVE_UNISTD_H)
nrn_check_include_files(varargs.h HAVE_VARARGS_H)
nrn_check_include_files(sys/timeb.h HAVE_SYS_TIMEB_H)
check_include_files("dlfcn.h;stdint.h;stddef.h;inttypes.h;stdlib.h;strings.h;string.h;float.h" STDC_HEADERS)
check_include_files("_G_config.h" HAVE__G_CONFIG_H LANGUAGE CXX)

message(STATUS "NRN_HEADERS_INCLUDE_LIST ${NRN_HEADERS_INCLUDE_LIST}")

#like check_symbol_exists but internally <files> arg is "${NRN_HEADERS_INCLUDE_LIST}"
#unless not empty.
nrn_check_symbol_exists("alloca" "" HAVE_ALLOCA)
nrn_check_symbol_exists("bcopy" "" HAVE_BCOPY)
nrn_check_symbol_exists("bzero" "" HAVE_BZERO)
nrn_check_symbol_exists("doprnt" "" HAVE_DOPRNT)
#nrn_check_symbol_exists("DIR" "dirent.h" HAVE_DIRENT_H) #see nrn_check_dir_exists above
nrn_check_cxx_symbol_exists("fesetround" "" HAVE_FESETROUND)
nrn_check_symbol_exists("ftime" "" HAVE_FTIME)
nrn_check_symbol_exists("getcwd" "" HAVE_GETCWD)
nrn_check_symbol_exists("gethostname" "" HAVE_GETHOSTNAME)
nrn_check_cxx_symbol_exists("getpw" "sys/types.h;pwd.h" HAVE_GETPW)
nrn_check_symbol_exists("gettimeofday" "" HAVE_GETTIMEOFDAY)
nrn_check_symbol_exists("index" "" HAVE_INDEX)
nrn_check_symbol_exists("isatty" "" HAVE_ISATTY)
nrn_check_symbol_exists("iv" "" HAVE_IV)
nrn_check_symbol_exists("lockf" "" HAVE_LOCKF)
nrn_check_symbol_exists("mallinfo" "" HAVE_MALLINFO)
nrn_check_symbol_exists("mkdir" "" HAVE_MKDIR)
nrn_check_symbol_exists("mkstemp" "" HAVE_MKSTEMP)
nrn_check_symbol_exists("namespaces" "" HAVE_NAMESPACES)
nrn_check_symbol_exists("posix_memalign" "" HAVE_POSIX_MEMALIGN)
nrn_check_symbol_exists("pthread" "" HAVE_PTHREAD)
nrn_check_symbol_exists("putenv" "" HAVE_PUTENV)
nrn_check_symbol_exists("realpath" "" HAVE_REALPATH)
nrn_check_symbol_exists("select" "" HAVE_SELECT)
nrn_check_symbol_exists("setenv" "" HAVE_SETENV)
nrn_check_symbol_exists("setitimer" "" HAVE_SETITIMER)
nrn_check_symbol_exists("sigaction" "" HAVE_SIGACTION)
nrn_check_symbol_exists("SIGBUS" "signal.h" HAVE_SIGBUS)
nrn_check_symbol_exists("SIGSEGV" "signal.h" HAVE_SIGSEGV)
#nrn_check_cxx_symbol_exists("std::stringstream" "sstream" HAVE_SSTREAM)
set(HAVE_SSTREAM /**/) # should always exist these days
nrn_check_symbol_exists("strdup" "" HAVE_STRDUP)
nrn_check_symbol_exists("strstr" "" HAVE_STRSTR)
nrn_check_symbol_exists("stty" "" HAVE_STTY)
nrn_check_symbol_exists("vprintf" "" HAVE_VPRINTF)

nrn_check_signal_return_type(RETSIGTYPE) # very likely void

nrn_check_type_exists(sys/types.h gid_t int gid_t)
nrn_check_type_exists(sys/types.h off_t "long int" off_t)
nrn_check_type_exists(sys/types.h pid_t int pid_t)
nrn_check_type_exists(sys/types.h size_t "unsigned int" size_t)
nrn_check_type_exists(sys/types.h uid_t int uid_t)

# nrnconf.h.in and nmodlconf.h.in were originally generated from
# config.h.in generated by autoheader. We use
#repository copy cmk_nrnconf.h.in to create these files.
my_copy_no_clobber("${PROJECT_SOURCE_DIR}/cmk_nrnconf.h.in" "${PROJECT_SOURCE_DIR}/nrnconf.h.in")
my_copy_no_clobber("${PROJECT_SOURCE_DIR}/cmk_nrnconf.h.in" "${PROJECT_SOURCE_DIR}/nmodlconf.h.in")

# generate foo from foo.in files
nrn_configure_file(nrnconf.h .)
nrn_configure_file(nmodlconf.h .)
nrn_configure_file(nrnmpiuse.h src/oc)
nrn_configure_file(nrnrtuse.h src/oc)
nrn_configure_file(nrnpthread.h src/oc)
nrn_configure_file(nrnconfigargs.h src/nrnoc)
nrn_configure_file(nrnpython_config.h src/nrnpython)
nrn_configure_file(bbsconf.h src/parallel)
nrn_configure_file(nrnneosm.h src/nrncvode)
nrn_configure_file(sundials_config.h src/sundials)
nrn_configure_file(mos2nrn.h src/uxnrnbbs)
nrn_configure_file(ivstream.h src/ivos)
nrn_configure_file(njconf.h src/nrnjava)
nrn_configure_file(nmodlconf.h .)
nrn_configure_file(nrnunits.lib share/lib)
nrn_configure_file(nrn.defaults share/lib)
if (NOT NRN_ENABLE_INTERVIEWS)
  nrn_configure_file(ivstream.h src/ivos)
  my_copy_no_clobber("${PROJECT_SOURCE_DIR}/cmk_nrnconf.h.in" "${PROJECT_SOURCE_DIR}/config.h.in")
  nrn_configure_file(config.h .)
endif()

