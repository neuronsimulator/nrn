name: NEURON CI

concurrency: 
  group: ${{ github.workflow }}#${{ github.ref }}
  cancel-in-progress: true  

on:
  push:
    branches: 
      - master
      - release/**
  pull_request:
    branches:
      - master
      - release/**
# TODO : https://github.com/neuronsimulator/nrn/issues/1063
#    paths-ignore:
#      - '**.md'
#      - '**.rst'
#      - 'docs/**'

env:
  BUILD_TYPE: Release
  DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
  DESIRED_CMAKE_VERSION: 3.8.2
  PY_MIN_VERSION: 3.6
  PY_MAX_VERSION: 3.9

jobs:
  ci:
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }} - ${{ matrix.config.build_mode }} (${{ matrix.config.cmake_option }}${{ matrix.config.config_options }}${{ matrix.config.matrix_eval }})

    timeout-minutes: 45

    env:
      INSTALL_DIR: install
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)
      SKIP_WHEELHOUSE_REPAIR: true

    strategy:
      matrix:
        os: [ macOS-10.15, ubuntu-18.04]
        config:
          - { matrix_eval : "CC=gcc CXX=g++" ,      build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_MPI=ON -DNRN_ENABLE_INTERVIEWS=ON -DNRN_ENABLE_CORENEURON=ON" }
          - { matrix_eval : "CC=gcc-8 CXX=g++-8",   build_mode: "setuptools"  }
          - { matrix_eval : "CC=gcc-5 CXX=g++-5",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_MPI=OFF -DNRN_ENABLE_INTERVIEWS=OFF -DNRN_ENABLE_CORENEURON=ON" }
          - { matrix_eval : "CC=gcc-6 CXX=g++-6",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_MPI=ON -DNRN_ENABLE_INTERVIEWS=ON -DNRN_ENABLE_CORENEURON=OFF" }
          - { matrix_eval : "CC=gcc-9 CXX=g++-9",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_PYTHON=OFF -DNRN_ENABLE_RX3D=OFF -DNRN_ENABLE_CORENEURON=ON" }
          - { matrix_eval : "CC=gcc-8 CXX=g++-8",   build_mode: "cmake",      python_dynamic : ON }
      fail-fast: false

    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: ${{ env.DESIRED_CMAKE_VERSION }}

      - name: Install homebrew packages
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install coreutils doxygen mpich xz && brew unlink mpich && brew install openmpi && brew install --cask xquartz
        shell: bash

      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install build-essential libopenmpi-dev libmpich-dev libx11-dev libxcomposite-dev mpich openmpi-bin patchelf g++-5 g++-6 g++-8 g++-9
        shell: bash

      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Set up Python@${{ env.PY_MIN_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PY_MIN_VERSION }}

      - name: Install Python@${{ env.PY_MIN_VERSION }} dependencies
        if: ${{ matrix.config.python_dynamic == 'ON' }}
        working-directory: ${{runner.workspace}}/nrn
        run: |
          python -m pip install --upgrade pip -r nrn_requirements.txt

      - name: Set up Python@${{ env.PY_MAX_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PY_MAX_VERSION }}

      - name: Install Python@${{ env.PY_MAX_VERSION }} dependencies
        working-directory: ${{runner.workspace}}/nrn
        run: |
          python -m pip install --upgrade pip -r nrn_requirements.txt

      - name: Build and Test
        id: build-test
        shell: bash
        working-directory: ${{runner.workspace}}/nrn
        run:  |

          # OS related
          if [ "$RUNNER_OS" == "Linux" ]; then
            eval $MATRIX_EVAL;
            export CI_OS_NAME="linux"
            export SHELL="/bin/bash"
          else
            export CXX=${CXX:-g++};
            export CC=${CC:-gcc};
          fi
          if [ "$RUNNER_OS" == "macOS" ]; then
            export CI_OS_NAME="osx"
            # TODO - this is a workaround that was implemented for Azure being reported as getting stuck.
            # However it does not get stuck: neuron module not found and script goes to interpreter, seeming stuck.
            # This needs to be addressed and SKIP_EMBEDED_PYTHON_TEST logic removed everywhere.
            export SKIP_EMBEDED_PYTHON_TEST="true"
          fi

          # Python setup
          export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python/
          # Python setup
          export PYTHON_MIN=$(which $PYTHON_MIN_NAME);
          export PYTHON_MAX=$(which $PYTHON_MAX_NAME);
          export PYTHON=$PYTHON_MAX
          if [ "$RUNNER_OS" == "macOS" ]; then
            # Python is not installed as a framework, so we need to writ 'backend: TkAgg' to `matplotlibrc`.
            # Since we are in a virtual environment, we cannot use `$HOME/matplotlibrc`
            # The following solution is generic and relies on `matplotlib.__file__` to know where to append backend setup.
            $PYTHON -c "import os,matplotlib; f =open(os.path.join(os.path.dirname(matplotlib.__file__), 'mpl-data/matplotlibrc'),'a'); f.write('backend: TkAgg');f.close();"
          fi;

          # Some logging
          echo $LANG
          echo $LC_ALL
          $CXX -v
          python3 -c 'import os,sys; os.set_blocking(sys.stdout.fileno(), True)'
          cmake --version

          # different builds with CMake
          if [ "$BUILD_MODE" == "cmake" ]; then
              ACTUAL_CMAKE_VERSION="`cmake --version|sed -n '1s/^.* //p'`";
              if test "$DESIRED_CMAKE_VERSION" != "$ACTUAL_CMAKE_VERSION" ; then
                echo "DESIRED_CMAKE_VERSION $DESIRED_CMAKE_VERSION";
                echo "ACTUAL_CMAKE_VERSION $ACTUAL_CMAKE_VERSION";
                echo "PATH=$PATH";
                which cmake;
                cmake --version;
                exit 1;
              fi;
              export CMAKE_OPTION="${{ matrix.config.cmake_option }}"
              if [ "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]; then
                export CMAKE_OPTION="-DNRN_ENABLE_PYTHON=ON -DNRN_ENABLE_PYTHON_DYNAMIC=ON -DNRN_PYTHON_DYNAMIC=${PYTHON_MIN};${PYTHON_MAX} -DNRN_ENABLE_CORENEURON=ON";
              else
                export CMAKE_OPTION="$CMAKE_OPTION -DPYTHON_EXECUTABLE=${PYTHON}";
              fi;
              mkdir build && cd build;
              echo "Building with: "$CMAKE_OPTION
              echo "CC="$CC
              echo "CXX="$CXX
              cmake $CMAKE_OPTION  -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DNRN_ENABLE_TESTS=ON -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR ..;
              # Autodetection does not seem to work well, compiler processes were getting killed.
              # These core counts are taken from
              # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
              if [ "$RUNNER_OS" == "macOS" ]; then
                BUILD_PARALLEL_LEVEL=3
              else
                BUILD_PARALLEL_LEVEL=2
              fi
              # The --parallel option to CMake was only added in v3.12
              cmake --build . -- -j ${BUILD_PARALLEL_LEVEL}
              if [ "$RUNNER_OS" == "macOS" ]; then
                echo $'[install]\nprefix='>src/nrnpython/setup.cfg;
              fi;
              if [ "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]; then
                echo "--RUNNING BASIC TESTS FROM BUILD DIR--";
                NEURONHOME=`pwd`/share/nrn  PYTHONPATH=`pwd`/lib/python PATH=`pwd`/bin LD_LIBRARY_PATH=`pwd`/lib DYLD_LIBRARY_PATH=`pwd`/lib $PYTHON_MIN -c "from neuron import h; import neuron; neuron.test()";
                NEURONHOME=`pwd`/share/nrn  PYTHONPATH=`pwd`/lib/python PATH=`pwd`/bin LD_LIBRARY_PATH=`pwd`/lib DYLD_LIBRARY_PATH=`pwd`/lib $PYTHON_MAX -c "from neuron import h; import neuron; neuron.test()";
              fi;
              make install;
              export PATH=$INSTALL_DIR/bin:$PATH;
              ctest -VV;
          elif [ "$BUILD_MODE" == "setuptools" ]; then
            ./packaging/python/build_wheels.bash CI;
          fi;

          # basic test for cmake when python is not disabled
          if [[ "$BUILD_MODE" == "cmake" && "$CMAKE_OPTION" != *"NRN_ENABLE_PYTHON=OFF"* ]]; then
            $PYTHON --version && $PYTHON -c 'import neuron; neuron.test()';
          fi;

          # test neurondemo with cmake
          if [ "$BUILD_MODE" != "setuptools" ]; then
            neurondemo -nogui -c 'demo(4)' -c 'run()' -c 'quit()';
          fi;

          # with cmake dynamic check python_min and python_max together
          if [[ "$BUILD_MODE" == "cmake" && "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]]; then
            $PYTHON_MAX -c 'import neuron; neuron.test()' && $PYTHON_MIN -c 'import neuron; neuron.test()';
          fi;

          # run rxd tests manually
          if [[ "$BUILD_MODE" == "cmake" && "$CMAKE_OPTION" != *"NRN_ENABLE_RX3D=OFF"* && "$CMAKE_OPTION" == *"NRN_ENABLE_CORENEURON=OFF"* ]]; then
            $PYTHON ../share/lib/python/neuron/rxdtests/run_all.py;
          fi;

          # with setuptools / pip, use wheel under virtual environment
          if [ "$BUILD_MODE" == "setuptools" ]; then
            neuron_wheel=wheelhouse/NEURON*.whl;
            ./packaging/python/test_wheels.sh $PYTHON $neuron_wheel;
          fi;
          # with setuptools / pip, use wheel for global install
          if [ "$BUILD_MODE" == "setuptools" ]; then
            neuron_wheel=wheelhouse/NEURON*.whl;
            ./packaging/python/test_wheels.sh $PYTHON $neuron_wheel false;
          fi;
        env:
          BUILD_MODE: ${{ matrix.config.build_mode }}
          NRN_ENABLE_PYTHON_DYNAMIC : ${{ matrix.config.python_dynamic }}
          PYTHON_MIN_NAME: "python${{ env.PY_MIN_VERSION }}"
          PYTHON_MAX_NAME: "python${{ env.PY_MAX_VERSION }}"
          INSTALL_DIR : ${{ runner.workspace }}/install
          MATRIX_EVAL: ${{ matrix.config.matrix_eval }}

      # This step will set up an SSH connection on tmate.io for live debugging.
      # To trigger it, simply add 'live-debug-ci' to your last pushed commit message.
      #
      # IF SEVERAL JOBS ARE FAILING, USE A FORK OR AT LEAST UPDATE THE MATRIX TO RUN ONLY ONE FAILING JOB AT A TIME,
      #    SO THAT THE MAIN CI DOESN'T GET SLOWED DOWN OR BLOCKED !
      - name: live debug session on failure
        if: failure() && contains(github.event.head_commit.message, 'live-debug-ci')
        uses: mxschmitt/action-tmate@v3
