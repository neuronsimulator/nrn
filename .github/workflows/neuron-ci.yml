name: NEURON CI

concurrency:
  # Don't cancel on master, creating a PR when a push workflow is already going will cancel the push workflow in favour of the PR workflow
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/master' && github.run_id || github.event.number && github.head_ref || github.ref_name }}
  cancel-in-progress: true

on:
  merge_group:
  push:
    branches:
      # If nothing else, this is important for the ccache logic below...
      - master
      - release/**
  pull_request:
    branches:
      - master
      - release/**
# TODO : https://github.com/neuronsimulator/nrn/issues/1063
#    paths-ignore:
#      - '**.md'
#      - '**.rst'
#      - 'docs/**'


jobs:
  ci:
    runs-on: ${{ matrix.os }}

    name: ${{ matrix.os }} - ${{ matrix.config.build_mode }} (${{ matrix.config.cmake_option }}${{ matrix.config.config_options }}${{ matrix.config.matrix_eval }}${{ matrix.config.sanitizer }})

    timeout-minutes: 75

    env:
      INSTALL_DIR: install
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)
      SKIP_WHEELHOUSE_REPAIR: true
      BUILD_TYPE: Release
      DESIRED_CMAKE_VERSION: 3.17
      DYNAMIC_PYTHON_CMAKE_VERSION: 3.18
      PY_MIN_VERSION: ${{ matrix.config.python_min_version || '3.9' }}
      PY_MAX_VERSION: ${{ matrix.config.python_max_version || '3.13' }}
      MUSIC_INSTALL_DIR: /opt/MUSIC
      # hash of commit containing mpi4py 4 fix
      MUSIC_VERSION: '13f312338dcccebfe74d391b1b24f1b6d816ac6c'
      PYTHON_MIN_PACKAGES_CACHE_DIR: ${{ github.workspace }}/pip_cache${{ matrix.config.python_min_version }}
      PYTHON_MAX_PACKAGES_CACHE_DIR: ${{ github.workspace }}/pip_cache${{ matrix.config.python_max_version }}

    strategy:
      matrix:
        os: [macOS-13, ubuntu-22.04]
        config:
          - { matrix_eval : "CC=gcc-9 CXX=g++-9",   build_mode: "setuptools"}
          - { matrix_eval : "CC=gcc-10 CXX=g++-10", build_mode: "cmake", music: ON}
          - { matrix_eval : "CC=gcc-10 CXX=g++-10", build_mode: "cmake", python_dynamic: ON}
          - { matrix_eval : "CC=gcc-9 CXX=g++-9" ,  build_mode: "cmake", cmake_option: "-DNRN_ENABLE_CORENEURON=ON"}
          - { matrix_eval : "CC=gcc-9 CXX=g++-9",   build_mode: "cmake", cmake_option: "-DNRN_ENABLE_MPI=OFF -DNRN_ENABLE_INTERVIEWS=OFF -DNRN_ENABLE_CORENEURON=ON"}
          - { matrix_eval : "CC=gcc-10 CXX=g++-10", build_mode: "cmake", cmake_option: "-DNRN_ENABLE_PYTHON=OFF -DNRN_ENABLE_RX3D=OFF -DNRN_ENABLE_CORENEURON=ON"}
        include:
          - os: ubuntu-22.04
            config:
              build_mode: cmake
              cmake_option: -DNRN_ENABLE_CORENEURON=ON
                -DNRN_ENABLE_INTERVIEWS=OFF -DNMODL_SANITIZERS=undefined
              flag_warnings: ON
              sanitizer: undefined
          - os: ubuntu-22.04
            config:
              build_mode: cmake
              # TODO: CoreNEURON is only LeakSanitizer-clean if we disable MPI
              cmake_option: -DNRN_ENABLE_CORENEURON=ON
                -DNRN_ENABLE_INTERVIEWS=OFF -DNMODL_SANITIZERS=address
              # TODO: address-leak is the dream, but there are many problems,
              # including external ones from the MPI implementations
              sanitizer: address
          - os: ubuntu-24.04
            config:
              build_mode: cmake
              # Cannot use a non-instrumented OpenMP with TSan, and we don't
              # have a TSan-instrumented OpenMP runtime available.
              # TODO: debug RX3D + TSan
              cmake_option: -DNRN_ENABLE_CORENEURON=ON -DNRN_ENABLE_MPI=OFF
                -DCORENRN_ENABLE_OPENMP=OFF -DNRN_ENABLE_RX3D=OFF
              sanitizer: thread
          - os: macOS-13
            config:
              build_mode: cmake
              # TODO: investigate rxd test timeouts in this build and re-enable them
              cmake_option: -DNRN_ENABLE_CORENEURON=ON -DNRN_ENABLE_INTERVIEWS=OFF
                -DNRN_ENABLE_RX3D=OFF -DNMODL_SANITIZERS=address
              sanitizer: address
          - os: macOS-14
            config:
              build_mode: cmake
              # TODO: investigate rxd test timeouts in this build and re-enable them
              cmake_option: -DNRN_ENABLE_CORENEURON=ON -DNRN_ENABLE_INTERVIEWS=OFF
                -DNRN_ENABLE_RX3D=OFF -DNMODL_SANITIZERS=address
              sanitizer: thread
      fail-fast: false

    steps:

      - name: Fix kernel mmap rnd bits
        # Asan in llvm 14 provided in ubuntu 22.04 is incompatible with
        # high-entropy ASLR in much newer kernels that GitHub runners are
        # using leading to random crashes: https://reviews.llvm.org/D148280
        run: sudo sysctl vm.mmap_rnd_bits=28
        if: matrix.os == 'ubuntu-22.04'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version : ${{(matrix.config.python_dynamic || matrix.config.build_mode == 'setuptools') && env.DYNAMIC_PYTHON_CMAKE_VERSION || env.DESIRED_CMAKE_VERSION}}

      - name: Install homebrew packages
        if: startsWith(matrix.os, 'macOS')
        run: |
          # Unlink and re-link to prevent errors when GitHub macOS runner images
          # install Python outside of brew; See actions/setup-python#577 and BlueBrain/libsonata/pull/317
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
          brew install ccache coreutils doxygen flex bison mpich ninja xz autoconf automake libtool
          # We use both for dynamic mpi in nrn
          brew unlink mpich
          brew install openmpi
          brew install --cask xquartz
          if [[ "${{matrix.os}}" == "macOS-14" ]]; then
            brew install cmake
            echo "$(brew --prefix)/opt/cmake/bin" >> $GITHUB_PATH
          fi
          # workaround for fmt 11.1 (see https://github.com/gabime/spdlog/pull/3312)
          brew unlink fmt
          echo "$(brew --prefix)/opt/flex/bin:$(brew --prefix)/opt/bison/bin" >> $GITHUB_PATH
          # Core https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          if [[ "${{matrix.os}}" == "macOS-13" ]]; then
            echo CMAKE_BUILD_PARALLEL_LEVEL=4 >> $GITHUB_ENV
            echo CTEST_PARALLEL_LEVEL=4 >> $GITHUB_ENV
          else
            echo CMAKE_BUILD_PARALLEL_LEVEL=3 >> $GITHUB_ENV
            echo CTEST_PARALLEL_LEVEL=3 >> $GITHUB_ENV
          fi
          echo CI_OS_NAME=osx >> $GITHUB_ENV
        shell: bash

      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install build-essential ccache libopenmpi-dev \
            libmpich-dev libx11-dev libxcomposite-dev mpich ninja-build \
            openmpi-bin flex libfl-dev bison libreadline-dev
          # Core https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories
          echo CMAKE_BUILD_PARALLEL_LEVEL=4 >> $GITHUB_ENV
          echo CTEST_PARALLEL_LEVEL=4 >> $GITHUB_ENV
          echo CI_OS_NAME=linux >> $GITHUB_ENV
        shell: bash

      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Cache Python@${{ env.PY_MIN_VERSION }} dependencies
        if: ${{matrix.config.python_dynamic == 'ON'}}
        id: cache-python-min-packages
        uses: actions/cache@v4
        with:
          path: ${PYTHON_MIN_PACKAGES_CACHE_DIR}
          key: cache-${{ matrix.os }}-${{ env.PY_MIN_VERSION }}-${{ hashFiles('ci/requirements.txt') }}

      - name: Set up Python@${{ env.PY_MIN_VERSION }}
        if: ${{matrix.config.python_dynamic == 'ON'}}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_MIN_VERSION }}

      - name: Install Python@${{ env.PY_MIN_VERSION }} dependencies
        if: ${{ matrix.config.python_dynamic == 'ON' }}
        working-directory: ${{runner.workspace}}/nrn
        run: |
          python -m pip install -r ci/requirements.txt --cache-dir ${PYTHON_MIN_PACKAGES_CACHE_DIR}

      - name: Cache Python@${{ env.PY_MAX_VERSION }} dependencies
        id: cache-python-max-packages
        uses: actions/cache@v4
        with:
          path: ${PYTHON_MAX_PACKAGES_CACHE_DIR}
          key: cache-${{ matrix.os }}-${{ env.PY_MAX_VERSION }}-${{ hashFiles('ci/requirements.txt') }}

      - name: Set up Python@${{ env.PY_MAX_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_MAX_VERSION }}

      - name: Install Python@${{ env.PY_MAX_VERSION }} dependencies
        working-directory: ${{runner.workspace}}/nrn
        run: |
          python -m pip install -r ci/requirements.txt --cache-dir ${PYTHON_MAX_PACKAGES_CACHE_DIR}

  # see https://github.com/orgs/community/discussions/26822
  final:
    name: Final CI
    needs: [ci]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check ci matrix all done
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}
        run: exit 1
