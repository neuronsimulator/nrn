name: NEURON CI

on:
  push:
    branches: 
      - master
      - live-debug*
      - release/**
  pull_request:
    branches:
      - master
      - release/**

env:
  BUILD_TYPE: Release
  DEVELOPER_DIR: /Applications/Xcode_11.3.1.app/Contents/Developer
  DESIRED_CMAKE_VERSION: 3.8.2

jobs:
  ci:
    runs-on: ${{ matrix.os }}
    
    name: ${{ matrix.os }} - ${{ matrix.config.build_mode }} (${{ matrix.config.cmake_option }}${{ matrix.config.config_options }}${{ matrix.config.matrix_eval }})
    
    timeout-minutes: 45
        
    env:
      INSTALL_DIR: install
      SDK_ROOT: $(xcrun --sdk macosx --show-sdk-path)
      TRAVIS: true

    strategy:
      matrix:
        os: [ macOS-10.15, ubuntu-18.04]
        config:
          - { matrix_eval : "CC=gcc CXX=g++" ,      build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_BINARY_SPECIAL=ON -DNRN_ENABLE_MPI=ON -DNRN_ENABLE_INTERVIEWS=ON -DNRN_ENABLE_CORENEURON=ON", documentation: ON }
          - { matrix_eval : "CC=gcc-8 CXX=g++-8",   build_mode: "setuptools"  }
          - { matrix_eval : "CC=gcc CXX=g++",       build_mode: "autotools",  config_options: "--without-x --without-paranrn --with-nrnpython=$PYTHON2 PYTHON_BLD=$PYTHON2", use_python2 : ON }
          - { matrix_eval : "CC=gcc-8 CXX=g++-8",   build_mode: "autotools",  config_options: "--without-x --with-paranrn=dynamic --with-nrnpython=$PYTHON" }
          - { matrix_eval : "CC=gcc-5 CXX=g++-5",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_MPI=OFF -DNRN_ENABLE_INTERVIEWS=OFF -DNRN_ENABLE_CORENEURON=ON" }
          - { matrix_eval : "CC=gcc-6 CXX=g++-6",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_MPI=ON -DNRN_ENABLE_INTERVIEWS=ON -DNRN_ENABLE_CORENEURON=OFF" }
          - { matrix_eval : "CC=gcc-9 CXX=g++-9",   build_mode: "cmake",      cmake_option: "-DNRN_ENABLE_PYTHON=OFF -DNRN_ENABLE_RX3D=OFF -DNRN_ENABLE_CORENEURON=ON" }
          - { matrix_eval : "CC=gcc-8 CXX=g++-8",   build_mode: "cmake",      python_dynamic : ON }
      fail-fast: false
      
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.4
        with:
          cmake-version: ${{ env.DESIRED_CMAKE_VERSION }}

      - name: Install homebrew packages
        if: startsWith(matrix.os, 'macOS')
        run: |
          brew install coreutils doxygen mpich xz autoconf automake libtool && brew unlink mpich && brew install openmpi && brew install --cask xquartz
        shell: bash
        
      - name: Install apt packages
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get install build-essential autoconf automake libtool autotools-dev libopenmpi-dev libmpich-dev libx11-dev libxcomposite-dev mpich openmpi-bin patchelf python-pip python-tk python-numpy python3-numpy python3-pip g++-5 g++-6 g++-8 g++-9
        shell: bash

      - name: Install documentation apt packages
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.config.documentation == 'ON' }}
        run: |
          sudo apt-get install ffmpeg doxygen
        shell: bash

      - name: Set up Python2
        uses: actions/setup-python@v2
        with:
          python-version: '2.x'

      - name: Install Python2 dependencies
        if: ${{ matrix.config.use_python2 == 'ON' || matrix.config.python_dynamic == 'ON' }}
        run: python2 -m pip install --upgrade pip wheel setuptools scikit-build pytest matplotlib bokeh ipython cython pytest pytest-cov mpi4py

      - name: Set up Python3
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Python3 dependencies
        run: python3 -m pip install --upgrade pip wheel setuptools scikit-build pytest matplotlib bokeh ipython cython pytest pytest-cov mpi4py
     
      - uses: actions/checkout@v2
        
      - name: Install Python3 documentation dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.config.documentation == 'ON' }}
        working-directory: ${{runner.workspace}}/nrn
        run: python3 -m pip install --upgrade -r docs/docs_requirements.txt
        
      - name: Build and Test
        id: build-test
        shell: bash
        working-directory: ${{runner.workspace}}/nrn
        run:  |

          # OS related
          if [ "$RUNNER_OS" == "Linux" ]; then
            eval $MATRIX_EVAL;
            export TRAVIS_OS_NAME="linux"
            export SHELL="/bin/bash"
          else
            export CXX=${CXX:-g++};
            export CC=${CC:-gcc};
          fi
          if [ "$RUNNER_OS" == "macOS" ]; then
            export TRAVIS_OS_NAME="osx"
            # TODO - this is a workaround that was implemented for Azure being reported as getting stuck.
            # However it does not get stuck: neuron module not found and script goes to interpreter, seeming stuck.
            # This needs to be addressed and SKIP_EMBEDED_PYTHON_TEST logic removed everywhere.
            export SKIP_EMBEDED_PYTHON_TEST="true"
          fi

          # Some logging
          echo $LANG
          echo $LC_ALL
          $CXX -v
          python3 -c 'import os,sys; os.set_blocking(sys.stdout.fileno(), True)'
          cmake --version

          # Python setup
          export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python/
          export PYTHON2=$(which python2);
          export PYTHON3=$(which python3);
          export PYTHON=$PYTHON3
          if [ "$USE_PYTHON2" == "ON" ]; then
            export PYTHON=$(which python2);
          fi;
          if [ "$RUNNER_OS" == "macOS" ]; then
            # Python is not installed as a framework, so we need to writ 'backend: TkAgg' to `matplotlibrc`.
            # Since we are in a virtual environment, we cannot use `$HOME/matplotlibrc`
            # The following solution is generic and relies on `matplotlib.__file__` to know where to append backend setup.
            $PYTHON -c "import os,matplotlib; f =open(os.path.join(os.path.dirname(matplotlib.__file__), 'mpl-data/matplotlibrc'),'a'); f.write('backend: TkAgg');f.close();"
          fi;

          # different builds with CMake
          if [ "$BUILD_MODE" == "cmake" ]; then
              ACTUAL_CMAKE_VERSION="`cmake --version|sed -n '1s/^.* //p'`";
              if test "$DESIRED_CMAKE_VERSION" != "$ACTUAL_CMAKE_VERSION" ; then
                echo "DESIRED_CMAKE_VERSION $DESIRED_CMAKE_VERSION";
                echo "ACTUAL_CMAKE_VERSION $ACTUAL_CMAKE_VERSION";
                echo "PATH=$PATH";
                which cmake;
                cmake --version;
                exit 1;
              fi;
              export CMAKE_OPTION="${{ matrix.config.cmake_option }}"
              if [ "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]; then
                export CMAKE_OPTION="-DNRN_ENABLE_PYTHON=ON -DNRN_ENABLE_PYTHON_DYNAMIC=ON -DNRN_PYTHON_DYNAMIC=${PYTHON2};${PYTHON3} -DNRN_ENABLE_CORENEURON=ON";
              else
                export CMAKE_OPTION="$CMAKE_OPTION -DPYTHON_EXECUTABLE=${PYTHON}";
              fi;
              mkdir build && cd build;
              echo "Building with: "$CMAKE_OPTION
              echo "CC="$CC
              echo "CXX="$CXX
              cmake $CMAKE_OPTION  -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DNRN_ENABLE_TESTS=ON -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR ..;
              cmake --build . -- -j;
              if [ "$RUNNER_OS" == "macOS" ]; then
                echo $'[install]\nprefix='>src/nrnpython/setup.cfg;
              fi;
              if [ "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]; then
                echo "--RUNNING BASIC TESTS FROM BUILD DIR--";
                NEURONHOME=`pwd`/share/nrn  PYTHONPATH=`pwd`/lib/python PATH=`pwd`/bin LD_LIBRARY_PATH=`pwd`/lib DYLD_LIBRARY_PATH=`pwd`/lib $PYTHON2 -c "from neuron import h; import neuron; neuron.test()";
                NEURONHOME=`pwd`/share/nrn  PYTHONPATH=`pwd`/lib/python PATH=`pwd`/bin LD_LIBRARY_PATH=`pwd`/lib DYLD_LIBRARY_PATH=`pwd`/lib $PYTHON3 -c "from neuron import h; import neuron; neuron.test()";
              fi;
              make install;
              export PATH=$INSTALL_DIR/bin:$PATH;
              ctest -VV;
          elif [ "$BUILD_MODE" == "setuptools" ]; then
            ./packaging/python/build_wheels.bash travis;
          elif [ "$BUILD_MODE" == "autotools" ]; then
            export CONFIG_OPTIONS="${{ matrix.config.config_options }}"

            # OS X without readline
            if [ "$RUNNER_OS" == "macOS" ]; then
              brew link openmpi
              export CONFIG_OPTIONS="$CONFIG_OPTIONS --with-readline=no";
            fi

            export PATH=$INSTALL_DIR/x86_64/bin:$PATH;
            ./.travis_build.sh $INSTALL_DIR;
          fi

          # basic tests for autoconf
          if [ "$BUILD_MODE" == "autotools" ]; then
            $PYTHON --version && $PYTHON -c 'import neuron; neuron.test()';
          fi;

          # basic test for cmake when python is not disabled
          if [[ "$BUILD_MODE" == "cmake" && "$CMAKE_OPTION" != *"NRN_ENABLE_PYTHON=OFF"* ]]; then
            $PYTHON --version && $PYTHON -c 'import neuron; neuron.test()';
          fi;

          # test neurondemo with cmake and autoconf
          if [ "$BUILD_MODE" != "setuptools" ]; then
            neurondemo -nogui -c 'demo(4)' -c 'run()' -c 'quit()';
          fi;

          # with cmake dynamic check python2 and python3 together
          if [[ "$BUILD_MODE" == "cmake" && "$NRN_ENABLE_PYTHON_DYNAMIC" == "ON" ]]; then
            $PYTHON3 -c 'import neuron; neuron.test()' && $PYTHON2 -c 'import neuron; neuron.test()';
          fi;

          # with autotools run rxd tests manually
          if [ "$BUILD_MODE" == "autotools" ]; then
            $PYTHON share/lib/python/neuron/rxdtests/run_all.py;
          fi;
          # with cmake also run rxd tests manually
          if [[ "$BUILD_MODE" == "cmake" && "$CMAKE_OPTION" != *"NRN_ENABLE_RX3D=OFF"* && "$CMAKE_OPTION" == *"NRN_ENABLE_CORENEURON=OFF"* ]]; then
            $PYTHON ../share/lib/python/neuron/rxdtests/run_all.py;
          fi;

          # with setuptools / pip, use wheel under virtual environment
          if [ "$BUILD_MODE" == "setuptools" ]; then
            neuron_wheel=wheelhouse/NEURON*.whl;
            ./packaging/python/test_wheels.sh $PYTHON $neuron_wheel;
          fi;
          # with setuptools / pip, use wheel for global install
          if [ "$BUILD_MODE" == "setuptools" ]; then
            neuron_wheel=wheelhouse/NEURON*.whl;
            ./packaging/python/test_wheels.sh $PYTHON $neuron_wheel false;
          fi;
        env:
          BUILD_MODE: ${{ matrix.config.build_mode }}
          NRN_ENABLE_PYTHON_DYNAMIC : ${{ matrix.config.python_dynamic }}
          USE_PYTHON2 : ${{ matrix.config.use_python2 }}
          INSTALL_DIR : ${{ runner.workspace }}/install
          MATRIX_EVAL: ${{ matrix.config.matrix_eval }}
      
      # This step will set up an SSH connection on tmate.io for live debugging.
      # To trigger it, simply prefix your branch name with `live-debug`
      #   i.e.: live-debug-hocfix
      - name: live debug session on failure
        if: failure() && startsWith(github.ref, 'refs/heads/live-debug')
        uses: mxschmitt/action-tmate@v3

      - name: Documentation 
        if: ${{ startsWith(matrix.os, 'ubuntu') && matrix.config.documentation == 'ON' }}
        id: documentation
        working-directory: ${{runner.workspace}}/nrn
        run: |
          echo "------- Bring up NEURON -------";
          export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python/
          export PATH=$INSTALL_DIR/bin:$PATH;
          echo "------- Build Doxygen Documentation -------";
          pushd build;
          make docs;
          echo "-------- Disable jekyll --------";
          pushd docs;
          touch .nojekyll;
          echo ::set-output name=status::done
        env:
          INSTALL_DIR : ${{ runner.workspace }}/install 
          
      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@3.7.1
        if: steps.documentation.outputs.status == 'done' && startsWith(github.ref, 'refs/heads/master')
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages # The branch the action should deploy to.
          FOLDER: ${{runner.workspace}}/nrn/build/docs # The folder the action should deploy.
          CLEAN: false # Automatically remove deleted files from the deploy branch
