name: NEURON Code Coverage

on:
  push:
    branches:
      - master
      - live-debug*
      - release/**
  pull_request:
    branches:
      - master
      - release/**

jobs:
  coverage:
    runs-on: ubuntu-18.04

    name: Code Coverage

    timeout-minutes: 45

    steps:

      - name: Install apt packages
        run: |
          sudo apt-get install  build-essential doxygen autoconf automake libtool lcov autotools-dev libopenmpi-dev libmpich-dev libx11-dev libxcomposite-dev mpich openmpi-bin patchelf python-pip python-tk python-numpy python3-numpy python3-pip g++-5 g++-6 g++-8 g++-9
        shell: bash

      - name: Set up Python2
        uses: actions/setup-python@v2
        with:
          python-version: '2.x'

      - name: Set up Python3
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Python3 dependencies
        run: python3 -m pip install --upgrade pip wheel setuptools scikit-build pytest matplotlib bokeh ipython cython pytest pytest-cov mpi4py

      - uses: actions/checkout@v2
         with:
           fetch-depth: 2

      - name: Build & Test
        id: build-test
        shell: bash
        working-directory: ${{runner.workspace}}/nrn
        run:  |
          export SHELL="/bin/bash"

          # Compiler setup
          export CC=gcc
          export CXX=g++

          # Python setup
          export PYTHON2=$(which python2);
          export PYTHON3=$(which python3);

          mkdir build && cd build;

          # CMake options & flags
          export COVERAGE_FLAGS="--coverage -O0 -fno-inline -g";
          export CMAKE_OPTION="-DNRN_ENABLE_BINARY_SPECIAL=ON -DNRN_ENABLE_MPI=ON -DNRN_ENABLE_INTERVIEWS=ON -DNRN_ENABLE_PYTHON=ON -DNRN_ENABLE_PYTHON_DYNAMIC=ON -DNRN_PYTHON_DYNAMIC=${PYTHON2};${PYTHON3} -DNRN_ENABLE_CORENEURON=ON";
          cmake $CMAKE_OPTION -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX -DNRN_ENABLE_TESTS=ON -DCMAKE_C_FLAGS="${COVERAGE_FLAGS}" -DCMAKE_CXX_FLAGS="${COVERAGE_FLAGS}" ..;

          # Coverage
          cmake --build . -- -j;
          (cd ..;  lcov --capture  --initial --directory . --no-external --output-file build/coverage-base.info)
          export PATH=`pwd`/bin:$PATH;
          ctest -VV;
          (cd ..; lcov --capture  --directory . --no-external --output-file build/coverage-run.info)
          lcov --add-tracefile coverage-base.info --add-tracefile coverage-run.info --output-file coverage-combined.info
          # Prefer auto-discovery for now. Specify reports once all python testing is unified under single report (-f option).
          bash <(curl -s https://codecov.io/bash)
        env:
          MATRIX_EVAL: "CC=gcc CXX=g++"

      # This step will set up an SSH connection on tmate.io for live debugging.
      # To trigger it, simply prefix your branch name with `live-debug`
      #   i.e.: live-debug-hocfix
      - name: live debug session on failure
        if: failure() && startsWith(github.ref, 'refs/heads/live-debug')
        uses: mxschmitt/action-tmate@v3
