Fano Factor Calculation for NetStim Events in NEURON
======================================================

**Q: How can I correctly calculate the Fano factor for synaptic events generated by a `NetStim` with noise=1 in NEURON?**

The Fano factor is defined as the variance-to-mean ratio of the number of events counted within fixed time intervals. It applies to discrete counts of events (e.g., spike counts in time bins), not to continuous variables like inter-event intervals.

A `NetStim` with `noise=1` generates synaptic events with intervals drawn from a negative exponential distribution, making the spike times irregular but the count of spikes in fixed intervals Poisson distributed. Hence, the Fano factor of counts over fixed-length time windows should be close to 1.

To obtain the Fano factor:

1. Record spike times from the `NetStim`.
2. Bin the spike times into fixed-duration windows.
3. Calculate the variance and mean of spike counts per bin.
4. Compute the Fano factor as variance/mean.

The interspike intervals (ISIs) follow an exponential distribution and their variance-to-mean ratio is not the Fano factor.

Example implementations:

.. code-block:: hoc

    // Fano factor calculation for NetStim events
    
    load_file("stdgui.hoc")  // ensure standard run library is loaded
    
    objref sti, con, vec, hist, isivec
    sti = new NetStim()
    sti.interval = 100    // mean interval in ms
    sti.start = 10
    sti.number = 1e9      // large number to avoid early stop
    sti.noise = 1         // fully random intervals
    
    con = new NetCon(sti, nil)
    vec = new Vector()
    con.record(vec)       // record spike times
    
    tstop = 35000
    cvode_active(1)       // enable adaptive integration for speed
    
    run()
    
    proc analyze() {
      // Compute interspike intervals using Vector.deriv
      isivec = new Vector()
      isivec.deriv(vec, 1, 1)
      print "Mean ISI: ", isivec.mean(), " ms"
      print "ISI stdev: ", isivec.stdev()
      print "Coefficient of variation (ISI stdev/mean): ", isivec.stdev() / isivec.mean()
      print ""
      
      // Compute histogram of spike counts in 20 ms bins
      hist = vec.histogram(0, tstop, 20)
      print "Fano factor (variance/mean of counts in 20 ms bins): ", hist.var() / hist.mean()
    }
    
    analyze()


.. code-block:: python

    from neuron import h
    
    h.load_file("stdgui.hoc")  # ensure standard run environment is loaded
    
    sti = h.NetStim()
    sti.interval = 100    # mean interval (ms)
    sti.start = 10
    sti.number = 1e9      # large number to avoid stop
    sti.noise = 1         # random intervals
    
    vec = h.Vector()
    con = h.NetCon(sti, None)
    con.record(vec)
    
    tstop = 35000
    h.cvode_active(1)
    
    h.tstop = tstop
    h.run()
    
    # Convert recorded spike times to Python list
    spike_times = list(vec)
    
    # Calculate interspike intervals (ISIs)
    import numpy as np
    isis = np.diff(spike_times)
    print("Mean ISI:", np.mean(isis), "ms")
    print("ISI stdev:", np.std(isis))
    print("Coefficient of variation (ISI stdev/mean):", np.std(isis) / np.mean(isis))
    
    # Bin spikes into fixed windows (e.g., 20 ms)
    bin_size = 20
    bins = np.arange(0, tstop + bin_size, bin_size)
    counts, _ = np.histogram(spike_times, bins)
    fano_factor = np.var(counts) / np.mean(counts)
    print("Fano factor (variance/mean of counts in 20 ms bins):", fano_factor)

**Notes:**

- The Fano factor should be close to 1 for a Poisson spike count distribution.
- Using large `number` in `NetStim` ensures the simulation does not terminate prematurely.
- Avoid computing Fano factor on interspike intervals; it applies to spike counts in time bins.
- For faster simulation, omit biophysical cells and simulate only with `NetStim` and `NetCon`.
- Enabling `cvode_active(1)` activates efficient event-driven simulation.

Original Thread: https://neuron.yale.edu/phpBB/viewtopic.php?t=2992
