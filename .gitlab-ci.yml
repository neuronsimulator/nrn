include:
  - project: hpc/gitlab-pipelines
    file:
      - github-project-pipelines.gitlab-ci.yml
    ref: '$GITLAB_PIPELINES_BRANCH'
  - project: hpc/gitlab-upload-logs
    file: enable-upload.yml
    ref: olupton/graphql

upload_logs_to_github:
  trigger:
    branch: olupton/graphql

# see https://gitlab.com/gitlab-org/gitlab/-/issues/263401 for why we specify the flags like this now
# 130 characters seems to be the point at which jobs refuse to run
.matrix:
  parallel:
    matrix:
      - build_mode: cmake
        cmake_coreneuron: "ON"
        cmake_interviews: "OFF"
        cmake_rx3d: "OFF"
        sanitizer: address

mac_m1_cmake_build:
  stage: build
  extends: .matrix
  cache:
    # either CI_MERGE_REQUEST_SOURCE_BRANCH_NAME or CI_COMMIT_BRANCH will be available,
    # depending on whether this pipeline runs for a merge request or on a branch
    # either way, we get the active branch in the cache key
    key: ${CI_JOB_NAME}-${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}${CI_COMMIT_BRANCH}
    paths:
      - ./ccache
  variables:
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}/nrn
    CCACHE_DIR: ${CI_PROJECT_DIR}/ccache
    CMAKE_BUILD_PARALLEL_LEVEL: 3
    CTEST_PARALLEL_LEVEL: 3
  tags:
    - macos-arm64
  script:
    - python3 -m virtualenv venv
    - venv/bin/pip install --upgrade pip -r nrn_requirements.txt
    - venv/bin/python --version
    - 'venv/bin/python -c "import os,matplotlib; f = open(os.path.join(os.path.dirname(matplotlib.__file__), \"mpl-data/matplotlibrc\"),\"a\"); f.write(\"backend: TkAgg\");f.close();"'
    - 'export CXX=${CXX:-g++}'
    - 'export CC=${CC:-gcc}'
    - export PYTHON=$(pwd)/venv/bin/python3
    - export INSTALL_DIR=$(pwd)/install
    - echo $LANG
    - echo $LC_ALL
    - source venv/bin/activate
    - 'export PYTHONPATH=$(${PYTHON} -c "import site; print(\":\".join(site.getsitepackages()))")'
    - 'export PYTHONPATH=$PYTHONPATH:$INSTALL_DIR/lib/python/'
    - ${PYTHON} -c 'import os,sys; os.set_blocking(sys.stdout.fileno(), True)'
    - cmake_args=(-G Ninja)
    - if [[ -n "${sanitizer}" ]]; then
    -   cmake_args+=(-DCMAKE_BUILD_TYPE=Custom
                     -DCMAKE_C_FLAGS="-O1 -g"
                     -DCMAKE_CXX_FLAGS="-O1 -g"
                     -DNRN_SANITIZERS=$(echo ${sanitizer} | sed -e 's/-/,/g'))
    - fi
    - cmake_args+=(-DCMAKE_C_COMPILER="${CC}"
                   -DCMAKE_C_COMPILER_LAUNCHER=ccache
                   -DCMAKE_CXX_COMPILER="${CXX}"
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
                   -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
                   -DNRN_ENABLE_TESTS=ON
                   -DNRN_ENABLE_PERFORMANCE_TESTS=OFF
                   -DNRN_ENABLE_CORENEURON=${cmake_coreneuron}
                   -DNRN_ENABLE_INTERVIEWS=${cmake_interviews}
                   -DNRN_ENABLE_RX3D=${cmake_rx3d})
    - cmake_args+=(-DPYTHON_EXECUTABLE="${PYTHON}")
    - mkdir build && cd build
    - echo "Building with ${cmake_args[@]}"
    - cmake .. "${cmake_args[@]}"
